
JIG_Phone_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf98  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  0800c058  0800c058  0001c058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c618  0800c618  0001c618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c620  0800c620  0001c620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c624  0800c624  0001c624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000000  0800c628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001620  20000080  0800c6a8  00020080  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200016a0  0800c6a8  000216a0  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a100  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000034b7  00000000  00000000  0003a1a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000dc0  00000000  00000000  0003d660  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c58  00000000  00000000  0003e420  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000091bd  00000000  00000000  0003f078  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003981  00000000  00000000  00048235  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004bbb6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000036e8  00000000  00000000  0004bc34  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         0000009c  00000000  00000000  0004f31c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014d  00000000  00000000  0004f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c040 	.word	0x0800c040

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	0800c040 	.word	0x0800c040

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	b083      	sub	sp, #12
 8000270:	000d      	movs	r5, r1
 8000272:	4692      	mov	sl, r2
 8000274:	4699      	mov	r9, r3
 8000276:	428b      	cmp	r3, r1
 8000278:	d82f      	bhi.n	80002da <__udivmoddi4+0x7a>
 800027a:	d02c      	beq.n	80002d6 <__udivmoddi4+0x76>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ae 	bl	80003e0 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8a9 	bl	80003e0 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	469b      	mov	fp, r3
 8000296:	d500      	bpl.n	800029a <__udivmoddi4+0x3a>
 8000298:	e074      	b.n	8000384 <__udivmoddi4+0x124>
 800029a:	4653      	mov	r3, sl
 800029c:	465a      	mov	r2, fp
 800029e:	4093      	lsls	r3, r2
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4642      	mov	r2, r8
 80002a6:	4093      	lsls	r3, r2
 80002a8:	001e      	movs	r6, r3
 80002aa:	42af      	cmp	r7, r5
 80002ac:	d829      	bhi.n	8000302 <__udivmoddi4+0xa2>
 80002ae:	d026      	beq.n	80002fe <__udivmoddi4+0x9e>
 80002b0:	465b      	mov	r3, fp
 80002b2:	1ba4      	subs	r4, r4, r6
 80002b4:	41bd      	sbcs	r5, r7
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	da00      	bge.n	80002bc <__udivmoddi4+0x5c>
 80002ba:	e079      	b.n	80003b0 <__udivmoddi4+0x150>
 80002bc:	2200      	movs	r2, #0
 80002be:	2300      	movs	r3, #0
 80002c0:	9200      	str	r2, [sp, #0]
 80002c2:	9301      	str	r3, [sp, #4]
 80002c4:	2301      	movs	r3, #1
 80002c6:	465a      	mov	r2, fp
 80002c8:	4093      	lsls	r3, r2
 80002ca:	9301      	str	r3, [sp, #4]
 80002cc:	2301      	movs	r3, #1
 80002ce:	4642      	mov	r2, r8
 80002d0:	4093      	lsls	r3, r2
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	e019      	b.n	800030a <__udivmoddi4+0xaa>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	d9d0      	bls.n	800027c <__udivmoddi4+0x1c>
 80002da:	2200      	movs	r2, #0
 80002dc:	2300      	movs	r3, #0
 80002de:	9200      	str	r2, [sp, #0]
 80002e0:	9301      	str	r3, [sp, #4]
 80002e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <__udivmoddi4+0x8c>
 80002e8:	601c      	str	r4, [r3, #0]
 80002ea:	605d      	str	r5, [r3, #4]
 80002ec:	9800      	ldr	r0, [sp, #0]
 80002ee:	9901      	ldr	r1, [sp, #4]
 80002f0:	b003      	add	sp, #12
 80002f2:	bc3c      	pop	{r2, r3, r4, r5}
 80002f4:	4690      	mov	r8, r2
 80002f6:	4699      	mov	r9, r3
 80002f8:	46a2      	mov	sl, r4
 80002fa:	46ab      	mov	fp, r5
 80002fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fe:	42a3      	cmp	r3, r4
 8000300:	d9d6      	bls.n	80002b0 <__udivmoddi4+0x50>
 8000302:	2200      	movs	r2, #0
 8000304:	2300      	movs	r3, #0
 8000306:	9200      	str	r2, [sp, #0]
 8000308:	9301      	str	r3, [sp, #4]
 800030a:	4643      	mov	r3, r8
 800030c:	2b00      	cmp	r3, #0
 800030e:	d0e8      	beq.n	80002e2 <__udivmoddi4+0x82>
 8000310:	07fb      	lsls	r3, r7, #31
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	431a      	orrs	r2, r3
 8000316:	4646      	mov	r6, r8
 8000318:	087b      	lsrs	r3, r7, #1
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	465b      	mov	r3, fp
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db22      	blt.n	800039c <__udivmoddi4+0x13c>
 8000356:	002b      	movs	r3, r5
 8000358:	465a      	mov	r2, fp
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4644      	mov	r4, r8
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	465b      	mov	r3, fp
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2c      	blt.n	80003c6 <__udivmoddi4+0x166>
 800036c:	0026      	movs	r6, r4
 800036e:	409e      	lsls	r6, r3
 8000370:	0033      	movs	r3, r6
 8000372:	0026      	movs	r6, r4
 8000374:	4647      	mov	r7, r8
 8000376:	40be      	lsls	r6, r7
 8000378:	0032      	movs	r2, r6
 800037a:	1a80      	subs	r0, r0, r2
 800037c:	4199      	sbcs	r1, r3
 800037e:	9000      	str	r0, [sp, #0]
 8000380:	9101      	str	r1, [sp, #4]
 8000382:	e7ae      	b.n	80002e2 <__udivmoddi4+0x82>
 8000384:	4642      	mov	r2, r8
 8000386:	2320      	movs	r3, #32
 8000388:	1a9b      	subs	r3, r3, r2
 800038a:	4652      	mov	r2, sl
 800038c:	40da      	lsrs	r2, r3
 800038e:	4641      	mov	r1, r8
 8000390:	0013      	movs	r3, r2
 8000392:	464a      	mov	r2, r9
 8000394:	408a      	lsls	r2, r1
 8000396:	0017      	movs	r7, r2
 8000398:	431f      	orrs	r7, r3
 800039a:	e782      	b.n	80002a2 <__udivmoddi4+0x42>
 800039c:	4642      	mov	r2, r8
 800039e:	2320      	movs	r3, #32
 80003a0:	1a9b      	subs	r3, r3, r2
 80003a2:	002a      	movs	r2, r5
 80003a4:	4646      	mov	r6, r8
 80003a6:	409a      	lsls	r2, r3
 80003a8:	0023      	movs	r3, r4
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	4313      	orrs	r3, r2
 80003ae:	e7d5      	b.n	800035c <__udivmoddi4+0xfc>
 80003b0:	4642      	mov	r2, r8
 80003b2:	2320      	movs	r3, #32
 80003b4:	2100      	movs	r1, #0
 80003b6:	1a9b      	subs	r3, r3, r2
 80003b8:	2200      	movs	r2, #0
 80003ba:	9100      	str	r1, [sp, #0]
 80003bc:	9201      	str	r2, [sp, #4]
 80003be:	2201      	movs	r2, #1
 80003c0:	40da      	lsrs	r2, r3
 80003c2:	9201      	str	r2, [sp, #4]
 80003c4:	e782      	b.n	80002cc <__udivmoddi4+0x6c>
 80003c6:	4642      	mov	r2, r8
 80003c8:	2320      	movs	r3, #32
 80003ca:	0026      	movs	r6, r4
 80003cc:	1a9b      	subs	r3, r3, r2
 80003ce:	40de      	lsrs	r6, r3
 80003d0:	002f      	movs	r7, r5
 80003d2:	46b4      	mov	ip, r6
 80003d4:	4097      	lsls	r7, r2
 80003d6:	4666      	mov	r6, ip
 80003d8:	003b      	movs	r3, r7
 80003da:	4333      	orrs	r3, r6
 80003dc:	e7c9      	b.n	8000372 <__udivmoddi4+0x112>
 80003de:	46c0      	nop			; (mov r8, r8)

080003e0 <__clzdi2>:
 80003e0:	b510      	push	{r4, lr}
 80003e2:	2900      	cmp	r1, #0
 80003e4:	d103      	bne.n	80003ee <__clzdi2+0xe>
 80003e6:	f000 f807 	bl	80003f8 <__clzsi2>
 80003ea:	3020      	adds	r0, #32
 80003ec:	e002      	b.n	80003f4 <__clzdi2+0x14>
 80003ee:	1c08      	adds	r0, r1, #0
 80003f0:	f000 f802 	bl	80003f8 <__clzsi2>
 80003f4:	bd10      	pop	{r4, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)

080003f8 <__clzsi2>:
 80003f8:	211c      	movs	r1, #28
 80003fa:	2301      	movs	r3, #1
 80003fc:	041b      	lsls	r3, r3, #16
 80003fe:	4298      	cmp	r0, r3
 8000400:	d301      	bcc.n	8000406 <__clzsi2+0xe>
 8000402:	0c00      	lsrs	r0, r0, #16
 8000404:	3910      	subs	r1, #16
 8000406:	0a1b      	lsrs	r3, r3, #8
 8000408:	4298      	cmp	r0, r3
 800040a:	d301      	bcc.n	8000410 <__clzsi2+0x18>
 800040c:	0a00      	lsrs	r0, r0, #8
 800040e:	3908      	subs	r1, #8
 8000410:	091b      	lsrs	r3, r3, #4
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0x22>
 8000416:	0900      	lsrs	r0, r0, #4
 8000418:	3904      	subs	r1, #4
 800041a:	a202      	add	r2, pc, #8	; (adr r2, 8000424 <__clzsi2+0x2c>)
 800041c:	5c10      	ldrb	r0, [r2, r0]
 800041e:	1840      	adds	r0, r0, r1
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	02020304 	.word	0x02020304
 8000428:	01010101 	.word	0x01010101
	...

08000434 <SD_WaitReadyByCommand>:
    }
    return cnt;
}

int SD_WaitReadyByCommand(int timeout)
{
 8000434:	b590      	push	{r4, r7, lr}
 8000436:	b087      	sub	sp, #28
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
    int cnt = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]
    uint32_t startTick = HAL_GetTick();
 8000440:	f001 f8ce 	bl	80015e0 <HAL_GetTick>
 8000444:	0003      	movs	r3, r0
 8000446:	60fb      	str	r3, [r7, #12]
    uint8_t readVal = 0;
 8000448:	2313      	movs	r3, #19
 800044a:	18fb      	adds	r3, r7, r3
 800044c:	2200      	movs	r2, #0
 800044e:	701a      	strb	r2, [r3, #0]

    while(readVal != 0xff)
 8000450:	e015      	b.n	800047e <SD_WaitReadyByCommand+0x4a>
    {
        readVal = SD_SendRecv(0xff);
 8000452:	2313      	movs	r3, #19
 8000454:	18fc      	adds	r4, r7, r3
 8000456:	20ff      	movs	r0, #255	; 0xff
 8000458:	f000 f8cc 	bl	80005f4 <SD_SendRecv>
 800045c:	0003      	movs	r3, r0
 800045e:	7023      	strb	r3, [r4, #0]
        if(HAL_GetTick() - startTick > timeout)
 8000460:	f001 f8be 	bl	80015e0 <HAL_GetTick>
 8000464:	0002      	movs	r2, r0
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	1ad2      	subs	r2, r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	429a      	cmp	r2, r3
 800046e:	d903      	bls.n	8000478 <SD_WaitReadyByCommand+0x44>
        {
            cnt = -1;
 8000470:	2301      	movs	r3, #1
 8000472:	425b      	negs	r3, r3
 8000474:	617b      	str	r3, [r7, #20]
            break;
 8000476:	e007      	b.n	8000488 <SD_WaitReadyByCommand+0x54>
        }
        cnt++;
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	3301      	adds	r3, #1
 800047c:	617b      	str	r3, [r7, #20]
    while(readVal != 0xff)
 800047e:	2313      	movs	r3, #19
 8000480:	18fb      	adds	r3, r7, r3
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2bff      	cmp	r3, #255	; 0xff
 8000486:	d1e4      	bne.n	8000452 <SD_WaitReadyByCommand+0x1e>
    }
    return cnt;
 8000488:	697b      	ldr	r3, [r7, #20]
}
 800048a:	0018      	movs	r0, r3
 800048c:	46bd      	mov	sp, r7
 800048e:	b007      	add	sp, #28
 8000490:	bd90      	pop	{r4, r7, pc}

08000492 <CRC7_one>:

static uint8_t CRC7_one(uint8_t t, uint8_t data) {
 8000492:	b580      	push	{r7, lr}
 8000494:	b084      	sub	sp, #16
 8000496:	af00      	add	r7, sp, #0
 8000498:	0002      	movs	r2, r0
 800049a:	1dfb      	adds	r3, r7, #7
 800049c:	701a      	strb	r2, [r3, #0]
 800049e:	1dbb      	adds	r3, r7, #6
 80004a0:	1c0a      	adds	r2, r1, #0
 80004a2:	701a      	strb	r2, [r3, #0]
    const uint8_t g = 0x89;
 80004a4:	230e      	movs	r3, #14
 80004a6:	18fb      	adds	r3, r7, r3
 80004a8:	2289      	movs	r2, #137	; 0x89
 80004aa:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    t ^= data;
 80004ac:	1dfb      	adds	r3, r7, #7
 80004ae:	1df9      	adds	r1, r7, #7
 80004b0:	1dba      	adds	r2, r7, #6
 80004b2:	7809      	ldrb	r1, [r1, #0]
 80004b4:	7812      	ldrb	r2, [r2, #0]
 80004b6:	404a      	eors	r2, r1
 80004b8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 8; i++) {
 80004ba:	230f      	movs	r3, #15
 80004bc:	18fb      	adds	r3, r7, r3
 80004be:	2200      	movs	r2, #0
 80004c0:	701a      	strb	r2, [r3, #0]
 80004c2:	e018      	b.n	80004f6 <CRC7_one+0x64>
        if (t & 0x80) t ^= g;
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	b25b      	sxtb	r3, r3
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	da07      	bge.n	80004de <CRC7_one+0x4c>
 80004ce:	1dfb      	adds	r3, r7, #7
 80004d0:	1df9      	adds	r1, r7, #7
 80004d2:	220e      	movs	r2, #14
 80004d4:	18ba      	adds	r2, r7, r2
 80004d6:	7809      	ldrb	r1, [r1, #0]
 80004d8:	7812      	ldrb	r2, [r2, #0]
 80004da:	404a      	eors	r2, r1
 80004dc:	701a      	strb	r2, [r3, #0]
        t <<= 1;
 80004de:	1dfa      	adds	r2, r7, #7
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	18db      	adds	r3, r3, r3
 80004e6:	7013      	strb	r3, [r2, #0]
    for (i = 0; i < 8; i++) {
 80004e8:	230f      	movs	r3, #15
 80004ea:	18fb      	adds	r3, r7, r3
 80004ec:	781a      	ldrb	r2, [r3, #0]
 80004ee:	230f      	movs	r3, #15
 80004f0:	18fb      	adds	r3, r7, r3
 80004f2:	3201      	adds	r2, #1
 80004f4:	701a      	strb	r2, [r3, #0]
 80004f6:	230f      	movs	r3, #15
 80004f8:	18fb      	adds	r3, r7, r3
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b07      	cmp	r3, #7
 80004fe:	d9e1      	bls.n	80004c4 <CRC7_one+0x32>
    }

    return t;
 8000500:	1dfb      	adds	r3, r7, #7
 8000502:	781b      	ldrb	r3, [r3, #0]
}
 8000504:	0018      	movs	r0, r3
 8000506:	46bd      	mov	sp, r7
 8000508:	b004      	add	sp, #16
 800050a:	bd80      	pop	{r7, pc}

0800050c <CRC16_one>:
    for (j = 0; j < len; j++) crc = CRC7_one(crc,p[j]);

    return crc >> 1;
}

static uint16_t CRC16_one(uint16_t crc, uint8_t ser_data) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	0002      	movs	r2, r0
 8000514:	1dbb      	adds	r3, r7, #6
 8000516:	801a      	strh	r2, [r3, #0]
 8000518:	1d7b      	adds	r3, r7, #5
 800051a:	1c0a      	adds	r2, r1, #0
 800051c:	701a      	strb	r2, [r3, #0]
    crc  = (uint8_t)(crc >> 8)|(crc << 8);
 800051e:	1dbb      	adds	r3, r7, #6
 8000520:	881b      	ldrh	r3, [r3, #0]
 8000522:	0a1b      	lsrs	r3, r3, #8
 8000524:	b29b      	uxth	r3, r3
 8000526:	b2db      	uxtb	r3, r3
 8000528:	b21a      	sxth	r2, r3
 800052a:	1dbb      	adds	r3, r7, #6
 800052c:	881b      	ldrh	r3, [r3, #0]
 800052e:	021b      	lsls	r3, r3, #8
 8000530:	b21b      	sxth	r3, r3
 8000532:	4313      	orrs	r3, r2
 8000534:	b21a      	sxth	r2, r3
 8000536:	1dbb      	adds	r3, r7, #6
 8000538:	801a      	strh	r2, [r3, #0]
    crc ^= ser_data;
 800053a:	1d7b      	adds	r3, r7, #5
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	b299      	uxth	r1, r3
 8000540:	1dbb      	adds	r3, r7, #6
 8000542:	1dba      	adds	r2, r7, #6
 8000544:	8812      	ldrh	r2, [r2, #0]
 8000546:	404a      	eors	r2, r1
 8000548:	801a      	strh	r2, [r3, #0]
    crc ^= (uint8_t)(crc & 0xff) >> 4;
 800054a:	1dbb      	adds	r3, r7, #6
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	b2db      	uxtb	r3, r3
 8000550:	091b      	lsrs	r3, r3, #4
 8000552:	b2db      	uxtb	r3, r3
 8000554:	b299      	uxth	r1, r3
 8000556:	1dbb      	adds	r3, r7, #6
 8000558:	1dba      	adds	r2, r7, #6
 800055a:	8812      	ldrh	r2, [r2, #0]
 800055c:	404a      	eors	r2, r1
 800055e:	801a      	strh	r2, [r3, #0]
    crc ^= (crc << 8) << 4;
 8000560:	1dbb      	adds	r3, r7, #6
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	031b      	lsls	r3, r3, #12
 8000566:	b21a      	sxth	r2, r3
 8000568:	1dbb      	adds	r3, r7, #6
 800056a:	2100      	movs	r1, #0
 800056c:	5e5b      	ldrsh	r3, [r3, r1]
 800056e:	4053      	eors	r3, r2
 8000570:	b21a      	sxth	r2, r3
 8000572:	1dbb      	adds	r3, r7, #6
 8000574:	801a      	strh	r2, [r3, #0]
    crc ^= ((crc & 0xff) << 4) << 1;
 8000576:	1dbb      	adds	r3, r7, #6
 8000578:	881b      	ldrh	r3, [r3, #0]
 800057a:	015b      	lsls	r3, r3, #5
 800057c:	b21a      	sxth	r2, r3
 800057e:	23ff      	movs	r3, #255	; 0xff
 8000580:	015b      	lsls	r3, r3, #5
 8000582:	4013      	ands	r3, r2
 8000584:	b21a      	sxth	r2, r3
 8000586:	1dbb      	adds	r3, r7, #6
 8000588:	2100      	movs	r1, #0
 800058a:	5e5b      	ldrsh	r3, [r3, r1]
 800058c:	4053      	eors	r3, r2
 800058e:	b21a      	sxth	r2, r3
 8000590:	1dbb      	adds	r3, r7, #6
 8000592:	801a      	strh	r2, [r3, #0]

    return crc;
 8000594:	1dbb      	adds	r3, r7, #6
 8000596:	881b      	ldrh	r3, [r3, #0]
}
 8000598:	0018      	movs	r0, r3
 800059a:	46bd      	mov	sp, r7
 800059c:	b002      	add	sp, #8
 800059e:	bd80      	pop	{r7, pc}

080005a0 <CRC16_buf>:

uint16_t CRC16_buf(const uint8_t * p, uint32_t len) {
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint16_t crc = 0;
 80005aa:	230a      	movs	r3, #10
 80005ac:	18fb      	adds	r3, r7, r3
 80005ae:	2200      	movs	r2, #0
 80005b0:	801a      	strh	r2, [r3, #0]

    for (i = 0; i < len; i++) crc = CRC16_one(crc,p[i]);
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	e011      	b.n	80005dc <CRC16_buf+0x3c>
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	18d3      	adds	r3, r2, r3
 80005be:	781a      	ldrb	r2, [r3, #0]
 80005c0:	230a      	movs	r3, #10
 80005c2:	18fc      	adds	r4, r7, r3
 80005c4:	230a      	movs	r3, #10
 80005c6:	18fb      	adds	r3, r7, r3
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	0011      	movs	r1, r2
 80005cc:	0018      	movs	r0, r3
 80005ce:	f7ff ff9d 	bl	800050c <CRC16_one>
 80005d2:	0003      	movs	r3, r0
 80005d4:	8023      	strh	r3, [r4, #0]
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	3301      	adds	r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d3e9      	bcc.n	80005b8 <CRC16_buf+0x18>

    return crc;
 80005e4:	230a      	movs	r3, #10
 80005e6:	18fb      	adds	r3, r7, r3
 80005e8:	881b      	ldrh	r3, [r3, #0]
}
 80005ea:	0018      	movs	r0, r3
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b005      	add	sp, #20
 80005f0:	bd90      	pop	{r4, r7, pc}
	...

080005f4 <SD_SendRecv>:
//    SPI_Cmd(SD_SPI,ENABLE);

    SD_CS_HIGH; // pull SD pin -> Deselect SD
}

uint8_t SD_SendRecv(uint8_t data) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	0002      	movs	r2, r0
 80005fc:	1dfb      	adds	r3, r7, #7
 80005fe:	701a      	strb	r2, [r3, #0]

//    HAL_SPI_Transmit(&HSPI_SDCARD, &data, 1, 10);
//    HAL_SPI_StateTypeDef status = HAL_SPI_GetState(&HSPI_SDCARD);
//    HAL_SPI_Receive(&HSPI_SDCARD, &miso, 1, 10);
//    status = HAL_SPI_GetState(&HSPI_SDCARD);
	SD_CS_LOW;
 8000600:	23a0      	movs	r3, #160	; 0xa0
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	2200      	movs	r2, #0
 8000606:	2110      	movs	r1, #16
 8000608:	0018      	movs	r0, r3
 800060a:	f001 fff5 	bl	80025f8 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&HSPI_SDCARD, &data, &miso, 1, 10);
 800060e:	230f      	movs	r3, #15
 8000610:	18fa      	adds	r2, r7, r3
 8000612:	1df9      	adds	r1, r7, #7
 8000614:	4809      	ldr	r0, [pc, #36]	; (800063c <SD_SendRecv+0x48>)
 8000616:	230a      	movs	r3, #10
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2301      	movs	r3, #1
 800061c:	f004 fa0c 	bl	8004a38 <HAL_SPI_TransmitReceive>
	SD_CS_HIGH;
 8000620:	23a0      	movs	r3, #160	; 0xa0
 8000622:	05db      	lsls	r3, r3, #23
 8000624:	2201      	movs	r2, #1
 8000626:	2110      	movs	r1, #16
 8000628:	0018      	movs	r0, r3
 800062a:	f001 ffe5 	bl	80025f8 <HAL_GPIO_WritePin>
    return miso;
 800062e:	230f      	movs	r3, #15
 8000630:	18fb      	adds	r3, r7, r3
 8000632:	781b      	ldrb	r3, [r3, #0]
}
 8000634:	0018      	movs	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	b004      	add	sp, #16
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200011d0 	.word	0x200011d0

08000640 <SD_SendCmd>:

uint8_t SD_SendCmd(uint8_t cmd, uint32_t arg) {
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	0002      	movs	r2, r0
 8000648:	6039      	str	r1, [r7, #0]
 800064a:	1dfb      	adds	r3, r7, #7
 800064c:	701a      	strb	r2, [r3, #0]
    uint8_t wait, response, crc = 0;
 800064e:	230e      	movs	r3, #14
 8000650:	18fb      	adds	r3, r7, r3
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]

    SD_SendRecv(0xff); // This dummy send necessary for some cards
 8000656:	20ff      	movs	r0, #255	; 0xff
 8000658:	f7ff ffcc 	bl	80005f4 <SD_SendRecv>

    // Send: [8b]Command -> [32b]Argument -> [8b]CRC
    SD_SendRecv(cmd | 0x40);
 800065c:	1dfb      	adds	r3, r7, #7
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2240      	movs	r2, #64	; 0x40
 8000662:	4313      	orrs	r3, r2
 8000664:	b2db      	uxtb	r3, r3
 8000666:	0018      	movs	r0, r3
 8000668:	f7ff ffc4 	bl	80005f4 <SD_SendRecv>
    crc = CRC7_one(crc,cmd | 0x40);
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2240      	movs	r2, #64	; 0x40
 8000672:	4313      	orrs	r3, r2
 8000674:	b2da      	uxtb	r2, r3
 8000676:	230e      	movs	r3, #14
 8000678:	18fc      	adds	r4, r7, r3
 800067a:	230e      	movs	r3, #14
 800067c:	18fb      	adds	r3, r7, r3
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	0011      	movs	r1, r2
 8000682:	0018      	movs	r0, r3
 8000684:	f7ff ff05 	bl	8000492 <CRC7_one>
 8000688:	0003      	movs	r3, r0
 800068a:	7023      	strb	r3, [r4, #0]
    SD_SendRecv(arg >> 24);
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	0e1b      	lsrs	r3, r3, #24
 8000690:	b2db      	uxtb	r3, r3
 8000692:	0018      	movs	r0, r3
 8000694:	f7ff ffae 	bl	80005f4 <SD_SendRecv>
    crc = CRC7_one(crc,arg >> 24);
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	0e1b      	lsrs	r3, r3, #24
 800069c:	b2da      	uxtb	r2, r3
 800069e:	230e      	movs	r3, #14
 80006a0:	18fc      	adds	r4, r7, r3
 80006a2:	230e      	movs	r3, #14
 80006a4:	18fb      	adds	r3, r7, r3
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	0011      	movs	r1, r2
 80006aa:	0018      	movs	r0, r3
 80006ac:	f7ff fef1 	bl	8000492 <CRC7_one>
 80006b0:	0003      	movs	r3, r0
 80006b2:	7023      	strb	r3, [r4, #0]
    SD_SendRecv(arg >> 16);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	0c1b      	lsrs	r3, r3, #16
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	0018      	movs	r0, r3
 80006bc:	f7ff ff9a 	bl	80005f4 <SD_SendRecv>
    crc = CRC7_one(crc,arg >> 16);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	0c1b      	lsrs	r3, r3, #16
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	230e      	movs	r3, #14
 80006c8:	18fc      	adds	r4, r7, r3
 80006ca:	230e      	movs	r3, #14
 80006cc:	18fb      	adds	r3, r7, r3
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	0011      	movs	r1, r2
 80006d2:	0018      	movs	r0, r3
 80006d4:	f7ff fedd 	bl	8000492 <CRC7_one>
 80006d8:	0003      	movs	r3, r0
 80006da:	7023      	strb	r3, [r4, #0]
    SD_SendRecv(arg >> 8);
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	0a1b      	lsrs	r3, r3, #8
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	0018      	movs	r0, r3
 80006e4:	f7ff ff86 	bl	80005f4 <SD_SendRecv>
    crc = CRC7_one(crc,arg >> 8);
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	0a1b      	lsrs	r3, r3, #8
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	230e      	movs	r3, #14
 80006f0:	18fc      	adds	r4, r7, r3
 80006f2:	230e      	movs	r3, #14
 80006f4:	18fb      	adds	r3, r7, r3
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	0011      	movs	r1, r2
 80006fa:	0018      	movs	r0, r3
 80006fc:	f7ff fec9 	bl	8000492 <CRC7_one>
 8000700:	0003      	movs	r3, r0
 8000702:	7023      	strb	r3, [r4, #0]
    SD_SendRecv(arg);
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	0018      	movs	r0, r3
 800070a:	f7ff ff73 	bl	80005f4 <SD_SendRecv>
    crc = CRC7_one(crc,arg);
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	230e      	movs	r3, #14
 8000714:	18fc      	adds	r4, r7, r3
 8000716:	230e      	movs	r3, #14
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	0011      	movs	r1, r2
 800071e:	0018      	movs	r0, r3
 8000720:	f7ff feb7 	bl	8000492 <CRC7_one>
 8000724:	0003      	movs	r3, r0
 8000726:	7023      	strb	r3, [r4, #0]
    SD_SendRecv(crc | 0x01); // Bit 1 always must be set to "1" in CRC
 8000728:	230e      	movs	r3, #14
 800072a:	18fb      	adds	r3, r7, r3
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2201      	movs	r2, #1
 8000730:	4313      	orrs	r3, r2
 8000732:	b2db      	uxtb	r3, r3
 8000734:	0018      	movs	r0, r3
 8000736:	f7ff ff5d 	bl	80005f4 <SD_SendRecv>

    // Wait for response from SD Card
    wait = 0;
 800073a:	230f      	movs	r3, #15
 800073c:	18fb      	adds	r3, r7, r3
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
    while ((response = SD_SendRecv(0xff)) == 0xff) if (wait++ > 200) break;
 8000742:	e008      	b.n	8000756 <SD_SendCmd+0x116>
 8000744:	230f      	movs	r3, #15
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	220f      	movs	r2, #15
 800074c:	18ba      	adds	r2, r7, r2
 800074e:	1c59      	adds	r1, r3, #1
 8000750:	7011      	strb	r1, [r2, #0]
 8000752:	2bc8      	cmp	r3, #200	; 0xc8
 8000754:	d80c      	bhi.n	8000770 <SD_SendCmd+0x130>
 8000756:	230d      	movs	r3, #13
 8000758:	18fc      	adds	r4, r7, r3
 800075a:	20ff      	movs	r0, #255	; 0xff
 800075c:	f7ff ff4a 	bl	80005f4 <SD_SendRecv>
 8000760:	0003      	movs	r3, r0
 8000762:	7023      	strb	r3, [r4, #0]
 8000764:	230d      	movs	r3, #13
 8000766:	18fb      	adds	r3, r7, r3
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2bff      	cmp	r3, #255	; 0xff
 800076c:	d0ea      	beq.n	8000744 <SD_SendCmd+0x104>
 800076e:	e000      	b.n	8000772 <SD_SendCmd+0x132>
 8000770:	46c0      	nop			; (mov r8, r8)

    return response;
 8000772:	230d      	movs	r3, #13
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	781b      	ldrb	r3, [r3, #0]
}
 8000778:	0018      	movs	r0, r3
 800077a:	46bd      	mov	sp, r7
 800077c:	b005      	add	sp, #20
 800077e:	bd90      	pop	{r4, r7, pc}

08000780 <SD_SendCmd_2>:

uint16_t SD_SendCmd_2(uint8_t cmd, uint32_t arg)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	0002      	movs	r2, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	701a      	strb	r2, [r3, #0]
    uint8_t r2a;
    uint8_t r2b;
    uint16_t r2 = 0;;
 800078e:	230c      	movs	r3, #12
 8000790:	18fb      	adds	r3, r7, r3
 8000792:	2200      	movs	r2, #0
 8000794:	801a      	strh	r2, [r3, #0]
    uint8_t wait, crc = 0;
 8000796:	230b      	movs	r3, #11
 8000798:	18fb      	adds	r3, r7, r3
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]

    SD_SendRecv(0xff); // This dummy send necessary for some cards
 800079e:	20ff      	movs	r0, #255	; 0xff
 80007a0:	f7ff ff28 	bl	80005f4 <SD_SendRecv>

    // Send: [8b]Command -> [32b]Argument -> [8b]CRC
    SD_SendRecv(cmd | 0x40);
 80007a4:	1dfb      	adds	r3, r7, #7
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2240      	movs	r2, #64	; 0x40
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	0018      	movs	r0, r3
 80007b0:	f7ff ff20 	bl	80005f4 <SD_SendRecv>
    crc = CRC7_one(crc,cmd | 0x40);
 80007b4:	1dfb      	adds	r3, r7, #7
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2240      	movs	r2, #64	; 0x40
 80007ba:	4313      	orrs	r3, r2
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	230b      	movs	r3, #11
 80007c0:	18fc      	adds	r4, r7, r3
 80007c2:	230b      	movs	r3, #11
 80007c4:	18fb      	adds	r3, r7, r3
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	0011      	movs	r1, r2
 80007ca:	0018      	movs	r0, r3
 80007cc:	f7ff fe61 	bl	8000492 <CRC7_one>
 80007d0:	0003      	movs	r3, r0
 80007d2:	7023      	strb	r3, [r4, #0]
    SD_SendRecv(arg >> 24);
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	0e1b      	lsrs	r3, r3, #24
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	0018      	movs	r0, r3
 80007dc:	f7ff ff0a 	bl	80005f4 <SD_SendRecv>
    crc = CRC7_one(crc,arg >> 24);
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	0e1b      	lsrs	r3, r3, #24
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	230b      	movs	r3, #11
 80007e8:	18fc      	adds	r4, r7, r3
 80007ea:	230b      	movs	r3, #11
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	0011      	movs	r1, r2
 80007f2:	0018      	movs	r0, r3
 80007f4:	f7ff fe4d 	bl	8000492 <CRC7_one>
 80007f8:	0003      	movs	r3, r0
 80007fa:	7023      	strb	r3, [r4, #0]
    SD_SendRecv(arg >> 16);
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	0c1b      	lsrs	r3, r3, #16
 8000800:	b2db      	uxtb	r3, r3
 8000802:	0018      	movs	r0, r3
 8000804:	f7ff fef6 	bl	80005f4 <SD_SendRecv>
    crc = CRC7_one(crc,arg >> 16);
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	0c1b      	lsrs	r3, r3, #16
 800080c:	b2da      	uxtb	r2, r3
 800080e:	230b      	movs	r3, #11
 8000810:	18fc      	adds	r4, r7, r3
 8000812:	230b      	movs	r3, #11
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	0011      	movs	r1, r2
 800081a:	0018      	movs	r0, r3
 800081c:	f7ff fe39 	bl	8000492 <CRC7_one>
 8000820:	0003      	movs	r3, r0
 8000822:	7023      	strb	r3, [r4, #0]
    SD_SendRecv(arg >> 8);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	0a1b      	lsrs	r3, r3, #8
 8000828:	b2db      	uxtb	r3, r3
 800082a:	0018      	movs	r0, r3
 800082c:	f7ff fee2 	bl	80005f4 <SD_SendRecv>
    crc = CRC7_one(crc,arg >> 8);
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	0a1b      	lsrs	r3, r3, #8
 8000834:	b2da      	uxtb	r2, r3
 8000836:	230b      	movs	r3, #11
 8000838:	18fc      	adds	r4, r7, r3
 800083a:	230b      	movs	r3, #11
 800083c:	18fb      	adds	r3, r7, r3
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	0011      	movs	r1, r2
 8000842:	0018      	movs	r0, r3
 8000844:	f7ff fe25 	bl	8000492 <CRC7_one>
 8000848:	0003      	movs	r3, r0
 800084a:	7023      	strb	r3, [r4, #0]
    SD_SendRecv(arg);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	0018      	movs	r0, r3
 8000852:	f7ff fecf 	bl	80005f4 <SD_SendRecv>
    crc = CRC7_one(crc,arg);
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	b2da      	uxtb	r2, r3
 800085a:	230b      	movs	r3, #11
 800085c:	18fc      	adds	r4, r7, r3
 800085e:	230b      	movs	r3, #11
 8000860:	18fb      	adds	r3, r7, r3
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	0011      	movs	r1, r2
 8000866:	0018      	movs	r0, r3
 8000868:	f7ff fe13 	bl	8000492 <CRC7_one>
 800086c:	0003      	movs	r3, r0
 800086e:	7023      	strb	r3, [r4, #0]
    SD_SendRecv(crc | 0x01); // Bit 1 always must be set to "1" in CRC
 8000870:	230b      	movs	r3, #11
 8000872:	18fb      	adds	r3, r7, r3
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2201      	movs	r2, #1
 8000878:	4313      	orrs	r3, r2
 800087a:	b2db      	uxtb	r3, r3
 800087c:	0018      	movs	r0, r3
 800087e:	f7ff feb9 	bl	80005f4 <SD_SendRecv>

    // Wait for response from SD Card
    wait = 0;
 8000882:	230f      	movs	r3, #15
 8000884:	18fb      	adds	r3, r7, r3
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
    while ((r2a = SD_SendRecv(0xff)) == 0xff) if (wait++ > 200) break;
 800088a:	e008      	b.n	800089e <SD_SendCmd_2+0x11e>
 800088c:	230f      	movs	r3, #15
 800088e:	18fb      	adds	r3, r7, r3
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	220f      	movs	r2, #15
 8000894:	18ba      	adds	r2, r7, r2
 8000896:	1c59      	adds	r1, r3, #1
 8000898:	7011      	strb	r1, [r2, #0]
 800089a:	2bc8      	cmp	r3, #200	; 0xc8
 800089c:	d80c      	bhi.n	80008b8 <SD_SendCmd_2+0x138>
 800089e:	230a      	movs	r3, #10
 80008a0:	18fc      	adds	r4, r7, r3
 80008a2:	20ff      	movs	r0, #255	; 0xff
 80008a4:	f7ff fea6 	bl	80005f4 <SD_SendRecv>
 80008a8:	0003      	movs	r3, r0
 80008aa:	7023      	strb	r3, [r4, #0]
 80008ac:	230a      	movs	r3, #10
 80008ae:	18fb      	adds	r3, r7, r3
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2bff      	cmp	r3, #255	; 0xff
 80008b4:	d0ea      	beq.n	800088c <SD_SendCmd_2+0x10c>
 80008b6:	e00a      	b.n	80008ce <SD_SendCmd_2+0x14e>
 80008b8:	46c0      	nop			; (mov r8, r8)
    while ((r2b = SD_SendRecv(0xff)) == 0xff) if (wait++ > 200) break;
 80008ba:	e008      	b.n	80008ce <SD_SendCmd_2+0x14e>
 80008bc:	230f      	movs	r3, #15
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	220f      	movs	r2, #15
 80008c4:	18ba      	adds	r2, r7, r2
 80008c6:	1c59      	adds	r1, r3, #1
 80008c8:	7011      	strb	r1, [r2, #0]
 80008ca:	2bc8      	cmp	r3, #200	; 0xc8
 80008cc:	d80c      	bhi.n	80008e8 <SD_SendCmd_2+0x168>
 80008ce:	2309      	movs	r3, #9
 80008d0:	18fc      	adds	r4, r7, r3
 80008d2:	20ff      	movs	r0, #255	; 0xff
 80008d4:	f7ff fe8e 	bl	80005f4 <SD_SendRecv>
 80008d8:	0003      	movs	r3, r0
 80008da:	7023      	strb	r3, [r4, #0]
 80008dc:	2309      	movs	r3, #9
 80008de:	18fb      	adds	r3, r7, r3
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2bff      	cmp	r3, #255	; 0xff
 80008e4:	d0ea      	beq.n	80008bc <SD_SendCmd_2+0x13c>
 80008e6:	e000      	b.n	80008ea <SD_SendCmd_2+0x16a>
 80008e8:	46c0      	nop			; (mov r8, r8)
    r2 = r2a << 8;
 80008ea:	230a      	movs	r3, #10
 80008ec:	18fb      	adds	r3, r7, r3
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	230c      	movs	r3, #12
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	0212      	lsls	r2, r2, #8
 80008f8:	801a      	strh	r2, [r3, #0]
    r2 |= r2b;
 80008fa:	2309      	movs	r3, #9
 80008fc:	18fb      	adds	r3, r7, r3
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	b299      	uxth	r1, r3
 8000902:	230c      	movs	r3, #12
 8000904:	18fb      	adds	r3, r7, r3
 8000906:	220c      	movs	r2, #12
 8000908:	18ba      	adds	r2, r7, r2
 800090a:	8812      	ldrh	r2, [r2, #0]
 800090c:	430a      	orrs	r2, r1
 800090e:	801a      	strh	r2, [r3, #0]

    return r2;
 8000910:	230c      	movs	r3, #12
 8000912:	18fb      	adds	r3, r7, r3
 8000914:	881b      	ldrh	r3, [r3, #0]
}
 8000916:	0018      	movs	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	b005      	add	sp, #20
 800091c:	bd90      	pop	{r4, r7, pc}
	...

08000920 <SD_CardInit>:
//   0xff - SD card timeout
//   0xfe - Unknown or bad SD/MMC card
//   0xfd - Set block size command failed
//   0xfc - bad response for CMD58
//   0xfb - SDv2 pattern mismatch (in response to CMD8)
uint8_t SD_CardInit(void) {
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
    uint32_t wait = 0, r3;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
    uint8_t response;

    SD_CS_LOW; // pull CS to low
 800092a:	23a0      	movs	r3, #160	; 0xa0
 800092c:	05db      	lsls	r3, r3, #23
 800092e:	2200      	movs	r2, #0
 8000930:	2110      	movs	r1, #16
 8000932:	0018      	movs	r0, r3
 8000934:	f001 fe60 	bl	80025f8 <HAL_GPIO_WritePin>

    // Must send at least 74 clock ticks to SD Card
    for (wait = 0; wait < 8; wait++) SD_SendRecv(0xff);
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	e005      	b.n	800094a <SD_CardInit+0x2a>
 800093e:	20ff      	movs	r0, #255	; 0xff
 8000940:	f7ff fe58 	bl	80005f4 <SD_SendRecv>
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3301      	adds	r3, #1
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	2b07      	cmp	r3, #7
 800094e:	d9f6      	bls.n	800093e <SD_CardInit+0x1e>

    // Software SD Card reset
    wait = 0; response = 0x00;
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	230b      	movs	r3, #11
 8000956:	18fb      	adds	r3, r7, r3
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
    while (wait < 0x20 && response != 0x01) {
 800095c:	e00a      	b.n	8000974 <SD_CardInit+0x54>
        // Wait for SD card enters idle state (R1 response = 0x01)
        response = SD_SendCmd(SD_CMD_GO_IDLE_STATE,0x00);
 800095e:	230b      	movs	r3, #11
 8000960:	18fc      	adds	r4, r7, r3
 8000962:	2100      	movs	r1, #0
 8000964:	2000      	movs	r0, #0
 8000966:	f7ff fe6b 	bl	8000640 <SD_SendCmd>
 800096a:	0003      	movs	r3, r0
 800096c:	7023      	strb	r3, [r4, #0]
        wait++;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	3301      	adds	r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
    while (wait < 0x20 && response != 0x01) {
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2b1f      	cmp	r3, #31
 8000978:	d804      	bhi.n	8000984 <SD_CardInit+0x64>
 800097a:	230b      	movs	r3, #11
 800097c:	18fb      	adds	r3, r7, r3
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d1ec      	bne.n	800095e <SD_CardInit+0x3e>
    }
    if (wait >= 0x20 && response != 0x01) return 0xff; // SD card timeout
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2b1f      	cmp	r3, #31
 8000988:	d906      	bls.n	8000998 <SD_CardInit+0x78>
 800098a:	230b      	movs	r3, #11
 800098c:	18fb      	adds	r3, r7, r3
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d001      	beq.n	8000998 <SD_CardInit+0x78>
 8000994:	23ff      	movs	r3, #255	; 0xff
 8000996:	e11e      	b.n	8000bd6 <SD_CardInit+0x2b6>

    // CMD8: SEND_IF_COND. Send this command to verify SD card interface operating condition
    /* Argument: - [31:12]: Reserved (shall be set to '0')
                 - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
                 - [7:0]: Check Pattern (recommended 0xAA) */
    response = SD_SendCmd(SD_CMD_HS_SEND_EXT_CSD,SD_CHECK_PATTERN); // CMD8
 8000998:	230b      	movs	r3, #11
 800099a:	18fc      	adds	r4, r7, r3
 800099c:	23d5      	movs	r3, #213	; 0xd5
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	0019      	movs	r1, r3
 80009a2:	2008      	movs	r0, #8
 80009a4:	f7ff fe4c 	bl	8000640 <SD_SendCmd>
 80009a8:	0003      	movs	r3, r0
 80009aa:	7023      	strb	r3, [r4, #0]

    if (response == 0x01) {
 80009ac:	230b      	movs	r3, #11
 80009ae:	18fb      	adds	r3, r7, r3
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d000      	beq.n	80009b8 <SD_CardInit+0x98>
 80009b6:	e093      	b.n	8000ae0 <SD_CardInit+0x1c0>
        // SDv2 or later
        // Read R7 responce
        r3 =  SD_SendRecv(0xff) << 24;
 80009b8:	20ff      	movs	r0, #255	; 0xff
 80009ba:	f7ff fe1b 	bl	80005f4 <SD_SendRecv>
 80009be:	0003      	movs	r3, r0
 80009c0:	061b      	lsls	r3, r3, #24
 80009c2:	607b      	str	r3, [r7, #4]
        r3 |= SD_SendRecv(0xff) << 16;
 80009c4:	20ff      	movs	r0, #255	; 0xff
 80009c6:	f7ff fe15 	bl	80005f4 <SD_SendRecv>
 80009ca:	0003      	movs	r3, r0
 80009cc:	041b      	lsls	r3, r3, #16
 80009ce:	001a      	movs	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	607b      	str	r3, [r7, #4]
        r3 |= SD_SendRecv(0xff) << 8;
 80009d6:	20ff      	movs	r0, #255	; 0xff
 80009d8:	f7ff fe0c 	bl	80005f4 <SD_SendRecv>
 80009dc:	0003      	movs	r3, r0
 80009de:	021b      	lsls	r3, r3, #8
 80009e0:	001a      	movs	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	607b      	str	r3, [r7, #4]
        r3 |= SD_SendRecv(0xff);
 80009e8:	20ff      	movs	r0, #255	; 0xff
 80009ea:	f7ff fe03 	bl	80005f4 <SD_SendRecv>
 80009ee:	0003      	movs	r3, r0
 80009f0:	001a      	movs	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	607b      	str	r3, [r7, #4]

        if ((r3 & 0x01ff) != (SD_CHECK_PATTERN & 0x01ff)) return 0xfb; // SDv2 pattern mismatch -> unsupported SD card
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	05db      	lsls	r3, r3, #23
 80009fc:	0dda      	lsrs	r2, r3, #23
 80009fe:	23d5      	movs	r3, #213	; 0xd5
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d001      	beq.n	8000a0a <SD_CardInit+0xea>
 8000a06:	23fb      	movs	r3, #251	; 0xfb
 8000a08:	e0e5      	b.n	8000bd6 <SD_CardInit+0x2b6>

        // CMD55: Send leading command for ACMD<n> command.
        // CMD41: APP_SEND_OP_COND. For only SDC - initiate initialization process.
        wait = 0; response = 0xff;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	230b      	movs	r3, #11
 8000a10:	18fb      	adds	r3, r7, r3
 8000a12:	22ff      	movs	r2, #255	; 0xff
 8000a14:	701a      	strb	r2, [r3, #0]
        while (++wait < 0x2710 && response != 0x00) {
 8000a16:	e00d      	b.n	8000a34 <SD_CardInit+0x114>
            SD_SendCmd(SD_CMD_APP_CMD,0); // CMD55
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2037      	movs	r0, #55	; 0x37
 8000a1c:	f7ff fe10 	bl	8000640 <SD_SendCmd>
            response = SD_SendCmd(SD_CMD_SD_APP_OP_COND,0x40000000); // ACMD41: HCS flag set
 8000a20:	230b      	movs	r3, #11
 8000a22:	18fc      	adds	r4, r7, r3
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	05db      	lsls	r3, r3, #23
 8000a28:	0019      	movs	r1, r3
 8000a2a:	2029      	movs	r0, #41	; 0x29
 8000a2c:	f7ff fe08 	bl	8000640 <SD_SendCmd>
 8000a30:	0003      	movs	r3, r0
 8000a32:	7023      	strb	r3, [r4, #0]
        while (++wait < 0x2710 && response != 0x00) {
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	3301      	adds	r3, #1
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	4a68      	ldr	r2, [pc, #416]	; (8000be0 <SD_CardInit+0x2c0>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d804      	bhi.n	8000a4c <SD_CardInit+0x12c>
 8000a42:	230b      	movs	r3, #11
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1e5      	bne.n	8000a18 <SD_CardInit+0xf8>
        }
        if (wait >= 0x2710 || response != 0x00) return 0xff; // SD card timeout
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4a64      	ldr	r2, [pc, #400]	; (8000be0 <SD_CardInit+0x2c0>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d804      	bhi.n	8000a5e <SD_CardInit+0x13e>
 8000a54:	230b      	movs	r3, #11
 8000a56:	18fb      	adds	r3, r7, r3
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SD_CardInit+0x142>
 8000a5e:	23ff      	movs	r3, #255	; 0xff
 8000a60:	e0b9      	b.n	8000bd6 <SD_CardInit+0x2b6>

        SD_CardType = SD_STD_CAPACITY_SD_CARD_V2_0; // SDv2;
 8000a62:	4b60      	ldr	r3, [pc, #384]	; (8000be4 <SD_CardInit+0x2c4>)
 8000a64:	2202      	movs	r2, #2
 8000a66:	701a      	strb	r2, [r3, #0]

        // Read OCR register
        response = SD_SendCmd(SD_CMD_READ_OCR,0x00000000); // CMD58
 8000a68:	230b      	movs	r3, #11
 8000a6a:	18fc      	adds	r4, r7, r3
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	203a      	movs	r0, #58	; 0x3a
 8000a70:	f7ff fde6 	bl	8000640 <SD_SendCmd>
 8000a74:	0003      	movs	r3, r0
 8000a76:	7023      	strb	r3, [r4, #0]
        if (response == 0x00) {
 8000a78:	230b      	movs	r3, #11
 8000a7a:	18fb      	adds	r3, r7, r3
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d125      	bne.n	8000ace <SD_CardInit+0x1ae>
            // Get R3 response
            r3  = SD_SendRecv(0xff) << 24;
 8000a82:	20ff      	movs	r0, #255	; 0xff
 8000a84:	f7ff fdb6 	bl	80005f4 <SD_SendRecv>
 8000a88:	0003      	movs	r3, r0
 8000a8a:	061b      	lsls	r3, r3, #24
 8000a8c:	607b      	str	r3, [r7, #4]
            r3 |= SD_SendRecv(0xff) << 16;
 8000a8e:	20ff      	movs	r0, #255	; 0xff
 8000a90:	f7ff fdb0 	bl	80005f4 <SD_SendRecv>
 8000a94:	0003      	movs	r3, r0
 8000a96:	041b      	lsls	r3, r3, #16
 8000a98:	001a      	movs	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	607b      	str	r3, [r7, #4]
            r3 |= SD_SendRecv(0xff) << 8;
 8000aa0:	20ff      	movs	r0, #255	; 0xff
 8000aa2:	f7ff fda7 	bl	80005f4 <SD_SendRecv>
 8000aa6:	0003      	movs	r3, r0
 8000aa8:	021b      	lsls	r3, r3, #8
 8000aaa:	001a      	movs	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	607b      	str	r3, [r7, #4]
            r3 |= SD_SendRecv(0xff);
 8000ab2:	20ff      	movs	r0, #255	; 0xff
 8000ab4:	f7ff fd9e 	bl	80005f4 <SD_SendRecv>
 8000ab8:	0003      	movs	r3, r0
 8000aba:	001a      	movs	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	607b      	str	r3, [r7, #4]
        } else {
            SD_CardType = SD_UNKNOWN_SD_CARD;
            return 0xfc; // bad CMD58 response
        }
        if (r3 & (1<<30)) SD_CardType = SD_HIGH_CAPACITY_SD_CARD; // SDHC or SDXC
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	05db      	lsls	r3, r3, #23
 8000ac8:	4013      	ands	r3, r2
 8000aca:	d051      	beq.n	8000b70 <SD_CardInit+0x250>
 8000acc:	e004      	b.n	8000ad8 <SD_CardInit+0x1b8>
            SD_CardType = SD_UNKNOWN_SD_CARD;
 8000ace:	4b45      	ldr	r3, [pc, #276]	; (8000be4 <SD_CardInit+0x2c4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
            return 0xfc; // bad CMD58 response
 8000ad4:	23fc      	movs	r3, #252	; 0xfc
 8000ad6:	e07e      	b.n	8000bd6 <SD_CardInit+0x2b6>
        if (r3 & (1<<30)) SD_CardType = SD_HIGH_CAPACITY_SD_CARD; // SDHC or SDXC
 8000ad8:	4b42      	ldr	r3, [pc, #264]	; (8000be4 <SD_CardInit+0x2c4>)
 8000ada:	2204      	movs	r2, #4
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	e047      	b.n	8000b70 <SD_CardInit+0x250>
    } else {
        // SDv1 or MMC
        wait = 0; response = 0xff;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	230b      	movs	r3, #11
 8000ae6:	18fb      	adds	r3, r7, r3
 8000ae8:	22ff      	movs	r2, #255	; 0xff
 8000aea:	701a      	strb	r2, [r3, #0]
        while (++wait < 0xfe) {
 8000aec:	e014      	b.n	8000b18 <SD_CardInit+0x1f8>
            SD_SendCmd(SD_CMD_APP_CMD,0); // CMD55
 8000aee:	2100      	movs	r1, #0
 8000af0:	2037      	movs	r0, #55	; 0x37
 8000af2:	f7ff fda5 	bl	8000640 <SD_SendCmd>
            response = SD_SendCmd(SD_CMD_SD_APP_OP_COND,0x00000000); // CMD41
 8000af6:	230b      	movs	r3, #11
 8000af8:	18fc      	adds	r4, r7, r3
 8000afa:	2100      	movs	r1, #0
 8000afc:	2029      	movs	r0, #41	; 0x29
 8000afe:	f7ff fd9f 	bl	8000640 <SD_SendCmd>
 8000b02:	0003      	movs	r3, r0
 8000b04:	7023      	strb	r3, [r4, #0]
            if (response == 0x00) {
 8000b06:	230b      	movs	r3, #11
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d103      	bne.n	8000b18 <SD_CardInit+0x1f8>
                SD_CardType = SD_STD_CAPACITY_SD_CARD_V1_0; // SDv1
 8000b10:	4b34      	ldr	r3, [pc, #208]	; (8000be4 <SD_CardInit+0x2c4>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
                break;
 8000b16:	e005      	b.n	8000b24 <SD_CardInit+0x204>
        while (++wait < 0xfe) {
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	2bfd      	cmp	r3, #253	; 0xfd
 8000b22:	d9e4      	bls.n	8000aee <SD_CardInit+0x1ce>
            }
        }

        if (response == 0x05 && wait >= 0xfe) {
 8000b24:	230b      	movs	r3, #11
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b05      	cmp	r3, #5
 8000b2c:	d120      	bne.n	8000b70 <SD_CardInit+0x250>
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	2bfd      	cmp	r3, #253	; 0xfd
 8000b32:	d91d      	bls.n	8000b70 <SD_CardInit+0x250>
            // MMC or bad card
            // CMD1: Initiate initialization process.
            wait = 0; response = 0xff;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	230b      	movs	r3, #11
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	22ff      	movs	r2, #255	; 0xff
 8000b3e:	701a      	strb	r2, [r3, #0]
            while (++wait < 0xfe) {
 8000b40:	e010      	b.n	8000b64 <SD_CardInit+0x244>
                response = SD_SendCmd(SD_CMD_SEND_OP_COND,0x00000000); // CMD1
 8000b42:	230b      	movs	r3, #11
 8000b44:	18fc      	adds	r4, r7, r3
 8000b46:	2100      	movs	r1, #0
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f7ff fd79 	bl	8000640 <SD_SendCmd>
 8000b4e:	0003      	movs	r3, r0
 8000b50:	7023      	strb	r3, [r4, #0]
                if (response == 0x00) {
 8000b52:	230b      	movs	r3, #11
 8000b54:	18fb      	adds	r3, r7, r3
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d103      	bne.n	8000b64 <SD_CardInit+0x244>
                    SD_CardType = SD_MULTIMEDIA_CARD; // MMC
 8000b5c:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <SD_CardInit+0x2c4>)
 8000b5e:	2203      	movs	r2, #3
 8000b60:	701a      	strb	r2, [r3, #0]
                    break;
 8000b62:	e005      	b.n	8000b70 <SD_CardInit+0x250>
            while (++wait < 0xfe) {
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	3301      	adds	r3, #1
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2bfd      	cmp	r3, #253	; 0xfd
 8000b6e:	d9e8      	bls.n	8000b42 <SD_CardInit+0x222>
                }
            }
        }
    }

    if (SD_CardType == 0) return 0xfe; // Unknown or bad SD/MMC card
 8000b70:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <SD_CardInit+0x2c4>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d101      	bne.n	8000b7c <SD_CardInit+0x25c>
 8000b78:	23fe      	movs	r3, #254	; 0xfe
 8000b7a:	e02c      	b.n	8000bd6 <SD_CardInit+0x2b6>
    // Set SPI to higher speed
    // TODO
    //SD_SPI_Init(SPI_BaudRatePrescaler_8);

    // Turn off CRC
    response = SD_SendCmd(SD_CMD_CRC_ON_OFF,0x00000001); // CMD59
 8000b7c:	230b      	movs	r3, #11
 8000b7e:	18fc      	adds	r4, r7, r3
 8000b80:	2101      	movs	r1, #1
 8000b82:	203b      	movs	r0, #59	; 0x3b
 8000b84:	f7ff fd5c 	bl	8000640 <SD_SendCmd>
 8000b88:	0003      	movs	r3, r0
 8000b8a:	7023      	strb	r3, [r4, #0]

    // For SDv2,SDv1,MMC must set block size. For SDHC/SDXC it fixed to 512.
    if ((SD_CardType == SD_STD_CAPACITY_SD_CARD_V1_0) ||
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <SD_CardInit+0x2c4>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d007      	beq.n	8000ba4 <SD_CardInit+0x284>
        (SD_CardType == SD_STD_CAPACITY_SD_CARD_V2_0) ||
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <SD_CardInit+0x2c4>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
    if ((SD_CardType == SD_STD_CAPACITY_SD_CARD_V1_0) ||
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d003      	beq.n	8000ba4 <SD_CardInit+0x284>
        (SD_CardType == SD_MULTIMEDIA_CARD))
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <SD_CardInit+0x2c4>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
        (SD_CardType == SD_STD_CAPACITY_SD_CARD_V2_0) ||
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	d110      	bne.n	8000bc6 <SD_CardInit+0x2a6>
    {
        response = SD_SendCmd(SD_CMD_SET_BLOCKLEN,0x00000200); // CMD16: block size = 512 bytes
 8000ba4:	230b      	movs	r3, #11
 8000ba6:	18fc      	adds	r4, r7, r3
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	0019      	movs	r1, r3
 8000bae:	2010      	movs	r0, #16
 8000bb0:	f7ff fd46 	bl	8000640 <SD_SendCmd>
 8000bb4:	0003      	movs	r3, r0
 8000bb6:	7023      	strb	r3, [r4, #0]
        if (response != 0x00) return 0xfd; // Set block size failed
 8000bb8:	230b      	movs	r3, #11
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SD_CardInit+0x2a6>
 8000bc2:	23fd      	movs	r3, #253	; 0xfd
 8000bc4:	e007      	b.n	8000bd6 <SD_CardInit+0x2b6>
    }

    SD_CS_HIGH; // pull CS to high
 8000bc6:	23a0      	movs	r3, #160	; 0xa0
 8000bc8:	05db      	lsls	r3, r3, #23
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2110      	movs	r1, #16
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f001 fd12 	bl	80025f8 <HAL_GPIO_WritePin>

    return 0;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b005      	add	sp, #20
 8000bdc:	bd90      	pop	{r4, r7, pc}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	0000270f 	.word	0x0000270f
 8000be4:	2000009c 	.word	0x2000009c

08000be8 <SD_Read_CSD>:

// return:
// 0x00 -- read OK
// 0x01..0xfe -- error response to CMD9
// 0xff -- timeout
uint8_t SD_Read_CSD(void) {
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
    uint32_t wait;
    uint8_t i, response;

    SD_CS_LOW; // pull CS to low
 8000bee:	23a0      	movs	r3, #160	; 0xa0
 8000bf0:	05db      	lsls	r3, r3, #23
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2110      	movs	r1, #16
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f001 fcfe 	bl	80025f8 <HAL_GPIO_WritePin>

    response = SD_SendCmd(SD_CMD_SEND_CSD,0); // CMD9
 8000bfc:	230a      	movs	r3, #10
 8000bfe:	18fc      	adds	r4, r7, r3
 8000c00:	2100      	movs	r1, #0
 8000c02:	2009      	movs	r0, #9
 8000c04:	f7ff fd1c 	bl	8000640 <SD_SendCmd>
 8000c08:	0003      	movs	r3, r0
 8000c0a:	7023      	strb	r3, [r4, #0]
    if (response != 0x00) {
 8000c0c:	230a      	movs	r3, #10
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d01a      	beq.n	8000c4c <SD_Read_CSD+0x64>
        // Something wrong happened, fill buffer with zeroes
        for (i = 0; i < 16; i++) SD_CSD[i] = 0x00;
 8000c16:	230b      	movs	r3, #11
 8000c18:	18fb      	adds	r3, r7, r3
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	e00c      	b.n	8000c3a <SD_Read_CSD+0x52>
 8000c20:	230b      	movs	r3, #11
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	4a66      	ldr	r2, [pc, #408]	; (8000dc0 <SD_Read_CSD+0x1d8>)
 8000c28:	2100      	movs	r1, #0
 8000c2a:	54d1      	strb	r1, [r2, r3]
 8000c2c:	230b      	movs	r3, #11
 8000c2e:	18fb      	adds	r3, r7, r3
 8000c30:	781a      	ldrb	r2, [r3, #0]
 8000c32:	230b      	movs	r3, #11
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	3201      	adds	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
 8000c3a:	230b      	movs	r3, #11
 8000c3c:	18fb      	adds	r3, r7, r3
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d9ed      	bls.n	8000c20 <SD_Read_CSD+0x38>
        return response;
 8000c44:	230a      	movs	r3, #10
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	e0b5      	b.n	8000db8 <SD_Read_CSD+0x1d0>
    } else {
        wait = 0; response = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	230a      	movs	r3, #10
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
        while (++wait <= 0x1ff && response != 0xfe) response = SD_SendRecv(0xff);
 8000c58:	e006      	b.n	8000c68 <SD_Read_CSD+0x80>
 8000c5a:	230a      	movs	r3, #10
 8000c5c:	18fc      	adds	r4, r7, r3
 8000c5e:	20ff      	movs	r0, #255	; 0xff
 8000c60:	f7ff fcc8 	bl	80005f4 <SD_SendRecv>
 8000c64:	0003      	movs	r3, r0
 8000c66:	7023      	strb	r3, [r4, #0]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	4a54      	ldr	r2, [pc, #336]	; (8000dc4 <SD_Read_CSD+0x1dc>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d804      	bhi.n	8000c80 <SD_Read_CSD+0x98>
 8000c76:	230a      	movs	r3, #10
 8000c78:	18fb      	adds	r3, r7, r3
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2bfe      	cmp	r3, #254	; 0xfe
 8000c7e:	d1ec      	bne.n	8000c5a <SD_Read_CSD+0x72>
        if (wait >= 0x1ff) return 0xff;
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	23ff      	movs	r3, #255	; 0xff
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d901      	bls.n	8000c8e <SD_Read_CSD+0xa6>
 8000c8a:	23ff      	movs	r3, #255	; 0xff
 8000c8c:	e094      	b.n	8000db8 <SD_Read_CSD+0x1d0>
        // Read 16 bytes of CSD register
        for (i = 0; i < 16; i++) SD_CSD[i] = SD_SendRecv(0xff);
 8000c8e:	230b      	movs	r3, #11
 8000c90:	18fb      	adds	r3, r7, r3
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
 8000c96:	e010      	b.n	8000cba <SD_Read_CSD+0xd2>
 8000c98:	230b      	movs	r3, #11
 8000c9a:	18fb      	adds	r3, r7, r3
 8000c9c:	781c      	ldrb	r4, [r3, #0]
 8000c9e:	20ff      	movs	r0, #255	; 0xff
 8000ca0:	f7ff fca8 	bl	80005f4 <SD_SendRecv>
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	001a      	movs	r2, r3
 8000ca8:	4b45      	ldr	r3, [pc, #276]	; (8000dc0 <SD_Read_CSD+0x1d8>)
 8000caa:	551a      	strb	r2, [r3, r4]
 8000cac:	230b      	movs	r3, #11
 8000cae:	18fb      	adds	r3, r7, r3
 8000cb0:	781a      	ldrb	r2, [r3, #0]
 8000cb2:	230b      	movs	r3, #11
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	3201      	adds	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
 8000cba:	230b      	movs	r3, #11
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d9e9      	bls.n	8000c98 <SD_Read_CSD+0xb0>
    }

    // Receive 16-bit CRC (some cards demand this)
    SD_CRC16_rcv  = SD_SendRecv(0xff) << 8;
 8000cc4:	20ff      	movs	r0, #255	; 0xff
 8000cc6:	f7ff fc95 	bl	80005f4 <SD_SendRecv>
 8000cca:	0003      	movs	r3, r0
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	021b      	lsls	r3, r3, #8
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b3d      	ldr	r3, [pc, #244]	; (8000dc8 <SD_Read_CSD+0x1e0>)
 8000cd4:	801a      	strh	r2, [r3, #0]
    SD_CRC16_rcv |= SD_SendRecv(0xff);
 8000cd6:	20ff      	movs	r0, #255	; 0xff
 8000cd8:	f7ff fc8c 	bl	80005f4 <SD_SendRecv>
 8000cdc:	0003      	movs	r3, r0
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	4b39      	ldr	r3, [pc, #228]	; (8000dc8 <SD_Read_CSD+0x1e0>)
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	4b37      	ldr	r3, [pc, #220]	; (8000dc8 <SD_Read_CSD+0x1e0>)
 8000cea:	801a      	strh	r2, [r3, #0]

    // // Calculate CRC16 of received buffer
    SD_CRC16_cmp = CRC16_buf(&SD_CSD[0],16);
 8000cec:	4b34      	ldr	r3, [pc, #208]	; (8000dc0 <SD_Read_CSD+0x1d8>)
 8000cee:	2110      	movs	r1, #16
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff fc55 	bl	80005a0 <CRC16_buf>
 8000cf6:	0003      	movs	r3, r0
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	4b34      	ldr	r3, [pc, #208]	; (8000dcc <SD_Read_CSD+0x1e4>)
 8000cfc:	801a      	strh	r2, [r3, #0]

    SD_CS_HIGH; // pull CS to high
 8000cfe:	23a0      	movs	r3, #160	; 0xa0
 8000d00:	05db      	lsls	r3, r3, #23
 8000d02:	2201      	movs	r2, #1
 8000d04:	2110      	movs	r1, #16
 8000d06:	0018      	movs	r0, r3
 8000d08:	f001 fc76 	bl	80025f8 <HAL_GPIO_WritePin>

    // Parse some stuff from CID
    SD_MaxBusClkFreq = SD_CSD[3];
 8000d0c:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <SD_Read_CSD+0x1d8>)
 8000d0e:	78da      	ldrb	r2, [r3, #3]
 8000d10:	4b2f      	ldr	r3, [pc, #188]	; (8000dd0 <SD_Read_CSD+0x1e8>)
 8000d12:	701a      	strb	r2, [r3, #0]
    uint32_t c_size,c_size_mult;
    if (SD_CardType != SD_MULTIMEDIA_CARD) {
 8000d14:	4b2f      	ldr	r3, [pc, #188]	; (8000dd4 <SD_Read_CSD+0x1ec>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	d049      	beq.n	8000db0 <SD_Read_CSD+0x1c8>
        if (SD_CSD[0] >> 6 == 0x01) {
 8000d1c:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <SD_Read_CSD+0x1d8>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	099b      	lsrs	r3, r3, #6
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d119      	bne.n	8000d5c <SD_Read_CSD+0x174>
            // CSD Version 2.0
            c_size  = (SD_CSD[7] & 0x3f) << 16;
 8000d28:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <SD_Read_CSD+0x1d8>)
 8000d2a:	79db      	ldrb	r3, [r3, #7]
 8000d2c:	041b      	lsls	r3, r3, #16
 8000d2e:	001a      	movs	r2, r3
 8000d30:	23fc      	movs	r3, #252	; 0xfc
 8000d32:	039b      	lsls	r3, r3, #14
 8000d34:	4013      	ands	r3, r2
 8000d36:	607b      	str	r3, [r7, #4]
            c_size |= SD_CSD[8] << 8;
 8000d38:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <SD_Read_CSD+0x1d8>)
 8000d3a:	7a1b      	ldrb	r3, [r3, #8]
 8000d3c:	021b      	lsls	r3, r3, #8
 8000d3e:	001a      	movs	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	607b      	str	r3, [r7, #4]
            c_size |= SD_CSD[7];
 8000d46:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <SD_Read_CSD+0x1d8>)
 8000d48:	79db      	ldrb	r3, [r3, #7]
 8000d4a:	001a      	movs	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	607b      	str	r3, [r7, #4]
            SD_CardCapacity = c_size << 9; // = c_size * 512
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	025a      	lsls	r2, r3, #9
 8000d56:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <SD_Read_CSD+0x1f0>)
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	e02c      	b.n	8000db6 <SD_Read_CSD+0x1ce>
        } else {
            // CSD Version 1.0
            c_size  = (SD_CSD[6] & 0x03) << 10;
 8000d5c:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <SD_Read_CSD+0x1d8>)
 8000d5e:	799b      	ldrb	r3, [r3, #6]
 8000d60:	029b      	lsls	r3, r3, #10
 8000d62:	001a      	movs	r2, r3
 8000d64:	23c0      	movs	r3, #192	; 0xc0
 8000d66:	011b      	lsls	r3, r3, #4
 8000d68:	4013      	ands	r3, r2
 8000d6a:	607b      	str	r3, [r7, #4]
            c_size |= (uint32_t)SD_CSD[7] << 2;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <SD_Read_CSD+0x1d8>)
 8000d6e:	79db      	ldrb	r3, [r3, #7]
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	607b      	str	r3, [r7, #4]
            c_size |= SD_CSD[8] >> 6;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <SD_Read_CSD+0x1d8>)
 8000d7a:	7a1b      	ldrb	r3, [r3, #8]
 8000d7c:	099b      	lsrs	r3, r3, #6
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	001a      	movs	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	607b      	str	r3, [r7, #4]
            c_size_mult  = (SD_CSD[9] & 0x03) << 1;
 8000d88:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <SD_Read_CSD+0x1d8>)
 8000d8a:	7a5b      	ldrb	r3, [r3, #9]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	001a      	movs	r2, r3
 8000d90:	2306      	movs	r3, #6
 8000d92:	4013      	ands	r3, r2
 8000d94:	603b      	str	r3, [r7, #0]
            c_size_mult |= SD_CSD[10] >> 7;
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <SD_Read_CSD+0x1d8>)
 8000d98:	7a9b      	ldrb	r3, [r3, #10]
 8000d9a:	09db      	lsrs	r3, r3, #7
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	001a      	movs	r2, r3
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	603b      	str	r3, [r7, #0]
            SD_CardCapacity = c_size << 10;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	029a      	lsls	r2, r3, #10
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <SD_Read_CSD+0x1f0>)
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	e002      	b.n	8000db6 <SD_Read_CSD+0x1ce>
        }
    } else {
        SD_CardCapacity = 0;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <SD_Read_CSD+0x1f0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8000db6:	2300      	movs	r3, #0
}
 8000db8:	0018      	movs	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b005      	add	sp, #20
 8000dbe:	bd90      	pop	{r4, r7, pc}
 8000dc0:	200000f0 	.word	0x200000f0
 8000dc4:	000001ff 	.word	0x000001ff
 8000dc8:	200000ec 	.word	0x200000ec
 8000dcc:	20000100 	.word	0x20000100
 8000dd0:	2000009d 	.word	0x2000009d
 8000dd4:	2000009c 	.word	0x2000009c
 8000dd8:	20000104 	.word	0x20000104

08000ddc <SD_Read_CID>:

// return:
// 0x00 -- read OK
// 0x01..0xfe -- error response to CMD10
// 0xff -- timeout
uint8_t SD_Read_CID(void) {
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
    uint32_t wait;
    uint8_t i, response;

    SD_CS_LOW; // pull CS to low
 8000de2:	23a0      	movs	r3, #160	; 0xa0
 8000de4:	05db      	lsls	r3, r3, #23
 8000de6:	2200      	movs	r2, #0
 8000de8:	2110      	movs	r1, #16
 8000dea:	0018      	movs	r0, r3
 8000dec:	f001 fc04 	bl	80025f8 <HAL_GPIO_WritePin>

    response = SD_SendCmd(SD_CMD_SEND_CID,0); // CMD10
 8000df0:	1cbc      	adds	r4, r7, #2
 8000df2:	2100      	movs	r1, #0
 8000df4:	200a      	movs	r0, #10
 8000df6:	f7ff fc23 	bl	8000640 <SD_SendCmd>
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	7023      	strb	r3, [r4, #0]
    if (response != 0x00) {
 8000dfe:	1cbb      	adds	r3, r7, #2
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d014      	beq.n	8000e30 <SD_Read_CID+0x54>
        // Something wrong happened, fill buffer with zeroes
        for (i = 0; i < 16; i++) SD_CID[i] = 0x00;
 8000e06:	1cfb      	adds	r3, r7, #3
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
 8000e0c:	e009      	b.n	8000e22 <SD_Read_CID+0x46>
 8000e0e:	1cfb      	adds	r3, r7, #3
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	4a36      	ldr	r2, [pc, #216]	; (8000eec <SD_Read_CID+0x110>)
 8000e14:	2100      	movs	r1, #0
 8000e16:	54d1      	strb	r1, [r2, r3]
 8000e18:	1cfb      	adds	r3, r7, #3
 8000e1a:	781a      	ldrb	r2, [r3, #0]
 8000e1c:	1cfb      	adds	r3, r7, #3
 8000e1e:	3201      	adds	r2, #1
 8000e20:	701a      	strb	r2, [r3, #0]
 8000e22:	1cfb      	adds	r3, r7, #3
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b0f      	cmp	r3, #15
 8000e28:	d9f1      	bls.n	8000e0e <SD_Read_CID+0x32>
        return response;
 8000e2a:	1cbb      	adds	r3, r7, #2
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	e058      	b.n	8000ee2 <SD_Read_CID+0x106>
    } else {
        wait = 0; response = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	1cbb      	adds	r3, r7, #2
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
        while (++wait <= 0x1ff && response != 0xfe) response = SD_SendRecv(0xff);
 8000e3a:	e005      	b.n	8000e48 <SD_Read_CID+0x6c>
 8000e3c:	1cbc      	adds	r4, r7, #2
 8000e3e:	20ff      	movs	r0, #255	; 0xff
 8000e40:	f7ff fbd8 	bl	80005f4 <SD_SendRecv>
 8000e44:	0003      	movs	r3, r0
 8000e46:	7023      	strb	r3, [r4, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a27      	ldr	r2, [pc, #156]	; (8000ef0 <SD_Read_CID+0x114>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d803      	bhi.n	8000e5e <SD_Read_CID+0x82>
 8000e56:	1cbb      	adds	r3, r7, #2
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2bfe      	cmp	r3, #254	; 0xfe
 8000e5c:	d1ee      	bne.n	8000e3c <SD_Read_CID+0x60>
        if (wait >= 0x1ff) return 0xff;
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	23ff      	movs	r3, #255	; 0xff
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d901      	bls.n	8000e6c <SD_Read_CID+0x90>
 8000e68:	23ff      	movs	r3, #255	; 0xff
 8000e6a:	e03a      	b.n	8000ee2 <SD_Read_CID+0x106>
        // Read 16 bytes of CID register
        for (i = 0; i < 16; i++) SD_CID[i] = SD_SendRecv(0xff);
 8000e6c:	1cfb      	adds	r3, r7, #3
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	e00d      	b.n	8000e90 <SD_Read_CID+0xb4>
 8000e74:	1cfb      	adds	r3, r7, #3
 8000e76:	781c      	ldrb	r4, [r3, #0]
 8000e78:	20ff      	movs	r0, #255	; 0xff
 8000e7a:	f7ff fbbb 	bl	80005f4 <SD_SendRecv>
 8000e7e:	0003      	movs	r3, r0
 8000e80:	001a      	movs	r2, r3
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <SD_Read_CID+0x110>)
 8000e84:	551a      	strb	r2, [r3, r4]
 8000e86:	1cfb      	adds	r3, r7, #3
 8000e88:	781a      	ldrb	r2, [r3, #0]
 8000e8a:	1cfb      	adds	r3, r7, #3
 8000e8c:	3201      	adds	r2, #1
 8000e8e:	701a      	strb	r2, [r3, #0]
 8000e90:	1cfb      	adds	r3, r7, #3
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	d9ed      	bls.n	8000e74 <SD_Read_CID+0x98>
    }

    // Receive 16-bit CRC (some cards demand this)
    SD_CRC16_rcv  = SD_SendRecv(0xff) << 8;
 8000e98:	20ff      	movs	r0, #255	; 0xff
 8000e9a:	f7ff fbab 	bl	80005f4 <SD_SendRecv>
 8000e9e:	0003      	movs	r3, r0
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <SD_Read_CID+0x118>)
 8000ea8:	801a      	strh	r2, [r3, #0]
    SD_CRC16_rcv |= SD_SendRecv(0xff);
 8000eaa:	20ff      	movs	r0, #255	; 0xff
 8000eac:	f7ff fba2 	bl	80005f4 <SD_SendRecv>
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <SD_Read_CID+0x118>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <SD_Read_CID+0x118>)
 8000ebe:	801a      	strh	r2, [r3, #0]

    // // Calculate CRC16 of received buffer
    SD_CRC16_cmp = CRC16_buf(&SD_CID[0],16);
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <SD_Read_CID+0x110>)
 8000ec2:	2110      	movs	r1, #16
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff fb6b 	bl	80005a0 <CRC16_buf>
 8000eca:	0003      	movs	r3, r0
 8000ecc:	001a      	movs	r2, r3
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <SD_Read_CID+0x11c>)
 8000ed0:	801a      	strh	r2, [r3, #0]

    SD_CS_HIGH; // pull CS to high
 8000ed2:	23a0      	movs	r3, #160	; 0xa0
 8000ed4:	05db      	lsls	r3, r3, #23
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2110      	movs	r1, #16
 8000eda:	0018      	movs	r0, r3
 8000edc:	f001 fb8c 	bl	80025f8 <HAL_GPIO_WritePin>

    return 0;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b003      	add	sp, #12
 8000ee8:	bd90      	pop	{r4, r7, pc}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	20000108 	.word	0x20000108
 8000ef0:	000001ff 	.word	0x000001ff
 8000ef4:	200000ec 	.word	0x200000ec
 8000ef8:	20000100 	.word	0x20000100

08000efc <SD_Read_Block>:

// return:
// 0x00 -- read OK
// 0x01..0xfe -- error response from CMD17
// 0xff -- timeout
uint8_t SD_Read_Block(uint32_t addr, uint8_t* buff) {
 8000efc:	b590      	push	{r4, r7, lr}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
    uint32_t wait;
    uint16_t i;
    uint8_t response;

    int waitval = SD_WaitReadyByCommand(1000);
 8000f06:	23fa      	movs	r3, #250	; 0xfa
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f7ff fa92 	bl	8000434 <SD_WaitReadyByCommand>
 8000f10:	0003      	movs	r3, r0
 8000f12:	60fb      	str	r3, [r7, #12]
    else
    {
        SOS_DEBUG("Wait CMD: %d\r\n", waitval);
    }

    SD_CS_LOW; // pull CS to low
 8000f14:	23a0      	movs	r3, #160	; 0xa0
 8000f16:	05db      	lsls	r3, r3, #23
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f001 fb6b 	bl	80025f8 <HAL_GPIO_WritePin>

    if (SD_CardType != SD_HIGH_CAPACITY_SD_CARD) addr <<= 9; // Convert block number to byte offset
 8000f22:	4b4d      	ldr	r3, [pc, #308]	; (8001058 <SD_Read_Block+0x15c>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	d002      	beq.n	8000f30 <SD_Read_Block+0x34>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	025b      	lsls	r3, r3, #9
 8000f2e:	607b      	str	r3, [r7, #4]
    response = SD_SendCmd(SD_CMD_READ_SINGLE_BLOCK,addr); // CMD17
 8000f30:	2311      	movs	r3, #17
 8000f32:	18fc      	adds	r4, r7, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	0019      	movs	r1, r3
 8000f38:	2011      	movs	r0, #17
 8000f3a:	f7ff fb81 	bl	8000640 <SD_SendCmd>
 8000f3e:	0003      	movs	r3, r0
 8000f40:	7023      	strb	r3, [r4, #0]
    if (response != 0x00) {
 8000f42:	2311      	movs	r3, #17
 8000f44:	18fb      	adds	r3, r7, r3
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d01c      	beq.n	8000f86 <SD_Read_Block+0x8a>
        // Something wrong happened, fill buffer with zeroes
        for (i = 0; i < 512; i++) buff[i] = 0;
 8000f4c:	2312      	movs	r3, #18
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	2200      	movs	r2, #0
 8000f52:	801a      	strh	r2, [r3, #0]
 8000f54:	e00d      	b.n	8000f72 <SD_Read_Block+0x76>
 8000f56:	2312      	movs	r3, #18
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	18d3      	adds	r3, r2, r3
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
 8000f64:	2312      	movs	r3, #18
 8000f66:	18fb      	adds	r3, r7, r3
 8000f68:	881a      	ldrh	r2, [r3, #0]
 8000f6a:	2312      	movs	r3, #18
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	3201      	adds	r2, #1
 8000f70:	801a      	strh	r2, [r3, #0]
 8000f72:	2312      	movs	r3, #18
 8000f74:	18fb      	adds	r3, r7, r3
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	4a38      	ldr	r2, [pc, #224]	; (800105c <SD_Read_Block+0x160>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d9eb      	bls.n	8000f56 <SD_Read_Block+0x5a>
        return response; // SD_CMD_READ_SINGLE_BLOCK command returns bad response
 8000f7e:	2311      	movs	r3, #17
 8000f80:	18fb      	adds	r3, r7, r3
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	e063      	b.n	800104e <SD_Read_Block+0x152>
    } else {
        wait = 0; response = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	2311      	movs	r3, #17
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
        while (++wait <= 0x1ff && response != 0xfe) response = SD_SendRecv(0xff);
 8000f92:	e006      	b.n	8000fa2 <SD_Read_Block+0xa6>
 8000f94:	2311      	movs	r3, #17
 8000f96:	18fc      	adds	r4, r7, r3
 8000f98:	20ff      	movs	r0, #255	; 0xff
 8000f9a:	f7ff fb2b 	bl	80005f4 <SD_SendRecv>
 8000f9e:	0003      	movs	r3, r0
 8000fa0:	7023      	strb	r3, [r4, #0]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	4a2c      	ldr	r2, [pc, #176]	; (800105c <SD_Read_Block+0x160>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d804      	bhi.n	8000fba <SD_Read_Block+0xbe>
 8000fb0:	2311      	movs	r3, #17
 8000fb2:	18fb      	adds	r3, r7, r3
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2bfe      	cmp	r3, #254	; 0xfe
 8000fb8:	d1ec      	bne.n	8000f94 <SD_Read_Block+0x98>
        if (wait >= 0x1ff) return 0xff;
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	23ff      	movs	r3, #255	; 0xff
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d901      	bls.n	8000fc8 <SD_Read_Block+0xcc>
 8000fc4:	23ff      	movs	r3, #255	; 0xff
 8000fc6:	e042      	b.n	800104e <SD_Read_Block+0x152>
        // Read 512 bytes of sector
        for (i = 0; i < 512; i++) buff[i] = SD_SendRecv(0xff);
 8000fc8:	2312      	movs	r3, #18
 8000fca:	18fb      	adds	r3, r7, r3
 8000fcc:	2200      	movs	r2, #0
 8000fce:	801a      	strh	r2, [r3, #0]
 8000fd0:	e010      	b.n	8000ff4 <SD_Read_Block+0xf8>
 8000fd2:	2312      	movs	r3, #18
 8000fd4:	18fb      	adds	r3, r7, r3
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	18d4      	adds	r4, r2, r3
 8000fdc:	20ff      	movs	r0, #255	; 0xff
 8000fde:	f7ff fb09 	bl	80005f4 <SD_SendRecv>
 8000fe2:	0003      	movs	r3, r0
 8000fe4:	7023      	strb	r3, [r4, #0]
 8000fe6:	2312      	movs	r3, #18
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	881a      	ldrh	r2, [r3, #0]
 8000fec:	2312      	movs	r3, #18
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	3201      	adds	r2, #1
 8000ff2:	801a      	strh	r2, [r3, #0]
 8000ff4:	2312      	movs	r3, #18
 8000ff6:	18fb      	adds	r3, r7, r3
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	4a18      	ldr	r2, [pc, #96]	; (800105c <SD_Read_Block+0x160>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d9e8      	bls.n	8000fd2 <SD_Read_Block+0xd6>
    }

    // Receive 16-bit CRC (some cards demand this)
    SD_CRC16_rcv  = SD_SendRecv(0xff) << 8;
 8001000:	20ff      	movs	r0, #255	; 0xff
 8001002:	f7ff faf7 	bl	80005f4 <SD_SendRecv>
 8001006:	0003      	movs	r3, r0
 8001008:	b29b      	uxth	r3, r3
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b29a      	uxth	r2, r3
 800100e:	4b14      	ldr	r3, [pc, #80]	; (8001060 <SD_Read_Block+0x164>)
 8001010:	801a      	strh	r2, [r3, #0]
    SD_CRC16_rcv |= SD_SendRecv(0xff);
 8001012:	20ff      	movs	r0, #255	; 0xff
 8001014:	f7ff faee 	bl	80005f4 <SD_SendRecv>
 8001018:	0003      	movs	r3, r0
 800101a:	b29a      	uxth	r2, r3
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <SD_Read_Block+0x164>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	4313      	orrs	r3, r2
 8001022:	b29a      	uxth	r2, r3
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <SD_Read_Block+0x164>)
 8001026:	801a      	strh	r2, [r3, #0]

    // // Calculate CRC16 of received buffer
    SD_CRC16_cmp = CRC16_buf(&buff[0],512);
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	009a      	lsls	r2, r3, #2
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	0011      	movs	r1, r2
 8001030:	0018      	movs	r0, r3
 8001032:	f7ff fab5 	bl	80005a0 <CRC16_buf>
 8001036:	0003      	movs	r3, r0
 8001038:	001a      	movs	r2, r3
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <SD_Read_Block+0x168>)
 800103c:	801a      	strh	r2, [r3, #0]
    if(SD_CRC16_cmp != SD_CRC16_rcv)
    {
        SOS_DEBUG("CRC error when read block\r\n");
    }
    SD_CS_HIGH; // pull CS to high
 800103e:	23a0      	movs	r3, #160	; 0xa0
 8001040:	05db      	lsls	r3, r3, #23
 8001042:	2201      	movs	r2, #1
 8001044:	2110      	movs	r1, #16
 8001046:	0018      	movs	r0, r3
 8001048:	f001 fad6 	bl	80025f8 <HAL_GPIO_WritePin>

    return 0;
 800104c:	2300      	movs	r3, #0
}
 800104e:	0018      	movs	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	b007      	add	sp, #28
 8001054:	bd90      	pop	{r4, r7, pc}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	2000009c 	.word	0x2000009c
 800105c:	000001ff 	.word	0x000001ff
 8001060:	200000ec 	.word	0x200000ec
 8001064:	20000100 	.word	0x20000100

08001068 <SD_Write_Block>:
// return:
// 0x00 -- write OK
// 0x01..0xfe -- error response from CMD24
// 0xff -- timeout
uint8_t SD_Write_Block(uint32_t addr, uint8_t* buff)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b087      	sub	sp, #28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
    uint32_t wait;
    uint16_t i;
    uint8_t response;
    uint8_t status;

    int waitval = SD_WaitReadyByCommand(1000);
 8001072:	23fa      	movs	r3, #250	; 0xfa
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	0018      	movs	r0, r3
 8001078:	f7ff f9dc 	bl	8000434 <SD_WaitReadyByCommand>
 800107c:	0003      	movs	r3, r0
 800107e:	60fb      	str	r3, [r7, #12]
    else
    {
        SOS_DEBUG("Wait CMD: %d\r\n", waitval);
    }

    SD_CS_LOW; // pull CS to low
 8001080:	23a0      	movs	r3, #160	; 0xa0
 8001082:	05db      	lsls	r3, r3, #23
 8001084:	2200      	movs	r2, #0
 8001086:	2110      	movs	r1, #16
 8001088:	0018      	movs	r0, r3
 800108a:	f001 fab5 	bl	80025f8 <HAL_GPIO_WritePin>

    if (SD_CardType != SD_HIGH_CAPACITY_SD_CARD) addr <<= 9; // Convert block number to byte offset
 800108e:	4b59      	ldr	r3, [pc, #356]	; (80011f4 <SD_Write_Block+0x18c>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b04      	cmp	r3, #4
 8001094:	d002      	beq.n	800109c <SD_Write_Block+0x34>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	025b      	lsls	r3, r3, #9
 800109a:	607b      	str	r3, [r7, #4]
    response = SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK,addr); // CMD24
 800109c:	2311      	movs	r3, #17
 800109e:	18fc      	adds	r4, r7, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	0019      	movs	r1, r3
 80010a4:	2018      	movs	r0, #24
 80010a6:	f7ff facb 	bl	8000640 <SD_SendCmd>
 80010aa:	0003      	movs	r3, r0
 80010ac:	7023      	strb	r3, [r4, #0]
    if (response != 0x00) {
 80010ae:	2311      	movs	r3, #17
 80010b0:	18fb      	adds	r3, r7, r3
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d00a      	beq.n	80010ce <SD_Write_Block+0x66>
        SD_CS_HIGH;
 80010b8:	23a0      	movs	r3, #160	; 0xa0
 80010ba:	05db      	lsls	r3, r3, #23
 80010bc:	2201      	movs	r2, #1
 80010be:	2110      	movs	r1, #16
 80010c0:	0018      	movs	r0, r3
 80010c2:	f001 fa99 	bl	80025f8 <HAL_GPIO_WritePin>
        return response; // SD_CMD_WRITE_SINGLE_BLOCK command returns bad response
 80010c6:	2311      	movs	r3, #17
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	e08e      	b.n	80011ec <SD_Write_Block+0x184>
    } else {
        wait = 0; response = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	2311      	movs	r3, #17
 80010d4:	18fb      	adds	r3, r7, r3
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
        while (++wait <= 0x1ff && response != 0xff) response = SD_SendRecv(0xff);
 80010da:	e006      	b.n	80010ea <SD_Write_Block+0x82>
 80010dc:	2311      	movs	r3, #17
 80010de:	18fc      	adds	r4, r7, r3
 80010e0:	20ff      	movs	r0, #255	; 0xff
 80010e2:	f7ff fa87 	bl	80005f4 <SD_SendRecv>
 80010e6:	0003      	movs	r3, r0
 80010e8:	7023      	strb	r3, [r4, #0]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	3301      	adds	r3, #1
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	4a41      	ldr	r2, [pc, #260]	; (80011f8 <SD_Write_Block+0x190>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d804      	bhi.n	8001102 <SD_Write_Block+0x9a>
 80010f8:	2311      	movs	r3, #17
 80010fa:	18fb      	adds	r3, r7, r3
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2bff      	cmp	r3, #255	; 0xff
 8001100:	d1ec      	bne.n	80010dc <SD_Write_Block+0x74>
        if (wait >= 0x1ff)
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	23ff      	movs	r3, #255	; 0xff
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	429a      	cmp	r2, r3
 800110a:	d908      	bls.n	800111e <SD_Write_Block+0xb6>
        {
            SD_CS_HIGH;
 800110c:	23a0      	movs	r3, #160	; 0xa0
 800110e:	05db      	lsls	r3, r3, #23
 8001110:	2201      	movs	r2, #1
 8001112:	2110      	movs	r1, #16
 8001114:	0018      	movs	r0, r3
 8001116:	f001 fa6f 	bl	80025f8 <HAL_GPIO_WritePin>
            return 0xff;
 800111a:	23ff      	movs	r3, #255	; 0xff
 800111c:	e066      	b.n	80011ec <SD_Write_Block+0x184>
        }
        // Write start token
        SD_SendRecv(SD_TOKEN_STARTBLK_WRITE_SINGGLE);
 800111e:	20fe      	movs	r0, #254	; 0xfe
 8001120:	f7ff fa68 	bl	80005f4 <SD_SendRecv>

        // Write 512 bytes of sector
        for (i = 0; i < 512; i++)
 8001124:	2312      	movs	r3, #18
 8001126:	18fb      	adds	r3, r7, r3
 8001128:	2200      	movs	r2, #0
 800112a:	801a      	strh	r2, [r3, #0]
 800112c:	e00f      	b.n	800114e <SD_Write_Block+0xe6>
            SD_SendRecv(buff[i]);
 800112e:	2312      	movs	r3, #18
 8001130:	18fb      	adds	r3, r7, r3
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	18d3      	adds	r3, r2, r3
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	0018      	movs	r0, r3
 800113c:	f7ff fa5a 	bl	80005f4 <SD_SendRecv>
        for (i = 0; i < 512; i++)
 8001140:	2312      	movs	r3, #18
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	881a      	ldrh	r2, [r3, #0]
 8001146:	2312      	movs	r3, #18
 8001148:	18fb      	adds	r3, r7, r3
 800114a:	3201      	adds	r2, #1
 800114c:	801a      	strh	r2, [r3, #0]
 800114e:	2312      	movs	r3, #18
 8001150:	18fb      	adds	r3, r7, r3
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	4a28      	ldr	r2, [pc, #160]	; (80011f8 <SD_Write_Block+0x190>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d9e9      	bls.n	800112e <SD_Write_Block+0xc6>
        // send 2 byte CRC
        SD_CRC16_cmp = CRC16_buf(&buff[0], 512);
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	009a      	lsls	r2, r3, #2
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	0011      	movs	r1, r2
 8001162:	0018      	movs	r0, r3
 8001164:	f7ff fa1c 	bl	80005a0 <CRC16_buf>
 8001168:	0003      	movs	r3, r0
 800116a:	001a      	movs	r2, r3
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <SD_Write_Block+0x194>)
 800116e:	801a      	strh	r2, [r3, #0]
        SD_SendRecv(SD_CRC16_cmp >> 8) ;
 8001170:	4b22      	ldr	r3, [pc, #136]	; (80011fc <SD_Write_Block+0x194>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	b29b      	uxth	r3, r3
 8001178:	b2db      	uxtb	r3, r3
 800117a:	0018      	movs	r0, r3
 800117c:	f7ff fa3a 	bl	80005f4 <SD_SendRecv>
        SD_SendRecv(SD_CRC16_cmp & 0xff);
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <SD_Write_Block+0x194>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	0018      	movs	r0, r3
 8001188:	f7ff fa34 	bl	80005f4 <SD_SendRecv>

        // read data respond token
        response = SD_SendRecv(0xff);
 800118c:	2311      	movs	r3, #17
 800118e:	18fc      	adds	r4, r7, r3
 8001190:	20ff      	movs	r0, #255	; 0xff
 8001192:	f7ff fa2f 	bl	80005f4 <SD_SendRecv>
 8001196:	0003      	movs	r3, r0
 8001198:	7023      	strb	r3, [r4, #0]
        status = (response & 0x0F) >> 1;
 800119a:	2311      	movs	r3, #17
 800119c:	18fb      	adds	r3, r7, r3
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	105b      	asrs	r3, r3, #1
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	230b      	movs	r3, #11
 80011a6:	18fb      	adds	r3, r7, r3
 80011a8:	2107      	movs	r1, #7
 80011aa:	400a      	ands	r2, r1
 80011ac:	701a      	strb	r2, [r3, #0]
        switch(status)
 80011ae:	230b      	movs	r3, #11
 80011b0:	18fb      	adds	r3, r7, r3
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b05      	cmp	r3, #5
 80011b6:	d004      	beq.n	80011c2 <SD_Write_Block+0x15a>
 80011b8:	2b06      	cmp	r3, #6
 80011ba:	d004      	beq.n	80011c6 <SD_Write_Block+0x15e>
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d004      	beq.n	80011ca <SD_Write_Block+0x162>
            case 6:
                SOS_DEBUG("Data Rejected due to a Write Error\r\n");
                break;
            default:
                SOS_DEBUG("Write block with unknow error\r\n");
                break;
 80011c0:	e004      	b.n	80011cc <SD_Write_Block+0x164>
                break;
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	e002      	b.n	80011cc <SD_Write_Block+0x164>
                break;
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	e000      	b.n	80011cc <SD_Write_Block+0x164>
                break;
 80011ca:	46c0      	nop			; (mov r8, r8)
        }
    }


    // send CMD13 to check programming error
    uint16_t program_respond = SD_SendCmd_2(SD_CMD_SEND_STATUS, 0x00);
 80011cc:	2308      	movs	r3, #8
 80011ce:	18fc      	adds	r4, r7, r3
 80011d0:	2100      	movs	r1, #0
 80011d2:	200d      	movs	r0, #13
 80011d4:	f7ff fad4 	bl	8000780 <SD_SendCmd_2>
 80011d8:	0003      	movs	r3, r0
 80011da:	8023      	strh	r3, [r4, #0]
    {
        SOS_DEBUG("Program data ERROR: %d\r\n", program_respond);
    }


    SD_CS_HIGH;
 80011dc:	23a0      	movs	r3, #160	; 0xa0
 80011de:	05db      	lsls	r3, r3, #23
 80011e0:	2201      	movs	r2, #1
 80011e2:	2110      	movs	r1, #16
 80011e4:	0018      	movs	r0, r3
 80011e6:	f001 fa07 	bl	80025f8 <HAL_GPIO_WritePin>
    return 0;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b007      	add	sp, #28
 80011f2:	bd90      	pop	{r4, r7, pc}
 80011f4:	2000009c 	.word	0x2000009c
 80011f8:	000001ff 	.word	0x000001ff
 80011fc:	20000100 	.word	0x20000100

08001200 <SD_WriteMultiBlock>:
// return:
// 0x00 -- write OK
// 0x01..0xfe -- error response from CMD24
// 0xff -- timeout
uint8_t SD_WriteMultiBlock(uint32_t startBlkAddr, uint8_t* buff, uint32_t numsBlk)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
    uint32_t  wait;
    uint16_t  i;
    uint8_t   response;
    uint8_t   status;
    uint32_t  count = numsBlk;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	617b      	str	r3, [r7, #20]

    SD_CS_LOW; // pull CS to low
 8001210:	23a0      	movs	r3, #160	; 0xa0
 8001212:	05db      	lsls	r3, r3, #23
 8001214:	2200      	movs	r2, #0
 8001216:	2110      	movs	r1, #16
 8001218:	0018      	movs	r0, r3
 800121a:	f001 f9ed 	bl	80025f8 <HAL_GPIO_WritePin>

    if (SD_CardType != SD_HIGH_CAPACITY_SD_CARD) startBlkAddr <<= 9; // Convert block number to byte offset
 800121e:	4b67      	ldr	r3, [pc, #412]	; (80013bc <SD_WriteMultiBlock+0x1bc>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b04      	cmp	r3, #4
 8001224:	d002      	beq.n	800122c <SD_WriteMultiBlock+0x2c>
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	025b      	lsls	r3, r3, #9
 800122a:	60fb      	str	r3, [r7, #12]

    // predefine number sector
    SD_SendCmd(SD_CMD_APP_CMD, 0x00); // CMD55
 800122c:	2100      	movs	r1, #0
 800122e:	2037      	movs	r0, #55	; 0x37
 8001230:	f7ff fa06 	bl	8000640 <SD_SendCmd>
    SD_SendCmd(SD_CMD_SD_APP_SET_WR_BLK_ERASE_COUNT, numsBlk & 0x07FFFF);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	035b      	lsls	r3, r3, #13
 8001238:	0b5b      	lsrs	r3, r3, #13
 800123a:	0019      	movs	r1, r3
 800123c:	2017      	movs	r0, #23
 800123e:	f7ff f9ff 	bl	8000640 <SD_SendCmd>

    response = SD_SendCmd(SD_CMD_WRITE_MULT_BLOCK, startBlkAddr); // CMD24
 8001242:	2319      	movs	r3, #25
 8001244:	18fc      	adds	r4, r7, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	0019      	movs	r1, r3
 800124a:	2019      	movs	r0, #25
 800124c:	f7ff f9f8 	bl	8000640 <SD_SendCmd>
 8001250:	0003      	movs	r3, r0
 8001252:	7023      	strb	r3, [r4, #0]
    if (response != 0x00) {
 8001254:	2319      	movs	r3, #25
 8001256:	18fb      	adds	r3, r7, r3
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d100      	bne.n	8001260 <SD_WriteMultiBlock+0x60>
 800125e:	e096      	b.n	800138e <SD_WriteMultiBlock+0x18e>
        SD_CS_HIGH;
 8001260:	23a0      	movs	r3, #160	; 0xa0
 8001262:	05db      	lsls	r3, r3, #23
 8001264:	2201      	movs	r2, #1
 8001266:	2110      	movs	r1, #16
 8001268:	0018      	movs	r0, r3
 800126a:	f001 f9c5 	bl	80025f8 <HAL_GPIO_WritePin>
        return response; // SD_CMD_WRITE_SINGLE_BLOCK command returns bad response
 800126e:	2319      	movs	r3, #25
 8001270:	18fb      	adds	r3, r7, r3
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	e09e      	b.n	80013b4 <SD_WriteMultiBlock+0x1b4>


        while(count)
        {
            //wait for ready
             wait = 0; response = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
 800127a:	2319      	movs	r3, #25
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
             while (++wait <= 0x1ff && response != 0xff) response = SD_SendRecv(0xff);
 8001282:	e006      	b.n	8001292 <SD_WriteMultiBlock+0x92>
 8001284:	2319      	movs	r3, #25
 8001286:	18fc      	adds	r4, r7, r3
 8001288:	20ff      	movs	r0, #255	; 0xff
 800128a:	f7ff f9b3 	bl	80005f4 <SD_SendRecv>
 800128e:	0003      	movs	r3, r0
 8001290:	7023      	strb	r3, [r4, #0]
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3301      	adds	r3, #1
 8001296:	61fb      	str	r3, [r7, #28]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	4a49      	ldr	r2, [pc, #292]	; (80013c0 <SD_WriteMultiBlock+0x1c0>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d804      	bhi.n	80012aa <SD_WriteMultiBlock+0xaa>
 80012a0:	2319      	movs	r3, #25
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2bff      	cmp	r3, #255	; 0xff
 80012a8:	d1ec      	bne.n	8001284 <SD_WriteMultiBlock+0x84>
             if (wait >= 0x1ff)
 80012aa:	69fa      	ldr	r2, [r7, #28]
 80012ac:	23ff      	movs	r3, #255	; 0xff
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d908      	bls.n	80012c6 <SD_WriteMultiBlock+0xc6>
             {
                 SD_CS_HIGH;
 80012b4:	23a0      	movs	r3, #160	; 0xa0
 80012b6:	05db      	lsls	r3, r3, #23
 80012b8:	2201      	movs	r2, #1
 80012ba:	2110      	movs	r1, #16
 80012bc:	0018      	movs	r0, r3
 80012be:	f001 f99b 	bl	80025f8 <HAL_GPIO_WritePin>
                 return 0xff;
 80012c2:	23ff      	movs	r3, #255	; 0xff
 80012c4:	e076      	b.n	80013b4 <SD_WriteMultiBlock+0x1b4>
             }

            // Write start token
            response = SD_SendRecv(SD_TOKEN_STARTBLK_WRITE_MULTI);
 80012c6:	2319      	movs	r3, #25
 80012c8:	18fc      	adds	r4, r7, r3
 80012ca:	20fc      	movs	r0, #252	; 0xfc
 80012cc:	f7ff f992 	bl	80005f4 <SD_SendRecv>
 80012d0:	0003      	movs	r3, r0
 80012d2:	7023      	strb	r3, [r4, #0]

            // Write 512 bytes of sector
            for (i = 0; i < 512; i++)
 80012d4:	231a      	movs	r3, #26
 80012d6:	18fb      	adds	r3, r7, r3
 80012d8:	2200      	movs	r2, #0
 80012da:	801a      	strh	r2, [r3, #0]
 80012dc:	e00f      	b.n	80012fe <SD_WriteMultiBlock+0xfe>
                SD_SendRecv(buff[i]);
 80012de:	231a      	movs	r3, #26
 80012e0:	18fb      	adds	r3, r7, r3
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	68ba      	ldr	r2, [r7, #8]
 80012e6:	18d3      	adds	r3, r2, r3
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	0018      	movs	r0, r3
 80012ec:	f7ff f982 	bl	80005f4 <SD_SendRecv>
            for (i = 0; i < 512; i++)
 80012f0:	231a      	movs	r3, #26
 80012f2:	18fb      	adds	r3, r7, r3
 80012f4:	881a      	ldrh	r2, [r3, #0]
 80012f6:	231a      	movs	r3, #26
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	3201      	adds	r2, #1
 80012fc:	801a      	strh	r2, [r3, #0]
 80012fe:	231a      	movs	r3, #26
 8001300:	18fb      	adds	r3, r7, r3
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	4a2e      	ldr	r2, [pc, #184]	; (80013c0 <SD_WriteMultiBlock+0x1c0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d9e9      	bls.n	80012de <SD_WriteMultiBlock+0xde>
            // send 2 byte CRC
            SD_CRC16_cmp = CRC16_buf(buff, 512);
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	009a      	lsls	r2, r3, #2
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	0011      	movs	r1, r2
 8001312:	0018      	movs	r0, r3
 8001314:	f7ff f944 	bl	80005a0 <CRC16_buf>
 8001318:	0003      	movs	r3, r0
 800131a:	001a      	movs	r2, r3
 800131c:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <SD_WriteMultiBlock+0x1c4>)
 800131e:	801a      	strh	r2, [r3, #0]
            SD_SendRecv(SD_CRC16_cmp >> 8) ;
 8001320:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <SD_WriteMultiBlock+0x1c4>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	b29b      	uxth	r3, r3
 8001328:	b2db      	uxtb	r3, r3
 800132a:	0018      	movs	r0, r3
 800132c:	f7ff f962 	bl	80005f4 <SD_SendRecv>
            SD_SendRecv(SD_CRC16_cmp & 0xff);
 8001330:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <SD_WriteMultiBlock+0x1c4>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	0018      	movs	r0, r3
 8001338:	f7ff f95c 	bl	80005f4 <SD_SendRecv>

            // read data respond token
            response = SD_SendRecv(0xff);
 800133c:	2319      	movs	r3, #25
 800133e:	18fc      	adds	r4, r7, r3
 8001340:	20ff      	movs	r0, #255	; 0xff
 8001342:	f7ff f957 	bl	80005f4 <SD_SendRecv>
 8001346:	0003      	movs	r3, r0
 8001348:	7023      	strb	r3, [r4, #0]
            status = (response & 0x0F) >> 1;
 800134a:	2319      	movs	r3, #25
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	105b      	asrs	r3, r3, #1
 8001352:	b2da      	uxtb	r2, r3
 8001354:	2313      	movs	r3, #19
 8001356:	18fb      	adds	r3, r7, r3
 8001358:	2107      	movs	r1, #7
 800135a:	400a      	ands	r2, r1
 800135c:	701a      	strb	r2, [r3, #0]
            switch(status)
 800135e:	2313      	movs	r3, #19
 8001360:	18fb      	adds	r3, r7, r3
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b05      	cmp	r3, #5
 8001366:	d004      	beq.n	8001372 <SD_WriteMultiBlock+0x172>
 8001368:	2b06      	cmp	r3, #6
 800136a:	d004      	beq.n	8001376 <SD_WriteMultiBlock+0x176>
 800136c:	2b02      	cmp	r3, #2
 800136e:	d004      	beq.n	800137a <SD_WriteMultiBlock+0x17a>
                case 6:
                    SOS_DEBUG("Data Rejected due to a Write Error\r\n");
                    break;
                default:
                    SOS_DEBUG("Write block with unknow error\r\n");
                    break;
 8001370:	e004      	b.n	800137c <SD_WriteMultiBlock+0x17c>
                    break;
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	e002      	b.n	800137c <SD_WriteMultiBlock+0x17c>
                    break;
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	e000      	b.n	800137c <SD_WriteMultiBlock+0x17c>
                    break;
 800137a:	46c0      	nop			; (mov r8, r8)
            }

            buff += 512;
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	2280      	movs	r2, #128	; 0x80
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	4694      	mov	ip, r2
 8001384:	4463      	add	r3, ip
 8001386:	60bb      	str	r3, [r7, #8]
            count --;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	3b01      	subs	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
        while(count)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d000      	beq.n	8001396 <SD_WriteMultiBlock+0x196>
 8001394:	e76f      	b.n	8001276 <SD_WriteMultiBlock+0x76>
//        SD_CS_HIGH;
//        return 0xff;
//    }

    // send byte stop transmission
    response = SD_SendRecv(SD_TOKEN_STOP_MULTI_WRITE);
 8001396:	2319      	movs	r3, #25
 8001398:	18fc      	adds	r4, r7, r3
 800139a:	20fd      	movs	r0, #253	; 0xfd
 800139c:	f7ff f92a 	bl	80005f4 <SD_SendRecv>
 80013a0:	0003      	movs	r3, r0
 80013a2:	7023      	strb	r3, [r4, #0]
    else
    {
        SOS_DEBUG("Write multi block fail. Number blocks written = blkWritten\r\n");
    }
#endif
    SD_CS_HIGH;
 80013a4:	23a0      	movs	r3, #160	; 0xa0
 80013a6:	05db      	lsls	r3, r3, #23
 80013a8:	2201      	movs	r2, #1
 80013aa:	2110      	movs	r1, #16
 80013ac:	0018      	movs	r0, r3
 80013ae:	f001 f923 	bl	80025f8 <HAL_GPIO_WritePin>
    return 0;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	0018      	movs	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b009      	add	sp, #36	; 0x24
 80013ba:	bd90      	pop	{r4, r7, pc}
 80013bc:	2000009c 	.word	0x2000009c
 80013c0:	000001ff 	.word	0x000001ff
 80013c4:	20000100 	.word	0x20000100

080013c8 <SD_ReadMultiBlock>:
// return:
// 0x00 -- write OK
// 0x01..0xfe -- error response from CMD24
// 0xff -- timeout
uint8_t SD_ReadMultiBlock(uint32_t startBlkAddr, uint8_t* buff, uint32_t numsBlk)
{
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
    uint32_t   wait;
    uint16_t   i;
    uint8_t    response;
    uint32_t   count = numsBlk;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	617b      	str	r3, [r7, #20]

    SD_CS_LOW; // pull CS to low
 80013d8:	23a0      	movs	r3, #160	; 0xa0
 80013da:	05db      	lsls	r3, r3, #23
 80013dc:	2200      	movs	r2, #0
 80013de:	2110      	movs	r1, #16
 80013e0:	0018      	movs	r0, r3
 80013e2:	f001 f909 	bl	80025f8 <HAL_GPIO_WritePin>

    if (SD_CardType != SD_HIGH_CAPACITY_SD_CARD) startBlkAddr <<= 9; // Convert block number to byte offset
 80013e6:	4b5b      	ldr	r3, [pc, #364]	; (8001554 <SD_ReadMultiBlock+0x18c>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	d002      	beq.n	80013f4 <SD_ReadMultiBlock+0x2c>
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	025b      	lsls	r3, r3, #9
 80013f2:	60fb      	str	r3, [r7, #12]
    response = SD_SendCmd(SD_CMD_READ_MULT_BLOCK,startBlkAddr); // CMD17
 80013f4:	2319      	movs	r3, #25
 80013f6:	18fc      	adds	r4, r7, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	0019      	movs	r1, r3
 80013fc:	2012      	movs	r0, #18
 80013fe:	f7ff f91f 	bl	8000640 <SD_SendCmd>
 8001402:	0003      	movs	r3, r0
 8001404:	7023      	strb	r3, [r4, #0]
    if (response != 0x00) {
 8001406:	2319      	movs	r3, #25
 8001408:	18fb      	adds	r3, r7, r3
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d100      	bne.n	8001412 <SD_ReadMultiBlock+0x4a>
 8001410:	e081      	b.n	8001516 <SD_ReadMultiBlock+0x14e>
        // Something wrong happened, fill buffer with zeroes
        for (i = 0; i < 512; i++) buff[i] = 0;
 8001412:	231a      	movs	r3, #26
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	2200      	movs	r2, #0
 8001418:	801a      	strh	r2, [r3, #0]
 800141a:	e00d      	b.n	8001438 <SD_ReadMultiBlock+0x70>
 800141c:	231a      	movs	r3, #26
 800141e:	18fb      	adds	r3, r7, r3
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	18d3      	adds	r3, r2, r3
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
 800142a:	231a      	movs	r3, #26
 800142c:	18fb      	adds	r3, r7, r3
 800142e:	881a      	ldrh	r2, [r3, #0]
 8001430:	231a      	movs	r3, #26
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	3201      	adds	r2, #1
 8001436:	801a      	strh	r2, [r3, #0]
 8001438:	231a      	movs	r3, #26
 800143a:	18fb      	adds	r3, r7, r3
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	4a46      	ldr	r2, [pc, #280]	; (8001558 <SD_ReadMultiBlock+0x190>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d9eb      	bls.n	800141c <SD_ReadMultiBlock+0x54>
        return response; // SD_CMD_READ_SINGLE_BLOCK command returns bad response
 8001444:	2319      	movs	r3, #25
 8001446:	18fb      	adds	r3, r7, r3
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	e07e      	b.n	800154a <SD_ReadMultiBlock+0x182>
    } else {
        while(count)
        {
            wait = 0; response = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	2319      	movs	r3, #25
 8001452:	18fb      	adds	r3, r7, r3
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
            while (++wait <= 0x1ff && response != 0xfe) response = SD_SendRecv(0xff);
 8001458:	e006      	b.n	8001468 <SD_ReadMultiBlock+0xa0>
 800145a:	2319      	movs	r3, #25
 800145c:	18fc      	adds	r4, r7, r3
 800145e:	20ff      	movs	r0, #255	; 0xff
 8001460:	f7ff f8c8 	bl	80005f4 <SD_SendRecv>
 8001464:	0003      	movs	r3, r0
 8001466:	7023      	strb	r3, [r4, #0]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	3301      	adds	r3, #1
 800146c:	61fb      	str	r3, [r7, #28]
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	4a39      	ldr	r2, [pc, #228]	; (8001558 <SD_ReadMultiBlock+0x190>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d804      	bhi.n	8001480 <SD_ReadMultiBlock+0xb8>
 8001476:	2319      	movs	r3, #25
 8001478:	18fb      	adds	r3, r7, r3
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2bfe      	cmp	r3, #254	; 0xfe
 800147e:	d1ec      	bne.n	800145a <SD_ReadMultiBlock+0x92>
            if (wait >= 0x1ff) return 0xff;
 8001480:	69fa      	ldr	r2, [r7, #28]
 8001482:	23ff      	movs	r3, #255	; 0xff
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	429a      	cmp	r2, r3
 8001488:	d901      	bls.n	800148e <SD_ReadMultiBlock+0xc6>
 800148a:	23ff      	movs	r3, #255	; 0xff
 800148c:	e05d      	b.n	800154a <SD_ReadMultiBlock+0x182>

            // Read 512 bytes of sector
            for (i = 0; i < 512; i++) buff[i] = SD_SendRecv(0xff);
 800148e:	231a      	movs	r3, #26
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	2200      	movs	r2, #0
 8001494:	801a      	strh	r2, [r3, #0]
 8001496:	e010      	b.n	80014ba <SD_ReadMultiBlock+0xf2>
 8001498:	231a      	movs	r3, #26
 800149a:	18fb      	adds	r3, r7, r3
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	18d4      	adds	r4, r2, r3
 80014a2:	20ff      	movs	r0, #255	; 0xff
 80014a4:	f7ff f8a6 	bl	80005f4 <SD_SendRecv>
 80014a8:	0003      	movs	r3, r0
 80014aa:	7023      	strb	r3, [r4, #0]
 80014ac:	231a      	movs	r3, #26
 80014ae:	18fb      	adds	r3, r7, r3
 80014b0:	881a      	ldrh	r2, [r3, #0]
 80014b2:	231a      	movs	r3, #26
 80014b4:	18fb      	adds	r3, r7, r3
 80014b6:	3201      	adds	r2, #1
 80014b8:	801a      	strh	r2, [r3, #0]
 80014ba:	231a      	movs	r3, #26
 80014bc:	18fb      	adds	r3, r7, r3
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	4a25      	ldr	r2, [pc, #148]	; (8001558 <SD_ReadMultiBlock+0x190>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d9e8      	bls.n	8001498 <SD_ReadMultiBlock+0xd0>

            // Receive 16-bit CRC (some cards demand this)
            SD_CRC16_rcv  = SD_SendRecv(0xff) << 8;
 80014c6:	20ff      	movs	r0, #255	; 0xff
 80014c8:	f7ff f894 	bl	80005f4 <SD_SendRecv>
 80014cc:	0003      	movs	r3, r0
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	021b      	lsls	r3, r3, #8
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	4b21      	ldr	r3, [pc, #132]	; (800155c <SD_ReadMultiBlock+0x194>)
 80014d6:	801a      	strh	r2, [r3, #0]
            SD_CRC16_rcv |= SD_SendRecv(0xff);
 80014d8:	20ff      	movs	r0, #255	; 0xff
 80014da:	f7ff f88b 	bl	80005f4 <SD_SendRecv>
 80014de:	0003      	movs	r3, r0
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <SD_ReadMultiBlock+0x194>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	4b1c      	ldr	r3, [pc, #112]	; (800155c <SD_ReadMultiBlock+0x194>)
 80014ec:	801a      	strh	r2, [r3, #0]

            // // Calculate CRC16 of received buffer
            SD_CRC16_cmp = CRC16_buf(&buff[0],512);
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	009a      	lsls	r2, r3, #2
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	0011      	movs	r1, r2
 80014f6:	0018      	movs	r0, r3
 80014f8:	f7ff f852 	bl	80005a0 <CRC16_buf>
 80014fc:	0003      	movs	r3, r0
 80014fe:	001a      	movs	r2, r3
 8001500:	4b17      	ldr	r3, [pc, #92]	; (8001560 <SD_ReadMultiBlock+0x198>)
 8001502:	801a      	strh	r2, [r3, #0]
            {
                // TODO: may be break here
                SOS_DEBUG("CRC error when read block\r\n");
            }

            buff += 512;
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	2280      	movs	r2, #128	; 0x80
 8001508:	0092      	lsls	r2, r2, #2
 800150a:	4694      	mov	ip, r2
 800150c:	4463      	add	r3, ip
 800150e:	60bb      	str	r3, [r7, #8]
            count --;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	3b01      	subs	r3, #1
 8001514:	617b      	str	r3, [r7, #20]
        while(count)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d197      	bne.n	800144c <SD_ReadMultiBlock+0x84>
        }
    }

    response = SD_SendCmd(SD_CMD_STOP_TRANSMISSION, 0x00);
 800151c:	2319      	movs	r3, #25
 800151e:	18fc      	adds	r4, r7, r3
 8001520:	2100      	movs	r1, #0
 8001522:	200c      	movs	r0, #12
 8001524:	f7ff f88c 	bl	8000640 <SD_SendCmd>
 8001528:	0003      	movs	r3, r0
 800152a:	7023      	strb	r3, [r4, #0]
    uint8_t resp = SD_SendRecv(0xff);
 800152c:	2313      	movs	r3, #19
 800152e:	18fc      	adds	r4, r7, r3
 8001530:	20ff      	movs	r0, #255	; 0xff
 8001532:	f7ff f85f 	bl	80005f4 <SD_SendRecv>
 8001536:	0003      	movs	r3, r0
 8001538:	7023      	strb	r3, [r4, #0]
    SD_CS_HIGH; // pull CS to high
 800153a:	23a0      	movs	r3, #160	; 0xa0
 800153c:	05db      	lsls	r3, r3, #23
 800153e:	2201      	movs	r2, #1
 8001540:	2110      	movs	r1, #16
 8001542:	0018      	movs	r0, r3
 8001544:	f001 f858 	bl	80025f8 <HAL_GPIO_WritePin>
    return 0;
 8001548:	2300      	movs	r3, #0
}
 800154a:	0018      	movs	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	b009      	add	sp, #36	; 0x24
 8001550:	bd90      	pop	{r4, r7, pc}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	2000009c 	.word	0x2000009c
 8001558:	000001ff 	.word	0x000001ff
 800155c:	200000ec 	.word	0x200000ec
 8001560:	20000100 	.word	0x20000100

08001564 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <HAL_Init+0x24>)
 800156a:	4a07      	ldr	r2, [pc, #28]	; (8001588 <HAL_Init+0x24>)
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	2140      	movs	r1, #64	; 0x40
 8001570:	430a      	orrs	r2, r1
 8001572:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001574:	2000      	movs	r0, #0
 8001576:	f000 f809 	bl	800158c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800157a:	f009 fa51 	bl	800aa20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	0018      	movs	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	40022000 	.word	0x40022000

0800158c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_InitTick+0x38>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	23fa      	movs	r3, #250	; 0xfa
 800159a:	0099      	lsls	r1, r3, #2
 800159c:	0010      	movs	r0, r2
 800159e:	f7fe fdb3 	bl	8000108 <__udivsi3>
 80015a2:	0003      	movs	r3, r0
 80015a4:	0018      	movs	r0, r3
 80015a6:	f000 f909 	bl	80017bc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	2301      	movs	r3, #1
 80015ae:	425b      	negs	r3, r3
 80015b0:	2200      	movs	r2, #0
 80015b2:	0018      	movs	r0, r3
 80015b4:	f000 f8c6 	bl	8001744 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	0018      	movs	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	b002      	add	sp, #8
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	20000000 	.word	0x20000000

080015c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  uwTick++;
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <HAL_IncTick+0x14>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	4b02      	ldr	r3, [pc, #8]	; (80015dc <HAL_IncTick+0x14>)
 80015d4:	601a      	str	r2, [r3, #0]
}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000118 	.word	0x20000118

080015e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  return uwTick;
 80015e4:	4b02      	ldr	r3, [pc, #8]	; (80015f0 <HAL_GetTick+0x10>)
 80015e6:	681b      	ldr	r3, [r3, #0]
}
 80015e8:	0018      	movs	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	20000118 	.word	0x20000118

080015f4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	0002      	movs	r2, r0
 80015fc:	1dfb      	adds	r3, r7, #7
 80015fe:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <NVIC_EnableIRQ+0x28>)
 8001602:	1dfa      	adds	r2, r7, #7
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	0011      	movs	r1, r2
 8001608:	221f      	movs	r2, #31
 800160a:	400a      	ands	r2, r1
 800160c:	2101      	movs	r1, #1
 800160e:	4091      	lsls	r1, r2
 8001610:	000a      	movs	r2, r1
 8001612:	601a      	str	r2, [r3, #0]
}
 8001614:	46c0      	nop			; (mov r8, r8)
 8001616:	46bd      	mov	sp, r7
 8001618:	b002      	add	sp, #8
 800161a:	bd80      	pop	{r7, pc}
 800161c:	e000e100 	.word	0xe000e100

08001620 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001620:	b5b0      	push	{r4, r5, r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	0002      	movs	r2, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	1dfb      	adds	r3, r7, #7
 800162c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800162e:	1dfb      	adds	r3, r7, #7
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b7f      	cmp	r3, #127	; 0x7f
 8001634:	d932      	bls.n	800169c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001636:	4c2f      	ldr	r4, [pc, #188]	; (80016f4 <NVIC_SetPriority+0xd4>)
 8001638:	1dfb      	adds	r3, r7, #7
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	001a      	movs	r2, r3
 800163e:	230f      	movs	r3, #15
 8001640:	4013      	ands	r3, r2
 8001642:	3b08      	subs	r3, #8
 8001644:	0899      	lsrs	r1, r3, #2
 8001646:	4a2b      	ldr	r2, [pc, #172]	; (80016f4 <NVIC_SetPriority+0xd4>)
 8001648:	1dfb      	adds	r3, r7, #7
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	0018      	movs	r0, r3
 800164e:	230f      	movs	r3, #15
 8001650:	4003      	ands	r3, r0
 8001652:	3b08      	subs	r3, #8
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	3306      	adds	r3, #6
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	18d3      	adds	r3, r2, r3
 800165c:	3304      	adds	r3, #4
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	1dfa      	adds	r2, r7, #7
 8001662:	7812      	ldrb	r2, [r2, #0]
 8001664:	0010      	movs	r0, r2
 8001666:	2203      	movs	r2, #3
 8001668:	4002      	ands	r2, r0
 800166a:	00d2      	lsls	r2, r2, #3
 800166c:	20ff      	movs	r0, #255	; 0xff
 800166e:	4090      	lsls	r0, r2
 8001670:	0002      	movs	r2, r0
 8001672:	43d2      	mvns	r2, r2
 8001674:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	019b      	lsls	r3, r3, #6
 800167a:	20ff      	movs	r0, #255	; 0xff
 800167c:	4018      	ands	r0, r3
 800167e:	1dfb      	adds	r3, r7, #7
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	001d      	movs	r5, r3
 8001684:	2303      	movs	r3, #3
 8001686:	402b      	ands	r3, r5
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	4098      	lsls	r0, r3
 800168c:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800168e:	431a      	orrs	r2, r3
 8001690:	1d8b      	adds	r3, r1, #6
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	18e3      	adds	r3, r4, r3
 8001696:	3304      	adds	r3, #4
 8001698:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800169a:	e027      	b.n	80016ec <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800169c:	4c16      	ldr	r4, [pc, #88]	; (80016f8 <NVIC_SetPriority+0xd8>)
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	b25b      	sxtb	r3, r3
 80016a4:	089b      	lsrs	r3, r3, #2
 80016a6:	4914      	ldr	r1, [pc, #80]	; (80016f8 <NVIC_SetPriority+0xd8>)
 80016a8:	1dfa      	adds	r2, r7, #7
 80016aa:	7812      	ldrb	r2, [r2, #0]
 80016ac:	b252      	sxtb	r2, r2
 80016ae:	0892      	lsrs	r2, r2, #2
 80016b0:	32c0      	adds	r2, #192	; 0xc0
 80016b2:	0092      	lsls	r2, r2, #2
 80016b4:	5852      	ldr	r2, [r2, r1]
 80016b6:	1df9      	adds	r1, r7, #7
 80016b8:	7809      	ldrb	r1, [r1, #0]
 80016ba:	0008      	movs	r0, r1
 80016bc:	2103      	movs	r1, #3
 80016be:	4001      	ands	r1, r0
 80016c0:	00c9      	lsls	r1, r1, #3
 80016c2:	20ff      	movs	r0, #255	; 0xff
 80016c4:	4088      	lsls	r0, r1
 80016c6:	0001      	movs	r1, r0
 80016c8:	43c9      	mvns	r1, r1
 80016ca:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	0192      	lsls	r2, r2, #6
 80016d0:	20ff      	movs	r0, #255	; 0xff
 80016d2:	4010      	ands	r0, r2
 80016d4:	1dfa      	adds	r2, r7, #7
 80016d6:	7812      	ldrb	r2, [r2, #0]
 80016d8:	0015      	movs	r5, r2
 80016da:	2203      	movs	r2, #3
 80016dc:	402a      	ands	r2, r5
 80016de:	00d2      	lsls	r2, r2, #3
 80016e0:	4090      	lsls	r0, r2
 80016e2:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016e4:	430a      	orrs	r2, r1
 80016e6:	33c0      	adds	r3, #192	; 0xc0
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	511a      	str	r2, [r3, r4]
}
 80016ec:	46c0      	nop			; (mov r8, r8)
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b002      	add	sp, #8
 80016f2:	bdb0      	pop	{r4, r5, r7, pc}
 80016f4:	e000ed00 	.word	0xe000ed00
 80016f8:	e000e100 	.word	0xe000e100

080016fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	4a0c      	ldr	r2, [pc, #48]	; (800173c <SysTick_Config+0x40>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170e:	2301      	movs	r3, #1
 8001710:	e010      	b.n	8001734 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <SysTick_Config+0x44>)
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	3a01      	subs	r2, #1
 8001718:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171a:	2301      	movs	r3, #1
 800171c:	425b      	negs	r3, r3
 800171e:	2103      	movs	r1, #3
 8001720:	0018      	movs	r0, r3
 8001722:	f7ff ff7d 	bl	8001620 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <SysTick_Config+0x44>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <SysTick_Config+0x44>)
 800172e:	2207      	movs	r2, #7
 8001730:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001732:	2300      	movs	r3, #0
}
 8001734:	0018      	movs	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	b002      	add	sp, #8
 800173a:	bd80      	pop	{r7, pc}
 800173c:	00ffffff 	.word	0x00ffffff
 8001740:	e000e010 	.word	0xe000e010

08001744 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	230f      	movs	r3, #15
 8001750:	18fb      	adds	r3, r7, r3
 8001752:	1c02      	adds	r2, r0, #0
 8001754:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	2b03      	cmp	r3, #3
 800175a:	d904      	bls.n	8001766 <HAL_NVIC_SetPriority+0x22>
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <HAL_NVIC_SetPriority+0x3c>)
 800175e:	2198      	movs	r1, #152	; 0x98
 8001760:	0018      	movs	r0, r3
 8001762:	f008 ff99 	bl	800a698 <assert_failed>
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	230f      	movs	r3, #15
 800176a:	18fb      	adds	r3, r7, r3
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	b25b      	sxtb	r3, r3
 8001770:	0011      	movs	r1, r2
 8001772:	0018      	movs	r0, r3
 8001774:	f7ff ff54 	bl	8001620 <NVIC_SetPriority>
}
 8001778:	46c0      	nop			; (mov r8, r8)
 800177a:	46bd      	mov	sp, r7
 800177c:	b004      	add	sp, #16
 800177e:	bd80      	pop	{r7, pc}
 8001780:	0800c058 	.word	0x0800c058

08001784 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	0002      	movs	r2, r0
 800178c:	1dfb      	adds	r3, r7, #7
 800178e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001790:	1dfb      	adds	r3, r7, #7
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b7f      	cmp	r3, #127	; 0x7f
 8001796:	d904      	bls.n	80017a2 <HAL_NVIC_EnableIRQ+0x1e>
 8001798:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <HAL_NVIC_EnableIRQ+0x34>)
 800179a:	21a8      	movs	r1, #168	; 0xa8
 800179c:	0018      	movs	r0, r3
 800179e:	f008 ff7b 	bl	800a698 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a2:	1dfb      	adds	r3, r7, #7
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	b25b      	sxtb	r3, r3
 80017a8:	0018      	movs	r0, r3
 80017aa:	f7ff ff23 	bl	80015f4 <NVIC_EnableIRQ>
}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	46bd      	mov	sp, r7
 80017b2:	b002      	add	sp, #8
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	0800c058 	.word	0x0800c058

080017bc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	0018      	movs	r0, r3
 80017c8:	f7ff ff98 	bl	80016fc <SysTick_Config>
 80017cc:	0003      	movs	r3, r0
}
 80017ce:	0018      	movs	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b002      	add	sp, #8
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d009      	beq.n	80017fa <HAL_SYSTICK_CLKSourceConfig+0x22>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d006      	beq.n	80017fa <HAL_SYSTICK_CLKSourceConfig+0x22>
 80017ec:	2395      	movs	r3, #149	; 0x95
 80017ee:	005a      	lsls	r2, r3, #1
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80017f2:	0011      	movs	r1, r2
 80017f4:	0018      	movs	r0, r3
 80017f6:	f008 ff4f 	bl	800a698 <assert_failed>
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d106      	bne.n	800180e <HAL_SYSTICK_CLKSourceConfig+0x36>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_SYSTICK_CLKSourceConfig+0x50>)
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <HAL_SYSTICK_CLKSourceConfig+0x50>)
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	2104      	movs	r1, #4
 8001808:	430a      	orrs	r2, r1
 800180a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800180c:	e005      	b.n	800181a <HAL_SYSTICK_CLKSourceConfig+0x42>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_SYSTICK_CLKSourceConfig+0x50>)
 8001810:	4a05      	ldr	r2, [pc, #20]	; (8001828 <HAL_SYSTICK_CLKSourceConfig+0x50>)
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	2104      	movs	r1, #4
 8001816:	438a      	bics	r2, r1
 8001818:	601a      	str	r2, [r3, #0]
}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	46bd      	mov	sp, r7
 800181e:	b002      	add	sp, #8
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	0800c058 	.word	0x0800c058
 8001828:	e000e010 	.word	0xe000e010

0800182c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001830:	f000 f803 	bl	800183a <HAL_SYSTICK_Callback>
}
 8001834:	46c0      	nop			; (mov r8, r8)
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e1b4      	b.n	8001bc4 <HAL_DMA_Init+0x380>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4abf      	ldr	r2, [pc, #764]	; (8001b5c <HAL_DMA_Init+0x318>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d022      	beq.n	80018aa <HAL_DMA_Init+0x66>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4abd      	ldr	r2, [pc, #756]	; (8001b60 <HAL_DMA_Init+0x31c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d01d      	beq.n	80018aa <HAL_DMA_Init+0x66>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4abc      	ldr	r2, [pc, #752]	; (8001b64 <HAL_DMA_Init+0x320>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d018      	beq.n	80018aa <HAL_DMA_Init+0x66>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4aba      	ldr	r2, [pc, #744]	; (8001b68 <HAL_DMA_Init+0x324>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d013      	beq.n	80018aa <HAL_DMA_Init+0x66>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4ab9      	ldr	r2, [pc, #740]	; (8001b6c <HAL_DMA_Init+0x328>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d00e      	beq.n	80018aa <HAL_DMA_Init+0x66>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4ab7      	ldr	r2, [pc, #732]	; (8001b70 <HAL_DMA_Init+0x32c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d009      	beq.n	80018aa <HAL_DMA_Init+0x66>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4ab6      	ldr	r2, [pc, #728]	; (8001b74 <HAL_DMA_Init+0x330>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d004      	beq.n	80018aa <HAL_DMA_Init+0x66>
 80018a0:	4bb5      	ldr	r3, [pc, #724]	; (8001b78 <HAL_DMA_Init+0x334>)
 80018a2:	2196      	movs	r1, #150	; 0x96
 80018a4:	0018      	movs	r0, r3
 80018a6:	f008 fef7 	bl	800a698 <assert_failed>
  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d02c      	beq.n	800190c <HAL_DMA_Init+0xc8>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d028      	beq.n	800190c <HAL_DMA_Init+0xc8>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d024      	beq.n	800190c <HAL_DMA_Init+0xc8>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d020      	beq.n	800190c <HAL_DMA_Init+0xc8>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	d01c      	beq.n	800190c <HAL_DMA_Init+0xc8>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b05      	cmp	r3, #5
 80018d8:	d018      	beq.n	800190c <HAL_DMA_Init+0xc8>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d014      	beq.n	800190c <HAL_DMA_Init+0xc8>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b07      	cmp	r3, #7
 80018e8:	d010      	beq.n	800190c <HAL_DMA_Init+0xc8>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d00c      	beq.n	800190c <HAL_DMA_Init+0xc8>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b09      	cmp	r3, #9
 80018f8:	d008      	beq.n	800190c <HAL_DMA_Init+0xc8>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b0b      	cmp	r3, #11
 8001900:	d004      	beq.n	800190c <HAL_DMA_Init+0xc8>
 8001902:	4b9d      	ldr	r3, [pc, #628]	; (8001b78 <HAL_DMA_Init+0x334>)
 8001904:	2197      	movs	r1, #151	; 0x97
 8001906:	0018      	movs	r0, r3
 8001908:	f008 fec6 	bl	800a698 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00e      	beq.n	8001932 <HAL_DMA_Init+0xee>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b10      	cmp	r3, #16
 800191a:	d00a      	beq.n	8001932 <HAL_DMA_Init+0xee>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	01db      	lsls	r3, r3, #7
 8001924:	429a      	cmp	r2, r3
 8001926:	d004      	beq.n	8001932 <HAL_DMA_Init+0xee>
 8001928:	4b93      	ldr	r3, [pc, #588]	; (8001b78 <HAL_DMA_Init+0x334>)
 800192a:	2198      	movs	r1, #152	; 0x98
 800192c:	0018      	movs	r0, r3
 800192e:	f008 feb3 	bl	800a698 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2b40      	cmp	r3, #64	; 0x40
 8001938:	d008      	beq.n	800194c <HAL_DMA_Init+0x108>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d004      	beq.n	800194c <HAL_DMA_Init+0x108>
 8001942:	4b8d      	ldr	r3, [pc, #564]	; (8001b78 <HAL_DMA_Init+0x334>)
 8001944:	2199      	movs	r1, #153	; 0x99
 8001946:	0018      	movs	r0, r3
 8001948:	f008 fea6 	bl	800a698 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	2b80      	cmp	r3, #128	; 0x80
 8001952:	d008      	beq.n	8001966 <HAL_DMA_Init+0x122>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d004      	beq.n	8001966 <HAL_DMA_Init+0x122>
 800195c:	4b86      	ldr	r3, [pc, #536]	; (8001b78 <HAL_DMA_Init+0x334>)
 800195e:	219a      	movs	r1, #154	; 0x9a
 8001960:	0018      	movs	r0, r3
 8001962:	f008 fe99 	bl	800a698 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d010      	beq.n	8001990 <HAL_DMA_Init+0x14c>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695a      	ldr	r2, [r3, #20]
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	429a      	cmp	r2, r3
 8001978:	d00a      	beq.n	8001990 <HAL_DMA_Init+0x14c>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	695a      	ldr	r2, [r3, #20]
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	429a      	cmp	r2, r3
 8001984:	d004      	beq.n	8001990 <HAL_DMA_Init+0x14c>
 8001986:	4b7c      	ldr	r3, [pc, #496]	; (8001b78 <HAL_DMA_Init+0x334>)
 8001988:	219b      	movs	r1, #155	; 0x9b
 800198a:	0018      	movs	r0, r3
 800198c:	f008 fe84 	bl	800a698 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d010      	beq.n	80019ba <HAL_DMA_Init+0x176>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	699a      	ldr	r2, [r3, #24]
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d00a      	beq.n	80019ba <HAL_DMA_Init+0x176>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699a      	ldr	r2, [r3, #24]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d004      	beq.n	80019ba <HAL_DMA_Init+0x176>
 80019b0:	4b71      	ldr	r3, [pc, #452]	; (8001b78 <HAL_DMA_Init+0x334>)
 80019b2:	219c      	movs	r1, #156	; 0x9c
 80019b4:	0018      	movs	r0, r3
 80019b6:	f008 fe6f 	bl	800a698 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d008      	beq.n	80019d4 <HAL_DMA_Init+0x190>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	2b20      	cmp	r3, #32
 80019c8:	d004      	beq.n	80019d4 <HAL_DMA_Init+0x190>
 80019ca:	4b6b      	ldr	r3, [pc, #428]	; (8001b78 <HAL_DMA_Init+0x334>)
 80019cc:	219d      	movs	r1, #157	; 0x9d
 80019ce:	0018      	movs	r0, r3
 80019d0:	f008 fe62 	bl	800a698 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d016      	beq.n	8001a0a <HAL_DMA_Init+0x1c6>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1a      	ldr	r2, [r3, #32]
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	015b      	lsls	r3, r3, #5
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d010      	beq.n	8001a0a <HAL_DMA_Init+0x1c6>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a1a      	ldr	r2, [r3, #32]
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	019b      	lsls	r3, r3, #6
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d00a      	beq.n	8001a0a <HAL_DMA_Init+0x1c6>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1a      	ldr	r2, [r3, #32]
 80019f8:	23c0      	movs	r3, #192	; 0xc0
 80019fa:	019b      	lsls	r3, r3, #6
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d004      	beq.n	8001a0a <HAL_DMA_Init+0x1c6>
 8001a00:	4b5d      	ldr	r3, [pc, #372]	; (8001b78 <HAL_DMA_Init+0x334>)
 8001a02:	219e      	movs	r1, #158	; 0x9e
 8001a04:	0018      	movs	r0, r3
 8001a06:	f008 fe47 	bl	800a698 <assert_failed>
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2225      	movs	r2, #37	; 0x25
 8001a0e:	5c9b      	ldrb	r3, [r3, r2]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d103      	bne.n	8001a1e <HAL_DMA_Init+0x1da>
  {
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2224      	movs	r2, #36	; 0x24
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	5499      	strb	r1, [r3, r2]
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2225      	movs	r2, #37	; 0x25
 8001a22:	2102      	movs	r1, #2
 8001a24:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4a52      	ldr	r2, [pc, #328]	; (8001b7c <HAL_DMA_Init+0x338>)
 8001a32:	4013      	ands	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	601a      	str	r2, [r3, #0]
  
  /* Write to DMA channel selection register */
  if (hdma->Instance == DMA1_Channel1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a3a      	ldr	r2, [pc, #232]	; (8001b5c <HAL_DMA_Init+0x318>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d10d      	bne.n	8001a92 <HAL_DMA_Init+0x24e>
  {
    /*Reset request selection for DMA1 Channel1*/
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C1S;
 8001a76:	4b42      	ldr	r3, [pc, #264]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001a78:	4a41      	ldr	r2, [pc, #260]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	210f      	movs	r1, #15
 8001a7e:	438a      	bics	r2, r1
 8001a80:	601a      	str	r2, [r3, #0]
    
    /* Configure request selection for DMA1 Channel1 */
    DMA1_CSELR->CSELR |= hdma->Init.Request;
 8001a82:	4a3f      	ldr	r2, [pc, #252]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001a84:	4b3e      	ldr	r3, [pc, #248]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001a86:	6819      	ldr	r1, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	e093      	b.n	8001bba <HAL_DMA_Init+0x376>
  }
  else if (hdma->Instance == DMA1_Channel2)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a32      	ldr	r2, [pc, #200]	; (8001b60 <HAL_DMA_Init+0x31c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d10e      	bne.n	8001aba <HAL_DMA_Init+0x276>
  {
    /*Reset request selection for DMA1 Channel2*/
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C2S;
 8001a9c:	4b38      	ldr	r3, [pc, #224]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001a9e:	4a38      	ldr	r2, [pc, #224]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001aa0:	6812      	ldr	r2, [r2, #0]
 8001aa2:	21f0      	movs	r1, #240	; 0xf0
 8001aa4:	438a      	bics	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]
    
    /* Configure request selection for DMA1 Channel2 */
    DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << 4U);
 8001aa8:	4a35      	ldr	r2, [pc, #212]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001aaa:	4b35      	ldr	r3, [pc, #212]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001aac:	6819      	ldr	r1, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	430b      	orrs	r3, r1
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	e07f      	b.n	8001bba <HAL_DMA_Init+0x376>
  }
  else if (hdma->Instance == DMA1_Channel3)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a29      	ldr	r2, [pc, #164]	; (8001b64 <HAL_DMA_Init+0x320>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d10e      	bne.n	8001ae2 <HAL_DMA_Init+0x29e>
  {
    /*Reset request selection for DMA1 Channel3*/
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C3S;
 8001ac4:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001ac6:	4a2e      	ldr	r2, [pc, #184]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	492e      	ldr	r1, [pc, #184]	; (8001b84 <HAL_DMA_Init+0x340>)
 8001acc:	400a      	ands	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]
    
    /* Configure request selection for DMA1 Channel3 */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 8U);
 8001ad0:	4a2b      	ldr	r2, [pc, #172]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001ad2:	4b2b      	ldr	r3, [pc, #172]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001ad4:	6819      	ldr	r1, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	021b      	lsls	r3, r3, #8
 8001adc:	430b      	orrs	r3, r1
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	e06b      	b.n	8001bba <HAL_DMA_Init+0x376>
  }
  else if (hdma->Instance == DMA1_Channel4)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a20      	ldr	r2, [pc, #128]	; (8001b68 <HAL_DMA_Init+0x324>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d10e      	bne.n	8001b0a <HAL_DMA_Init+0x2c6>
  {
    /*Reset request selection for DMA1 Channel4*/
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C4S;
 8001aec:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001aee:	4a24      	ldr	r2, [pc, #144]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	4925      	ldr	r1, [pc, #148]	; (8001b88 <HAL_DMA_Init+0x344>)
 8001af4:	400a      	ands	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]
    
    /* Configure request selection for DMA1 Channel4 */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 12U);
 8001af8:	4a21      	ldr	r2, [pc, #132]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001afa:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001afc:	6819      	ldr	r1, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	031b      	lsls	r3, r3, #12
 8001b04:	430b      	orrs	r3, r1
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	e057      	b.n	8001bba <HAL_DMA_Init+0x376>
  }
  else if (hdma->Instance == DMA1_Channel5)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a17      	ldr	r2, [pc, #92]	; (8001b6c <HAL_DMA_Init+0x328>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d10e      	bne.n	8001b32 <HAL_DMA_Init+0x2ee>
  {
    /*Reset request selection for DMA1 Channel5*/
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C5S;
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001b16:	4a1a      	ldr	r2, [pc, #104]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	491c      	ldr	r1, [pc, #112]	; (8001b8c <HAL_DMA_Init+0x348>)
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]
    
    /* Configure request selection for DMA1 Channel5 */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 16U);
 8001b20:	4a17      	ldr	r2, [pc, #92]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001b24:	6819      	ldr	r1, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	041b      	lsls	r3, r3, #16
 8001b2c:	430b      	orrs	r3, r1
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	e043      	b.n	8001bba <HAL_DMA_Init+0x376>
  }
#if !defined (STM32L011xx) && !defined (STM32L021xx)
  else if (hdma->Instance == DMA1_Channel6)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a0e      	ldr	r2, [pc, #56]	; (8001b70 <HAL_DMA_Init+0x32c>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d12b      	bne.n	8001b94 <HAL_DMA_Init+0x350>
  {
    /*Reset request selection for DMA1 Channel6*/
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C6S;
 8001b3c:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001b3e:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	4913      	ldr	r1, [pc, #76]	; (8001b90 <HAL_DMA_Init+0x34c>)
 8001b44:	400a      	ands	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]
    
    /* Configure request selection for DMA1 Channel6 */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 20U);
 8001b48:	4a0d      	ldr	r2, [pc, #52]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <HAL_DMA_Init+0x33c>)
 8001b4c:	6819      	ldr	r1, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	051b      	lsls	r3, r3, #20
 8001b54:	430b      	orrs	r3, r1
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	e02f      	b.n	8001bba <HAL_DMA_Init+0x376>
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	40020008 	.word	0x40020008
 8001b60:	4002001c 	.word	0x4002001c
 8001b64:	40020030 	.word	0x40020030
 8001b68:	40020044 	.word	0x40020044
 8001b6c:	40020058 	.word	0x40020058
 8001b70:	4002006c 	.word	0x4002006c
 8001b74:	40020080 	.word	0x40020080
 8001b78:	0800c094 	.word	0x0800c094
 8001b7c:	ffffc00f 	.word	0xffffc00f
 8001b80:	400200a8 	.word	0x400200a8
 8001b84:	fffff0ff 	.word	0xfffff0ff
 8001b88:	ffff0fff 	.word	0xffff0fff
 8001b8c:	fff0ffff 	.word	0xfff0ffff
 8001b90:	ff0fffff 	.word	0xff0fffff
  }
  else if (hdma->Instance == DMA1_Channel7)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0c      	ldr	r2, [pc, #48]	; (8001bcc <HAL_DMA_Init+0x388>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d10d      	bne.n	8001bba <HAL_DMA_Init+0x376>
  {
    /*Reset request selection for DMA1 Channel7*/
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C7S;
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <HAL_DMA_Init+0x38c>)
 8001ba0:	4a0b      	ldr	r2, [pc, #44]	; (8001bd0 <HAL_DMA_Init+0x38c>)
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	490b      	ldr	r1, [pc, #44]	; (8001bd4 <HAL_DMA_Init+0x390>)
 8001ba6:	400a      	ands	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]
    
    /* Configure request selection for DMA1 Channel7 */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 24U);
 8001baa:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <HAL_DMA_Init+0x38c>)
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <HAL_DMA_Init+0x38c>)
 8001bae:	6819      	ldr	r1, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	061b      	lsls	r3, r3, #24
 8001bb6:	430b      	orrs	r3, r1
 8001bb8:	6013      	str	r3, [r2, #0]
  }
#endif   
  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2225      	movs	r2, #37	; 0x25
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}  
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	b004      	add	sp, #16
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40020080 	.word	0x40020080
 8001bd0:	400200a8 	.word	0x400200a8
 8001bd4:	f0ffffff 	.word	0xf0ffffff

08001bd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdma);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2224      	movs	r2, #36	; 0x24
 8001bea:	5c9b      	ldrb	r3, [r3, r2]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_DMA_Start_IT+0x1c>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e045      	b.n	8001c80 <HAL_DMA_Start_IT+0xa8>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2224      	movs	r2, #36	; 0x24
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	5499      	strb	r1, [r3, r2]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2225      	movs	r2, #37	; 0x25
 8001c00:	2102      	movs	r1, #2
 8001c02:	5499      	strb	r1, [r3, r2]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_DMA_Start_IT+0x3a>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	4a1e      	ldr	r2, [pc, #120]	; (8001c88 <HAL_DMA_Start_IT+0xb0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d907      	bls.n	8001c22 <HAL_DMA_Start_IT+0x4a>
 8001c12:	23a0      	movs	r3, #160	; 0xa0
 8001c14:	33ff      	adds	r3, #255	; 0xff
 8001c16:	001a      	movs	r2, r3
 8001c18:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <HAL_DMA_Start_IT+0xb4>)
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f008 fd3b 	bl	800a698 <assert_failed>
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	438a      	bics	r2, r1
 8001c30:	601a      	str	r2, [r3, #0]
  
  /* Configure the source, destination address and the data length */  
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	68b9      	ldr	r1, [r7, #8]
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 fa13 	bl	8002064 <DMA_SetConfig>
  
  /* Enable the transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	6812      	ldr	r2, [r2, #0]
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	2102      	movs	r1, #2
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	601a      	str	r2, [r3, #0]

  /* Enable the Half transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	6812      	ldr	r2, [r2, #0]
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	2104      	movs	r1, #4
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	601a      	str	r2, [r3, #0]

  /* Enable the transfer Error interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	6812      	ldr	r2, [r2, #0]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	2108      	movs	r1, #8
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	601a      	str	r2, [r3, #0]
  
   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);   
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	2101      	movs	r1, #1
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;    
 8001c7e:	2300      	movs	r3, #0
} 
 8001c80:	0018      	movs	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b004      	add	sp, #16
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	0000ffff 	.word	0x0000ffff
 8001c8c:	0800c094 	.word	0x0800c094

08001c90 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{        
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8001c98:	4bb0      	ldr	r3, [pc, #704]	; (8001f5c <HAL_DMA_IRQHandler+0x2cc>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	0019      	movs	r1, r3
 8001ca2:	4baf      	ldr	r3, [pc, #700]	; (8001f60 <HAL_DMA_IRQHandler+0x2d0>)
 8001ca4:	4299      	cmp	r1, r3
 8001ca6:	d02e      	beq.n	8001d06 <HAL_DMA_IRQHandler+0x76>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	0019      	movs	r1, r3
 8001cae:	4bad      	ldr	r3, [pc, #692]	; (8001f64 <HAL_DMA_IRQHandler+0x2d4>)
 8001cb0:	4299      	cmp	r1, r3
 8001cb2:	d026      	beq.n	8001d02 <HAL_DMA_IRQHandler+0x72>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	0019      	movs	r1, r3
 8001cba:	4bab      	ldr	r3, [pc, #684]	; (8001f68 <HAL_DMA_IRQHandler+0x2d8>)
 8001cbc:	4299      	cmp	r1, r3
 8001cbe:	d01d      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x6c>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	0019      	movs	r1, r3
 8001cc6:	4ba9      	ldr	r3, [pc, #676]	; (8001f6c <HAL_DMA_IRQHandler+0x2dc>)
 8001cc8:	4299      	cmp	r1, r3
 8001cca:	d014      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0x66>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	0019      	movs	r1, r3
 8001cd2:	4ba7      	ldr	r3, [pc, #668]	; (8001f70 <HAL_DMA_IRQHandler+0x2e0>)
 8001cd4:	4299      	cmp	r1, r3
 8001cd6:	d00b      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x60>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	0019      	movs	r1, r3
 8001cde:	4ba5      	ldr	r3, [pc, #660]	; (8001f74 <HAL_DMA_IRQHandler+0x2e4>)
 8001ce0:	4299      	cmp	r1, r3
 8001ce2:	d102      	bne.n	8001cea <HAL_DMA_IRQHandler+0x5a>
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	041b      	lsls	r3, r3, #16
 8001ce8:	e00e      	b.n	8001d08 <HAL_DMA_IRQHandler+0x78>
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	051b      	lsls	r3, r3, #20
 8001cee:	e00b      	b.n	8001d08 <HAL_DMA_IRQHandler+0x78>
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	031b      	lsls	r3, r3, #12
 8001cf4:	e008      	b.n	8001d08 <HAL_DMA_IRQHandler+0x78>
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	e005      	b.n	8001d08 <HAL_DMA_IRQHandler+0x78>
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	e002      	b.n	8001d08 <HAL_DMA_IRQHandler+0x78>
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	e000      	b.n	8001d08 <HAL_DMA_IRQHandler+0x78>
 8001d06:	2308      	movs	r3, #8
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d05c      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x136>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2208      	movs	r2, #8
 8001d14:	4013      	ands	r3, r2
 8001d16:	d056      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x136>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	2108      	movs	r1, #8
 8001d24:	438a      	bics	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]
    
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001d28:	4a8c      	ldr	r2, [pc, #560]	; (8001f5c <HAL_DMA_IRQHandler+0x2cc>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	0019      	movs	r1, r3
 8001d30:	4b8b      	ldr	r3, [pc, #556]	; (8001f60 <HAL_DMA_IRQHandler+0x2d0>)
 8001d32:	4299      	cmp	r1, r3
 8001d34:	d02e      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x104>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	4b89      	ldr	r3, [pc, #548]	; (8001f64 <HAL_DMA_IRQHandler+0x2d4>)
 8001d3e:	4299      	cmp	r1, r3
 8001d40:	d026      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x100>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	0019      	movs	r1, r3
 8001d48:	4b87      	ldr	r3, [pc, #540]	; (8001f68 <HAL_DMA_IRQHandler+0x2d8>)
 8001d4a:	4299      	cmp	r1, r3
 8001d4c:	d01d      	beq.n	8001d8a <HAL_DMA_IRQHandler+0xfa>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	0019      	movs	r1, r3
 8001d54:	4b85      	ldr	r3, [pc, #532]	; (8001f6c <HAL_DMA_IRQHandler+0x2dc>)
 8001d56:	4299      	cmp	r1, r3
 8001d58:	d014      	beq.n	8001d84 <HAL_DMA_IRQHandler+0xf4>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	0019      	movs	r1, r3
 8001d60:	4b83      	ldr	r3, [pc, #524]	; (8001f70 <HAL_DMA_IRQHandler+0x2e0>)
 8001d62:	4299      	cmp	r1, r3
 8001d64:	d00b      	beq.n	8001d7e <HAL_DMA_IRQHandler+0xee>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	4b81      	ldr	r3, [pc, #516]	; (8001f74 <HAL_DMA_IRQHandler+0x2e4>)
 8001d6e:	4299      	cmp	r1, r3
 8001d70:	d102      	bne.n	8001d78 <HAL_DMA_IRQHandler+0xe8>
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	041b      	lsls	r3, r3, #16
 8001d76:	e00e      	b.n	8001d96 <HAL_DMA_IRQHandler+0x106>
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	051b      	lsls	r3, r3, #20
 8001d7c:	e00b      	b.n	8001d96 <HAL_DMA_IRQHandler+0x106>
 8001d7e:	2380      	movs	r3, #128	; 0x80
 8001d80:	031b      	lsls	r3, r3, #12
 8001d82:	e008      	b.n	8001d96 <HAL_DMA_IRQHandler+0x106>
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	e005      	b.n	8001d96 <HAL_DMA_IRQHandler+0x106>
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	e002      	b.n	8001d96 <HAL_DMA_IRQHandler+0x106>
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	e000      	b.n	8001d96 <HAL_DMA_IRQHandler+0x106>
 8001d94:	2308      	movs	r3, #8
 8001d96:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;    
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2225      	movs	r2, #37	; 0x25
 8001da8:	2104      	movs	r1, #4
 8001daa:	5499      	strb	r1, [r3, r2]
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2224      	movs	r2, #36	; 0x24
 8001db0:	2100      	movs	r1, #0
 8001db2:	5499      	strb	r1, [r3, r2]
    
      if (hdma->XferErrorCallback != NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d004      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x136>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	0010      	movs	r0, r2
 8001dc4:	4798      	blx	r3
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8001dc6:	4b65      	ldr	r3, [pc, #404]	; (8001f5c <HAL_DMA_IRQHandler+0x2cc>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	0019      	movs	r1, r3
 8001dd0:	4b63      	ldr	r3, [pc, #396]	; (8001f60 <HAL_DMA_IRQHandler+0x2d0>)
 8001dd2:	4299      	cmp	r1, r3
 8001dd4:	d02e      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x1a4>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	0019      	movs	r1, r3
 8001ddc:	4b61      	ldr	r3, [pc, #388]	; (8001f64 <HAL_DMA_IRQHandler+0x2d4>)
 8001dde:	4299      	cmp	r1, r3
 8001de0:	d026      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x1a0>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	0019      	movs	r1, r3
 8001de8:	4b5f      	ldr	r3, [pc, #380]	; (8001f68 <HAL_DMA_IRQHandler+0x2d8>)
 8001dea:	4299      	cmp	r1, r3
 8001dec:	d01d      	beq.n	8001e2a <HAL_DMA_IRQHandler+0x19a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	0019      	movs	r1, r3
 8001df4:	4b5d      	ldr	r3, [pc, #372]	; (8001f6c <HAL_DMA_IRQHandler+0x2dc>)
 8001df6:	4299      	cmp	r1, r3
 8001df8:	d014      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x194>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	0019      	movs	r1, r3
 8001e00:	4b5b      	ldr	r3, [pc, #364]	; (8001f70 <HAL_DMA_IRQHandler+0x2e0>)
 8001e02:	4299      	cmp	r1, r3
 8001e04:	d00b      	beq.n	8001e1e <HAL_DMA_IRQHandler+0x18e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	0019      	movs	r1, r3
 8001e0c:	4b59      	ldr	r3, [pc, #356]	; (8001f74 <HAL_DMA_IRQHandler+0x2e4>)
 8001e0e:	4299      	cmp	r1, r3
 8001e10:	d102      	bne.n	8001e18 <HAL_DMA_IRQHandler+0x188>
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	03db      	lsls	r3, r3, #15
 8001e16:	e00e      	b.n	8001e36 <HAL_DMA_IRQHandler+0x1a6>
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	04db      	lsls	r3, r3, #19
 8001e1c:	e00b      	b.n	8001e36 <HAL_DMA_IRQHandler+0x1a6>
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	02db      	lsls	r3, r3, #11
 8001e22:	e008      	b.n	8001e36 <HAL_DMA_IRQHandler+0x1a6>
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	01db      	lsls	r3, r3, #7
 8001e28:	e005      	b.n	8001e36 <HAL_DMA_IRQHandler+0x1a6>
 8001e2a:	2380      	movs	r3, #128	; 0x80
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	e002      	b.n	8001e36 <HAL_DMA_IRQHandler+0x1a6>
 8001e30:	2340      	movs	r3, #64	; 0x40
 8001e32:	e000      	b.n	8001e36 <HAL_DMA_IRQHandler+0x1a6>
 8001e34:	2304      	movs	r3, #4
 8001e36:	4013      	ands	r3, r2
 8001e38:	d058      	beq.n	8001eec <HAL_DMA_IRQHandler+0x25c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2204      	movs	r2, #4
 8001e42:	4013      	ands	r3, r2
 8001e44:	d052      	beq.n	8001eec <HAL_DMA_IRQHandler+0x25c>
    { 
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d107      	bne.n	8001e62 <HAL_DMA_IRQHandler+0x1d2>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	2104      	movs	r1, #4
 8001e5e:	438a      	bics	r2, r1
 8001e60:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e62:	4a3e      	ldr	r2, [pc, #248]	; (8001f5c <HAL_DMA_IRQHandler+0x2cc>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	0019      	movs	r1, r3
 8001e6a:	4b3d      	ldr	r3, [pc, #244]	; (8001f60 <HAL_DMA_IRQHandler+0x2d0>)
 8001e6c:	4299      	cmp	r1, r3
 8001e6e:	d02e      	beq.n	8001ece <HAL_DMA_IRQHandler+0x23e>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	0019      	movs	r1, r3
 8001e76:	4b3b      	ldr	r3, [pc, #236]	; (8001f64 <HAL_DMA_IRQHandler+0x2d4>)
 8001e78:	4299      	cmp	r1, r3
 8001e7a:	d026      	beq.n	8001eca <HAL_DMA_IRQHandler+0x23a>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	0019      	movs	r1, r3
 8001e82:	4b39      	ldr	r3, [pc, #228]	; (8001f68 <HAL_DMA_IRQHandler+0x2d8>)
 8001e84:	4299      	cmp	r1, r3
 8001e86:	d01d      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x234>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	4b37      	ldr	r3, [pc, #220]	; (8001f6c <HAL_DMA_IRQHandler+0x2dc>)
 8001e90:	4299      	cmp	r1, r3
 8001e92:	d014      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x22e>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	0019      	movs	r1, r3
 8001e9a:	4b35      	ldr	r3, [pc, #212]	; (8001f70 <HAL_DMA_IRQHandler+0x2e0>)
 8001e9c:	4299      	cmp	r1, r3
 8001e9e:	d00b      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x228>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	4b33      	ldr	r3, [pc, #204]	; (8001f74 <HAL_DMA_IRQHandler+0x2e4>)
 8001ea8:	4299      	cmp	r1, r3
 8001eaa:	d102      	bne.n	8001eb2 <HAL_DMA_IRQHandler+0x222>
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	03db      	lsls	r3, r3, #15
 8001eb0:	e00e      	b.n	8001ed0 <HAL_DMA_IRQHandler+0x240>
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	04db      	lsls	r3, r3, #19
 8001eb6:	e00b      	b.n	8001ed0 <HAL_DMA_IRQHandler+0x240>
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	02db      	lsls	r3, r3, #11
 8001ebc:	e008      	b.n	8001ed0 <HAL_DMA_IRQHandler+0x240>
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	01db      	lsls	r3, r3, #7
 8001ec2:	e005      	b.n	8001ed0 <HAL_DMA_IRQHandler+0x240>
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	e002      	b.n	8001ed0 <HAL_DMA_IRQHandler+0x240>
 8001eca:	2340      	movs	r3, #64	; 0x40
 8001ecc:	e000      	b.n	8001ed0 <HAL_DMA_IRQHandler+0x240>
 8001ece:	2304      	movs	r3, #4
 8001ed0:	6053      	str	r3, [r2, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2225      	movs	r2, #37	; 0x25
 8001ed6:	2105      	movs	r1, #5
 8001ed8:	5499      	strb	r1, [r3, r2]

      if(hdma->XferHalfCpltCallback != NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d004      	beq.n	8001eec <HAL_DMA_IRQHandler+0x25c>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	0010      	movs	r0, r2
 8001eea:	4798      	blx	r3
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8001eec:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <HAL_DMA_IRQHandler+0x2cc>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0019      	movs	r1, r3
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <HAL_DMA_IRQHandler+0x2d0>)
 8001ef8:	4299      	cmp	r1, r3
 8001efa:	d03d      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x2e8>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	0019      	movs	r1, r3
 8001f02:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <HAL_DMA_IRQHandler+0x2d4>)
 8001f04:	4299      	cmp	r1, r3
 8001f06:	d026      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x2c6>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <HAL_DMA_IRQHandler+0x2d8>)
 8001f10:	4299      	cmp	r1, r3
 8001f12:	d01d      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x2c0>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	0019      	movs	r1, r3
 8001f1a:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <HAL_DMA_IRQHandler+0x2dc>)
 8001f1c:	4299      	cmp	r1, r3
 8001f1e:	d014      	beq.n	8001f4a <HAL_DMA_IRQHandler+0x2ba>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0019      	movs	r1, r3
 8001f26:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <HAL_DMA_IRQHandler+0x2e0>)
 8001f28:	4299      	cmp	r1, r3
 8001f2a:	d00b      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x2b4>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	0019      	movs	r1, r3
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <HAL_DMA_IRQHandler+0x2e4>)
 8001f34:	4299      	cmp	r1, r3
 8001f36:	d102      	bne.n	8001f3e <HAL_DMA_IRQHandler+0x2ae>
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	039b      	lsls	r3, r3, #14
 8001f3c:	e01d      	b.n	8001f7a <HAL_DMA_IRQHandler+0x2ea>
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	049b      	lsls	r3, r3, #18
 8001f42:	e01a      	b.n	8001f7a <HAL_DMA_IRQHandler+0x2ea>
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	029b      	lsls	r3, r3, #10
 8001f48:	e017      	b.n	8001f7a <HAL_DMA_IRQHandler+0x2ea>
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	019b      	lsls	r3, r3, #6
 8001f4e:	e014      	b.n	8001f7a <HAL_DMA_IRQHandler+0x2ea>
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	e011      	b.n	8001f7a <HAL_DMA_IRQHandler+0x2ea>
 8001f56:	2320      	movs	r3, #32
 8001f58:	e00f      	b.n	8001f7a <HAL_DMA_IRQHandler+0x2ea>
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	40020000 	.word	0x40020000
 8001f60:	40020008 	.word	0x40020008
 8001f64:	4002001c 	.word	0x4002001c
 8001f68:	40020030 	.word	0x40020030
 8001f6c:	40020044 	.word	0x40020044
 8001f70:	40020058 	.word	0x40020058
 8001f74:	4002006c 	.word	0x4002006c
 8001f78:	2302      	movs	r3, #2
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d060      	beq.n	8002040 <HAL_DMA_IRQHandler+0x3b0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2202      	movs	r2, #2
 8001f86:	4013      	ands	r3, r2
 8001f88:	d05a      	beq.n	8002040 <HAL_DMA_IRQHandler+0x3b0>
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2220      	movs	r2, #32
 8001f92:	4013      	ands	r3, r2
 8001f94:	d107      	bne.n	8001fa6 <HAL_DMA_IRQHandler+0x316>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	2102      	movs	r1, #2
 8001fa2:	438a      	bics	r2, r1
 8001fa4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001fa6:	4a28      	ldr	r2, [pc, #160]	; (8002048 <HAL_DMA_IRQHandler+0x3b8>)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	0019      	movs	r1, r3
 8001fae:	4b27      	ldr	r3, [pc, #156]	; (800204c <HAL_DMA_IRQHandler+0x3bc>)
 8001fb0:	4299      	cmp	r1, r3
 8001fb2:	d02e      	beq.n	8002012 <HAL_DMA_IRQHandler+0x382>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	0019      	movs	r1, r3
 8001fba:	4b25      	ldr	r3, [pc, #148]	; (8002050 <HAL_DMA_IRQHandler+0x3c0>)
 8001fbc:	4299      	cmp	r1, r3
 8001fbe:	d026      	beq.n	800200e <HAL_DMA_IRQHandler+0x37e>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	4b23      	ldr	r3, [pc, #140]	; (8002054 <HAL_DMA_IRQHandler+0x3c4>)
 8001fc8:	4299      	cmp	r1, r3
 8001fca:	d01d      	beq.n	8002008 <HAL_DMA_IRQHandler+0x378>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	0019      	movs	r1, r3
 8001fd2:	4b21      	ldr	r3, [pc, #132]	; (8002058 <HAL_DMA_IRQHandler+0x3c8>)
 8001fd4:	4299      	cmp	r1, r3
 8001fd6:	d014      	beq.n	8002002 <HAL_DMA_IRQHandler+0x372>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0019      	movs	r1, r3
 8001fde:	4b1f      	ldr	r3, [pc, #124]	; (800205c <HAL_DMA_IRQHandler+0x3cc>)
 8001fe0:	4299      	cmp	r1, r3
 8001fe2:	d00b      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x36c>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	0019      	movs	r1, r3
 8001fea:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <HAL_DMA_IRQHandler+0x3d0>)
 8001fec:	4299      	cmp	r1, r3
 8001fee:	d102      	bne.n	8001ff6 <HAL_DMA_IRQHandler+0x366>
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	039b      	lsls	r3, r3, #14
 8001ff4:	e00e      	b.n	8002014 <HAL_DMA_IRQHandler+0x384>
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	049b      	lsls	r3, r3, #18
 8001ffa:	e00b      	b.n	8002014 <HAL_DMA_IRQHandler+0x384>
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	029b      	lsls	r3, r3, #10
 8002000:	e008      	b.n	8002014 <HAL_DMA_IRQHandler+0x384>
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	019b      	lsls	r3, r3, #6
 8002006:	e005      	b.n	8002014 <HAL_DMA_IRQHandler+0x384>
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	e002      	b.n	8002014 <HAL_DMA_IRQHandler+0x384>
 800200e:	2320      	movs	r3, #32
 8002010:	e000      	b.n	8002014 <HAL_DMA_IRQHandler+0x384>
 8002012:	2302      	movs	r3, #2
 8002014:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_NONE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;    
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2225      	movs	r2, #37	; 0x25
 8002022:	2101      	movs	r1, #1
 8002024:	5499      	strb	r1, [r3, r2]
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2224      	movs	r2, #36	; 0x24
 800202a:	2100      	movs	r1, #0
 800202c:	5499      	strb	r1, [r3, r2]
    
      if(hdma->XferCpltCallback != NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002032:	2b00      	cmp	r3, #0
 8002034:	d004      	beq.n	8002040 <HAL_DMA_IRQHandler+0x3b0>
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	0010      	movs	r0, r2
 800203e:	4798      	blx	r3
      }
    }
  }
}  
 8002040:	46c0      	nop			; (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	b002      	add	sp, #8
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40020000 	.word	0x40020000
 800204c:	40020008 	.word	0x40020008
 8002050:	4002001c 	.word	0x4002001c
 8002054:	40020030 	.word	0x40020030
 8002058:	40020044 	.word	0x40020044
 800205c:	40020058 	.word	0x40020058
 8002060:	4002006c 	.word	0x4002006c

08002064 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
 8002070:	603b      	str	r3, [r7, #0]
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b10      	cmp	r3, #16
 8002080:	d108      	bne.n	8002094 <DMA_SetConfig+0x30>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002092:	e007      	b.n	80020a4 <DMA_SetConfig+0x40>
    hdma->Instance->CPAR = SrcAddress;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	60da      	str	r2, [r3, #12]
}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b004      	add	sp, #16
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d036      	beq.n	8002138 <HAL_GPIO_Init+0x8c>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d032      	beq.n	8002138 <HAL_GPIO_Init+0x8c>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b11      	cmp	r3, #17
 80020d8:	d02e      	beq.n	8002138 <HAL_GPIO_Init+0x8c>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d02a      	beq.n	8002138 <HAL_GPIO_Init+0x8c>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b12      	cmp	r3, #18
 80020e8:	d026      	beq.n	8002138 <HAL_GPIO_Init+0x8c>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4a48      	ldr	r2, [pc, #288]	; (8002210 <HAL_GPIO_Init+0x164>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d021      	beq.n	8002138 <HAL_GPIO_Init+0x8c>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4a46      	ldr	r2, [pc, #280]	; (8002214 <HAL_GPIO_Init+0x168>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d01c      	beq.n	8002138 <HAL_GPIO_Init+0x8c>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4a45      	ldr	r2, [pc, #276]	; (8002218 <HAL_GPIO_Init+0x16c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d017      	beq.n	8002138 <HAL_GPIO_Init+0x8c>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4a43      	ldr	r2, [pc, #268]	; (800221c <HAL_GPIO_Init+0x170>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d012      	beq.n	8002138 <HAL_GPIO_Init+0x8c>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4a42      	ldr	r2, [pc, #264]	; (8002220 <HAL_GPIO_Init+0x174>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d00d      	beq.n	8002138 <HAL_GPIO_Init+0x8c>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4a40      	ldr	r2, [pc, #256]	; (8002224 <HAL_GPIO_Init+0x178>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d008      	beq.n	8002138 <HAL_GPIO_Init+0x8c>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b03      	cmp	r3, #3
 800212c:	d004      	beq.n	8002138 <HAL_GPIO_Init+0x8c>
 800212e:	4b3e      	ldr	r3, [pc, #248]	; (8002228 <HAL_GPIO_Init+0x17c>)
 8002130:	21be      	movs	r1, #190	; 0xbe
 8002132:	0018      	movs	r0, r3
 8002134:	f008 fab0 	bl	800a698 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00c      	beq.n	800215a <HAL_GPIO_Init+0xae>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d008      	beq.n	800215a <HAL_GPIO_Init+0xae>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d004      	beq.n	800215a <HAL_GPIO_Init+0xae>
 8002150:	4b35      	ldr	r3, [pc, #212]	; (8002228 <HAL_GPIO_Init+0x17c>)
 8002152:	21bf      	movs	r1, #191	; 0xbf
 8002154:	0018      	movs	r0, r3
 8002156:	f008 fa9f 	bl	800a698 <assert_failed>
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	23a0      	movs	r3, #160	; 0xa0
 800215e:	05db      	lsls	r3, r3, #23
 8002160:	429a      	cmp	r2, r3
 8002162:	d10c      	bne.n	800217e <HAL_GPIO_Init+0xd2>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	041b      	lsls	r3, r3, #16
 800216a:	0c1b      	lsrs	r3, r3, #16
 800216c:	d007      	beq.n	800217e <HAL_GPIO_Init+0xd2>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a2e      	ldr	r2, [pc, #184]	; (800222c <HAL_GPIO_Init+0x180>)
 8002174:	4313      	orrs	r3, r2
 8002176:	4a2d      	ldr	r2, [pc, #180]	; (800222c <HAL_GPIO_Init+0x180>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d100      	bne.n	800217e <HAL_GPIO_Init+0xd2>
 800217c:	e220      	b.n	80025c0 <HAL_GPIO_Init+0x514>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a2b      	ldr	r2, [pc, #172]	; (8002230 <HAL_GPIO_Init+0x184>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d10c      	bne.n	80021a0 <HAL_GPIO_Init+0xf4>
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	041b      	lsls	r3, r3, #16
 800218c:	0c1b      	lsrs	r3, r3, #16
 800218e:	d007      	beq.n	80021a0 <HAL_GPIO_Init+0xf4>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a25      	ldr	r2, [pc, #148]	; (800222c <HAL_GPIO_Init+0x180>)
 8002196:	4313      	orrs	r3, r2
 8002198:	4a24      	ldr	r2, [pc, #144]	; (800222c <HAL_GPIO_Init+0x180>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d100      	bne.n	80021a0 <HAL_GPIO_Init+0xf4>
 800219e:	e20f      	b.n	80025c0 <HAL_GPIO_Init+0x514>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a24      	ldr	r2, [pc, #144]	; (8002234 <HAL_GPIO_Init+0x188>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d10c      	bne.n	80021c2 <HAL_GPIO_Init+0x116>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	041b      	lsls	r3, r3, #16
 80021ae:	0c1b      	lsrs	r3, r3, #16
 80021b0:	d007      	beq.n	80021c2 <HAL_GPIO_Init+0x116>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1d      	ldr	r2, [pc, #116]	; (800222c <HAL_GPIO_Init+0x180>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	4a1c      	ldr	r2, [pc, #112]	; (800222c <HAL_GPIO_Init+0x180>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d100      	bne.n	80021c2 <HAL_GPIO_Init+0x116>
 80021c0:	e1fe      	b.n	80025c0 <HAL_GPIO_Init+0x514>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a1c      	ldr	r2, [pc, #112]	; (8002238 <HAL_GPIO_Init+0x18c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d10b      	bne.n	80021e2 <HAL_GPIO_Init+0x136>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2204      	movs	r2, #4
 80021d0:	4013      	ands	r3, r2
 80021d2:	d006      	beq.n	80021e2 <HAL_GPIO_Init+0x136>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2204      	movs	r2, #4
 80021da:	4313      	orrs	r3, r2
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d100      	bne.n	80021e2 <HAL_GPIO_Init+0x136>
 80021e0:	e1ee      	b.n	80025c0 <HAL_GPIO_Init+0x514>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a15      	ldr	r2, [pc, #84]	; (800223c <HAL_GPIO_Init+0x190>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d10b      	bne.n	8002202 <HAL_GPIO_Init+0x156>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2203      	movs	r2, #3
 80021f0:	4013      	ands	r3, r2
 80021f2:	d006      	beq.n	8002202 <HAL_GPIO_Init+0x156>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2203      	movs	r2, #3
 80021fa:	4313      	orrs	r3, r2
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d100      	bne.n	8002202 <HAL_GPIO_Init+0x156>
 8002200:	e1de      	b.n	80025c0 <HAL_GPIO_Init+0x514>
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_GPIO_Init+0x17c>)
 8002204:	21c0      	movs	r1, #192	; 0xc0
 8002206:	0018      	movs	r0, r3
 8002208:	f008 fa46 	bl	800a698 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800220c:	e1d8      	b.n	80025c0 <HAL_GPIO_Init+0x514>
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	10110000 	.word	0x10110000
 8002214:	10210000 	.word	0x10210000
 8002218:	10310000 	.word	0x10310000
 800221c:	10120000 	.word	0x10120000
 8002220:	10220000 	.word	0x10220000
 8002224:	10320000 	.word	0x10320000
 8002228:	0800c0cc 	.word	0x0800c0cc
 800222c:	0000ffff 	.word	0x0000ffff
 8002230:	50000400 	.word	0x50000400
 8002234:	50000800 	.word	0x50000800
 8002238:	50000c00 	.word	0x50000c00
 800223c:	50001c00 	.word	0x50001c00
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2101      	movs	r1, #1
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4091      	lsls	r1, r2
 800224a:	000a      	movs	r2, r1
 800224c:	4013      	ands	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d100      	bne.n	8002258 <HAL_GPIO_Init+0x1ac>
 8002256:	e1b0      	b.n	80025ba <HAL_GPIO_Init+0x50e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d004      	beq.n	800226a <HAL_GPIO_Init+0x1be>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b12      	cmp	r3, #18
 8002266:	d000      	beq.n	800226a <HAL_GPIO_Init+0x1be>
 8002268:	e07d      	b.n	8002366 <HAL_GPIO_Init+0x2ba>
      {
        /* Check if the Alternate function is compliant with the GPIO in use */
        assert_param(IS_GPIO_AF_AVAILABLE(GPIOx,(GPIO_Init->Alternate)));
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	23a0      	movs	r3, #160	; 0xa0
 800226e:	05db      	lsls	r3, r3, #23
 8002270:	429a      	cmp	r2, r3
 8002272:	d11b      	bne.n	80022ac <HAL_GPIO_Init+0x200>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d050      	beq.n	800231e <HAL_GPIO_Init+0x272>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	2b02      	cmp	r3, #2
 8002282:	d04c      	beq.n	800231e <HAL_GPIO_Init+0x272>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d048      	beq.n	800231e <HAL_GPIO_Init+0x272>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	2b04      	cmp	r3, #4
 8002292:	d044      	beq.n	800231e <HAL_GPIO_Init+0x272>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	2b05      	cmp	r3, #5
 800229a:	d040      	beq.n	800231e <HAL_GPIO_Init+0x272>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	2b06      	cmp	r3, #6
 80022a2:	d03c      	beq.n	800231e <HAL_GPIO_Init+0x272>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	2b07      	cmp	r3, #7
 80022aa:	d038      	beq.n	800231e <HAL_GPIO_Init+0x272>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4aca      	ldr	r2, [pc, #808]	; (80025d8 <HAL_GPIO_Init+0x52c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d11b      	bne.n	80022ec <HAL_GPIO_Init+0x240>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d030      	beq.n	800231e <HAL_GPIO_Init+0x272>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d02c      	beq.n	800231e <HAL_GPIO_Init+0x272>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d028      	beq.n	800231e <HAL_GPIO_Init+0x272>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d024      	beq.n	800231e <HAL_GPIO_Init+0x272>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d020      	beq.n	800231e <HAL_GPIO_Init+0x272>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	2b05      	cmp	r3, #5
 80022e2:	d01c      	beq.n	800231e <HAL_GPIO_Init+0x272>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	2b06      	cmp	r3, #6
 80022ea:	d018      	beq.n	800231e <HAL_GPIO_Init+0x272>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4abb      	ldr	r2, [pc, #748]	; (80025dc <HAL_GPIO_Init+0x530>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d107      	bne.n	8002304 <HAL_GPIO_Init+0x258>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d010      	beq.n	800231e <HAL_GPIO_Init+0x272>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d00c      	beq.n	800231e <HAL_GPIO_Init+0x272>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4ab6      	ldr	r2, [pc, #728]	; (80025e0 <HAL_GPIO_Init+0x534>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d103      	bne.n	8002314 <HAL_GPIO_Init+0x268>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d004      	beq.n	800231e <HAL_GPIO_Init+0x272>
 8002314:	4bb3      	ldr	r3, [pc, #716]	; (80025e4 <HAL_GPIO_Init+0x538>)
 8002316:	21cf      	movs	r1, #207	; 0xcf
 8002318:	0018      	movs	r0, r3
 800231a:	f008 f9bd 	bl	800a698 <assert_failed>
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	08da      	lsrs	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3208      	adds	r2, #8
 8002326:	0092      	lsls	r2, r2, #2
 8002328:	58d3      	ldr	r3, [r2, r3]
 800232a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	2207      	movs	r2, #7
 8002330:	4013      	ands	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	220f      	movs	r2, #15
 8002336:	409a      	lsls	r2, r3
 8002338:	0013      	movs	r3, r2
 800233a:	43da      	mvns	r2, r3
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4013      	ands	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	691a      	ldr	r2, [r3, #16]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2107      	movs	r1, #7
 800234a:	400b      	ands	r3, r1
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	409a      	lsls	r2, r3
 8002350:	0013      	movs	r3, r2
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	08da      	lsrs	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3208      	adds	r2, #8
 8002360:	0092      	lsls	r2, r2, #2
 8002362:	6939      	ldr	r1, [r7, #16]
 8002364:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d00b      	beq.n	8002386 <HAL_GPIO_Init+0x2da>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d007      	beq.n	8002386 <HAL_GPIO_Init+0x2da>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800237a:	2b11      	cmp	r3, #17
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x2da>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b12      	cmp	r3, #18
 8002384:	d145      	bne.n	8002412 <HAL_GPIO_Init+0x366>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d010      	beq.n	80023b0 <HAL_GPIO_Init+0x304>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d00c      	beq.n	80023b0 <HAL_GPIO_Init+0x304>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d008      	beq.n	80023b0 <HAL_GPIO_Init+0x304>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d004      	beq.n	80023b0 <HAL_GPIO_Init+0x304>
 80023a6:	4b8f      	ldr	r3, [pc, #572]	; (80025e4 <HAL_GPIO_Init+0x538>)
 80023a8:	21dc      	movs	r1, #220	; 0xdc
 80023aa:	0018      	movs	r0, r3
 80023ac:	f008 f974 	bl	800a698 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	2203      	movs	r2, #3
 80023bc:	409a      	lsls	r2, r3
 80023be:	0013      	movs	r3, r2
 80023c0:	43da      	mvns	r2, r3
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	409a      	lsls	r2, r3
 80023d2:	0013      	movs	r3, r2
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023e6:	2201      	movs	r2, #1
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	409a      	lsls	r2, r3
 80023ec:	0013      	movs	r3, r2
 80023ee:	43da      	mvns	r2, r3
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	091b      	lsrs	r3, r3, #4
 80023fc:	2201      	movs	r2, #1
 80023fe:	401a      	ands	r2, r3
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	409a      	lsls	r2, r3
 8002404:	0013      	movs	r3, r2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	2203      	movs	r2, #3
 800241e:	409a      	lsls	r2, r3
 8002420:	0013      	movs	r3, r2
 8002422:	43da      	mvns	r2, r3
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2203      	movs	r2, #3
 8002430:	401a      	ands	r2, r3
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	409a      	lsls	r2, r3
 8002438:	0013      	movs	r3, r2
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	2203      	movs	r2, #3
 8002452:	409a      	lsls	r2, r3
 8002454:	0013      	movs	r3, r2
 8002456:	43da      	mvns	r2, r3
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4013      	ands	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	409a      	lsls	r2, r3
 8002468:	0013      	movs	r3, r2
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	055b      	lsls	r3, r3, #21
 800247e:	4013      	ands	r3, r2
 8002480:	d100      	bne.n	8002484 <HAL_GPIO_Init+0x3d8>
 8002482:	e09a      	b.n	80025ba <HAL_GPIO_Init+0x50e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002484:	4b58      	ldr	r3, [pc, #352]	; (80025e8 <HAL_GPIO_Init+0x53c>)
 8002486:	4a58      	ldr	r2, [pc, #352]	; (80025e8 <HAL_GPIO_Init+0x53c>)
 8002488:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800248a:	2101      	movs	r1, #1
 800248c:	430a      	orrs	r2, r1
 800248e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8002490:	4a56      	ldr	r2, [pc, #344]	; (80025ec <HAL_GPIO_Init+0x540>)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	089b      	lsrs	r3, r3, #2
 8002496:	3302      	adds	r3, #2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	589b      	ldr	r3, [r3, r2]
 800249c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	2203      	movs	r2, #3
 80024a2:	4013      	ands	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	220f      	movs	r2, #15
 80024a8:	409a      	lsls	r2, r3
 80024aa:	0013      	movs	r3, r2
 80024ac:	43da      	mvns	r2, r3
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	23a0      	movs	r3, #160	; 0xa0
 80024b8:	05db      	lsls	r3, r3, #23
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d019      	beq.n	80024f2 <HAL_GPIO_Init+0x446>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a45      	ldr	r2, [pc, #276]	; (80025d8 <HAL_GPIO_Init+0x52c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d013      	beq.n	80024ee <HAL_GPIO_Init+0x442>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a44      	ldr	r2, [pc, #272]	; (80025dc <HAL_GPIO_Init+0x530>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d00d      	beq.n	80024ea <HAL_GPIO_Init+0x43e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a43      	ldr	r2, [pc, #268]	; (80025e0 <HAL_GPIO_Init+0x534>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d007      	beq.n	80024e6 <HAL_GPIO_Init+0x43a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a45      	ldr	r2, [pc, #276]	; (80025f0 <HAL_GPIO_Init+0x544>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d101      	bne.n	80024e2 <HAL_GPIO_Init+0x436>
 80024de:	2305      	movs	r3, #5
 80024e0:	e008      	b.n	80024f4 <HAL_GPIO_Init+0x448>
 80024e2:	2306      	movs	r3, #6
 80024e4:	e006      	b.n	80024f4 <HAL_GPIO_Init+0x448>
 80024e6:	2303      	movs	r3, #3
 80024e8:	e004      	b.n	80024f4 <HAL_GPIO_Init+0x448>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e002      	b.n	80024f4 <HAL_GPIO_Init+0x448>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <HAL_GPIO_Init+0x448>
 80024f2:	2300      	movs	r3, #0
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	2103      	movs	r1, #3
 80024f8:	400a      	ands	r2, r1
 80024fa:	0092      	lsls	r2, r2, #2
 80024fc:	4093      	lsls	r3, r2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002504:	4939      	ldr	r1, [pc, #228]	; (80025ec <HAL_GPIO_Init+0x540>)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	089b      	lsrs	r3, r3, #2
 800250a:	3302      	adds	r3, #2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002512:	4b38      	ldr	r3, [pc, #224]	; (80025f4 <HAL_GPIO_Init+0x548>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	43da      	mvns	r2, r3
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4013      	ands	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	025b      	lsls	r3, r3, #9
 800252a:	4013      	ands	r3, r2
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x48a>
        {
          temp |= iocurrent;
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002536:	4b2f      	ldr	r3, [pc, #188]	; (80025f4 <HAL_GPIO_Init+0x548>)
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800253c:	4b2d      	ldr	r3, [pc, #180]	; (80025f4 <HAL_GPIO_Init+0x548>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	43da      	mvns	r2, r3
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	029b      	lsls	r3, r3, #10
 8002554:	4013      	ands	r3, r2
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x4b4>
        {
          temp |= iocurrent;
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002560:	4b24      	ldr	r3, [pc, #144]	; (80025f4 <HAL_GPIO_Init+0x548>)
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002566:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <HAL_GPIO_Init+0x548>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	43da      	mvns	r2, r3
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	2380      	movs	r3, #128	; 0x80
 800257c:	035b      	lsls	r3, r3, #13
 800257e:	4013      	ands	r3, r2
 8002580:	d003      	beq.n	800258a <HAL_GPIO_Init+0x4de>
        {
          temp |= iocurrent;
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800258a:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <HAL_GPIO_Init+0x548>)
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002590:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <HAL_GPIO_Init+0x548>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	43da      	mvns	r2, r3
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	039b      	lsls	r3, r3, #14
 80025a8:	4013      	ands	r3, r2
 80025aa:	d003      	beq.n	80025b4 <HAL_GPIO_Init+0x508>
        {
          temp |= iocurrent;
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025b4:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <HAL_GPIO_Init+0x548>)
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	3301      	adds	r3, #1
 80025be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	40da      	lsrs	r2, r3
 80025c8:	1e13      	subs	r3, r2, #0
 80025ca:	d000      	beq.n	80025ce <HAL_GPIO_Init+0x522>
 80025cc:	e638      	b.n	8002240 <HAL_GPIO_Init+0x194>
  }
}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b006      	add	sp, #24
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	50000400 	.word	0x50000400
 80025dc:	50000800 	.word	0x50000800
 80025e0:	50000c00 	.word	0x50000c00
 80025e4:	0800c0cc 	.word	0x0800c0cc
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40010000 	.word	0x40010000
 80025f0:	50001c00 	.word	0x50001c00
 80025f4:	40010400 	.word	0x40010400

080025f8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	0008      	movs	r0, r1
 8002602:	0011      	movs	r1, r2
 8002604:	1cbb      	adds	r3, r7, #2
 8002606:	1c02      	adds	r2, r0, #0
 8002608:	801a      	strh	r2, [r3, #0]
 800260a:	1c7b      	adds	r3, r7, #1
 800260c:	1c0a      	adds	r2, r1, #0
 800260e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	23a0      	movs	r3, #160	; 0xa0
 8002614:	05db      	lsls	r3, r3, #23
 8002616:	429a      	cmp	r2, r3
 8002618:	d103      	bne.n	8002622 <HAL_GPIO_WritePin+0x2a>
 800261a:	1cbb      	adds	r3, r7, #2
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d136      	bne.n	8002690 <HAL_GPIO_WritePin+0x98>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a2b      	ldr	r2, [pc, #172]	; (80026d4 <HAL_GPIO_WritePin+0xdc>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d103      	bne.n	8002632 <HAL_GPIO_WritePin+0x3a>
 800262a:	1cbb      	adds	r3, r7, #2
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d12e      	bne.n	8002690 <HAL_GPIO_WritePin+0x98>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a28      	ldr	r2, [pc, #160]	; (80026d8 <HAL_GPIO_WritePin+0xe0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d103      	bne.n	8002642 <HAL_GPIO_WritePin+0x4a>
 800263a:	1cbb      	adds	r3, r7, #2
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d126      	bne.n	8002690 <HAL_GPIO_WritePin+0x98>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a25      	ldr	r2, [pc, #148]	; (80026dc <HAL_GPIO_WritePin+0xe4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d10b      	bne.n	8002662 <HAL_GPIO_WritePin+0x6a>
 800264a:	1cbb      	adds	r3, r7, #2
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	2204      	movs	r2, #4
 8002650:	4013      	ands	r3, r2
 8002652:	d006      	beq.n	8002662 <HAL_GPIO_WritePin+0x6a>
 8002654:	1cbb      	adds	r3, r7, #2
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	2204      	movs	r2, #4
 800265a:	4313      	orrs	r3, r2
 800265c:	b29b      	uxth	r3, r3
 800265e:	2b04      	cmp	r3, #4
 8002660:	d016      	beq.n	8002690 <HAL_GPIO_WritePin+0x98>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a1e      	ldr	r2, [pc, #120]	; (80026e0 <HAL_GPIO_WritePin+0xe8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d10b      	bne.n	8002682 <HAL_GPIO_WritePin+0x8a>
 800266a:	1cbb      	adds	r3, r7, #2
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	2203      	movs	r2, #3
 8002670:	4013      	ands	r3, r2
 8002672:	d006      	beq.n	8002682 <HAL_GPIO_WritePin+0x8a>
 8002674:	1cbb      	adds	r3, r7, #2
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	2203      	movs	r2, #3
 800267a:	4313      	orrs	r3, r2
 800267c:	b29b      	uxth	r3, r3
 800267e:	2b03      	cmp	r3, #3
 8002680:	d006      	beq.n	8002690 <HAL_GPIO_WritePin+0x98>
 8002682:	23d5      	movs	r3, #213	; 0xd5
 8002684:	005a      	lsls	r2, r3, #1
 8002686:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <HAL_GPIO_WritePin+0xec>)
 8002688:	0011      	movs	r1, r2
 800268a:	0018      	movs	r0, r3
 800268c:	f008 f804 	bl	800a698 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002690:	1c7b      	adds	r3, r7, #1
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00b      	beq.n	80026b0 <HAL_GPIO_WritePin+0xb8>
 8002698:	1c7b      	adds	r3, r7, #1
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d007      	beq.n	80026b0 <HAL_GPIO_WritePin+0xb8>
 80026a0:	23ac      	movs	r3, #172	; 0xac
 80026a2:	33ff      	adds	r3, #255	; 0xff
 80026a4:	001a      	movs	r2, r3
 80026a6:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <HAL_GPIO_WritePin+0xec>)
 80026a8:	0011      	movs	r1, r2
 80026aa:	0018      	movs	r0, r3
 80026ac:	f007 fff4 	bl	800a698 <assert_failed>
  
  if(PinState != GPIO_PIN_RESET)
 80026b0:	1c7b      	adds	r3, r7, #1
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d004      	beq.n	80026c2 <HAL_GPIO_WritePin+0xca>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026b8:	1cbb      	adds	r3, r7, #2
 80026ba:	881a      	ldrh	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80026c0:	e003      	b.n	80026ca <HAL_GPIO_WritePin+0xd2>
    GPIOx->BRR = GPIO_Pin ;
 80026c2:	1cbb      	adds	r3, r7, #2
 80026c4:	881a      	ldrh	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b002      	add	sp, #8
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	50000400 	.word	0x50000400
 80026d8:	50000800 	.word	0x50000800
 80026dc:	50000c00 	.word	0x50000c00
 80026e0:	50001c00 	.word	0x50001c00
 80026e4:	0800c0cc 	.word	0x0800c0cc

080026e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d107      	bne.n	800270a <HAL_RCC_OscConfig+0x22>
 80026fa:	2350      	movs	r3, #80	; 0x50
 80026fc:	33ff      	adds	r3, #255	; 0xff
 80026fe:	001a      	movs	r2, r3
 8002700:	4bbe      	ldr	r3, [pc, #760]	; (80029fc <HAL_RCC_OscConfig+0x314>)
 8002702:	0011      	movs	r1, r2
 8002704:	0018      	movs	r0, r3
 8002706:	f007 ffc7 	bl	800a698 <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d01f      	beq.n	8002752 <HAL_RCC_OscConfig+0x6a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2201      	movs	r2, #1
 8002718:	4013      	ands	r3, r2
 800271a:	d11a      	bne.n	8002752 <HAL_RCC_OscConfig+0x6a>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2202      	movs	r2, #2
 8002722:	4013      	ands	r3, r2
 8002724:	d115      	bne.n	8002752 <HAL_RCC_OscConfig+0x6a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2208      	movs	r2, #8
 800272c:	4013      	ands	r3, r2
 800272e:	d110      	bne.n	8002752 <HAL_RCC_OscConfig+0x6a>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2204      	movs	r2, #4
 8002736:	4013      	ands	r3, r2
 8002738:	d10b      	bne.n	8002752 <HAL_RCC_OscConfig+0x6a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2210      	movs	r2, #16
 8002740:	4013      	ands	r3, r2
 8002742:	d106      	bne.n	8002752 <HAL_RCC_OscConfig+0x6a>
 8002744:	23a8      	movs	r3, #168	; 0xa8
 8002746:	005a      	lsls	r2, r3, #1
 8002748:	4bac      	ldr	r3, [pc, #688]	; (80029fc <HAL_RCC_OscConfig+0x314>)
 800274a:	0011      	movs	r1, r2
 800274c:	0018      	movs	r0, r3
 800274e:	f007 ffa3 	bl	800a698 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2201      	movs	r2, #1
 8002758:	4013      	ands	r3, r2
 800275a:	d100      	bne.n	800275e <HAL_RCC_OscConfig+0x76>
 800275c:	e0a0      	b.n	80028a0 <HAL_RCC_OscConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d012      	beq.n	800278c <HAL_RCC_OscConfig+0xa4>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	025b      	lsls	r3, r3, #9
 800276e:	429a      	cmp	r2, r3
 8002770:	d00c      	beq.n	800278c <HAL_RCC_OscConfig+0xa4>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	23a0      	movs	r3, #160	; 0xa0
 8002778:	02db      	lsls	r3, r3, #11
 800277a:	429a      	cmp	r2, r3
 800277c:	d006      	beq.n	800278c <HAL_RCC_OscConfig+0xa4>
 800277e:	23ab      	movs	r3, #171	; 0xab
 8002780:	005a      	lsls	r2, r3, #1
 8002782:	4b9e      	ldr	r3, [pc, #632]	; (80029fc <HAL_RCC_OscConfig+0x314>)
 8002784:	0011      	movs	r1, r2
 8002786:	0018      	movs	r0, r3
 8002788:	f007 ff86 	bl	800a698 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800278c:	4b9c      	ldr	r3, [pc, #624]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	220c      	movs	r2, #12
 8002792:	4013      	ands	r3, r2
 8002794:	2b08      	cmp	r3, #8
 8002796:	d00e      	beq.n	80027b6 <HAL_RCC_OscConfig+0xce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002798:	4b99      	ldr	r3, [pc, #612]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	220c      	movs	r2, #12
 800279e:	4013      	ands	r3, r2
 80027a0:	2b0c      	cmp	r3, #12
 80027a2:	d116      	bne.n	80027d2 <HAL_RCC_OscConfig+0xea>
 80027a4:	4b96      	ldr	r3, [pc, #600]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	025b      	lsls	r3, r3, #9
 80027ac:	401a      	ands	r2, r3
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	025b      	lsls	r3, r3, #9
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d10d      	bne.n	80027d2 <HAL_RCC_OscConfig+0xea>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b6:	4b92      	ldr	r3, [pc, #584]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	029b      	lsls	r3, r3, #10
 80027be:	4013      	ands	r3, r2
 80027c0:	d100      	bne.n	80027c4 <HAL_RCC_OscConfig+0xdc>
 80027c2:	e06c      	b.n	800289e <HAL_RCC_OscConfig+0x1b6>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d168      	bne.n	800289e <HAL_RCC_OscConfig+0x1b6>
      {
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	f000 fc72 	bl	80030b6 <HAL_RCC_OscConfig+0x9ce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	025b      	lsls	r3, r3, #9
 80027da:	429a      	cmp	r2, r3
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_OscConfig+0x106>
 80027de:	4b88      	ldr	r3, [pc, #544]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 80027e0:	4a87      	ldr	r2, [pc, #540]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	2180      	movs	r1, #128	; 0x80
 80027e6:	0249      	lsls	r1, r1, #9
 80027e8:	430a      	orrs	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	e027      	b.n	800283e <HAL_RCC_OscConfig+0x156>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	23a0      	movs	r3, #160	; 0xa0
 80027f4:	02db      	lsls	r3, r3, #11
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d10e      	bne.n	8002818 <HAL_RCC_OscConfig+0x130>
 80027fa:	4b81      	ldr	r3, [pc, #516]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 80027fc:	4a80      	ldr	r2, [pc, #512]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	2180      	movs	r1, #128	; 0x80
 8002802:	02c9      	lsls	r1, r1, #11
 8002804:	430a      	orrs	r2, r1
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	4b7d      	ldr	r3, [pc, #500]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 800280a:	4a7d      	ldr	r2, [pc, #500]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	2180      	movs	r1, #128	; 0x80
 8002810:	0249      	lsls	r1, r1, #9
 8002812:	430a      	orrs	r2, r1
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	e012      	b.n	800283e <HAL_RCC_OscConfig+0x156>
 8002818:	4b79      	ldr	r3, [pc, #484]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 800281a:	4a79      	ldr	r2, [pc, #484]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	4979      	ldr	r1, [pc, #484]	; (8002a04 <HAL_RCC_OscConfig+0x31c>)
 8002820:	400a      	ands	r2, r1
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	4b76      	ldr	r3, [pc, #472]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	2380      	movs	r3, #128	; 0x80
 800282a:	025b      	lsls	r3, r3, #9
 800282c:	4013      	ands	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4b73      	ldr	r3, [pc, #460]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 8002834:	4a72      	ldr	r2, [pc, #456]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	4973      	ldr	r1, [pc, #460]	; (8002a08 <HAL_RCC_OscConfig+0x320>)
 800283a:	400a      	ands	r2, r1
 800283c:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d015      	beq.n	8002872 <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002846:	f7fe fecb 	bl	80015e0 <HAL_GetTick>
 800284a:	0003      	movs	r3, r0
 800284c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284e:	e009      	b.n	8002864 <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002850:	f7fe fec6 	bl	80015e0 <HAL_GetTick>
 8002854:	0002      	movs	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b64      	cmp	r3, #100	; 0x64
 800285c:	d902      	bls.n	8002864 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	f000 fc29 	bl	80030b6 <HAL_RCC_OscConfig+0x9ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002864:	4b66      	ldr	r3, [pc, #408]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	029b      	lsls	r3, r3, #10
 800286c:	4013      	ands	r3, r2
 800286e:	d0ef      	beq.n	8002850 <HAL_RCC_OscConfig+0x168>
 8002870:	e016      	b.n	80028a0 <HAL_RCC_OscConfig+0x1b8>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002872:	f7fe feb5 	bl	80015e0 <HAL_GetTick>
 8002876:	0003      	movs	r3, r0
 8002878:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287a:	e009      	b.n	8002890 <HAL_RCC_OscConfig+0x1a8>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800287c:	f7fe feb0 	bl	80015e0 <HAL_GetTick>
 8002880:	0002      	movs	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d902      	bls.n	8002890 <HAL_RCC_OscConfig+0x1a8>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	f000 fc13 	bl	80030b6 <HAL_RCC_OscConfig+0x9ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002890:	4b5b      	ldr	r3, [pc, #364]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	029b      	lsls	r3, r3, #10
 8002898:	4013      	ands	r3, r2
 800289a:	d1ef      	bne.n	800287c <HAL_RCC_OscConfig+0x194>
 800289c:	e000      	b.n	80028a0 <HAL_RCC_OscConfig+0x1b8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2202      	movs	r2, #2
 80028a6:	4013      	ands	r3, r2
 80028a8:	d100      	bne.n	80028ac <HAL_RCC_OscConfig+0x1c4>
 80028aa:	e08e      	b.n	80029ca <HAL_RCC_OscConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00e      	beq.n	80028d2 <HAL_RCC_OscConfig+0x1ea>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCC_OscConfig+0x1ea>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	2b09      	cmp	r3, #9
 80028c2:	d006      	beq.n	80028d2 <HAL_RCC_OscConfig+0x1ea>
 80028c4:	23c5      	movs	r3, #197	; 0xc5
 80028c6:	005a      	lsls	r2, r3, #1
 80028c8:	4b4c      	ldr	r3, [pc, #304]	; (80029fc <HAL_RCC_OscConfig+0x314>)
 80028ca:	0011      	movs	r1, r2
 80028cc:	0018      	movs	r0, r3
 80028ce:	f007 fee3 	bl	800a698 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b1f      	cmp	r3, #31
 80028d8:	d907      	bls.n	80028ea <HAL_RCC_OscConfig+0x202>
 80028da:	238c      	movs	r3, #140	; 0x8c
 80028dc:	33ff      	adds	r3, #255	; 0xff
 80028de:	001a      	movs	r2, r3
 80028e0:	4b46      	ldr	r3, [pc, #280]	; (80029fc <HAL_RCC_OscConfig+0x314>)
 80028e2:	0011      	movs	r1, r2
 80028e4:	0018      	movs	r0, r3
 80028e6:	f007 fed7 	bl	800a698 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028ea:	4b45      	ldr	r3, [pc, #276]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	220c      	movs	r2, #12
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d00b      	beq.n	800290e <HAL_RCC_OscConfig+0x226>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028f6:	4b42      	ldr	r3, [pc, #264]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	220c      	movs	r2, #12
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b0c      	cmp	r3, #12
 8002900:	d11c      	bne.n	800293c <HAL_RCC_OscConfig+0x254>
 8002902:	4b3f      	ldr	r3, [pc, #252]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	025b      	lsls	r3, r3, #9
 800290a:	4013      	ands	r3, r2
 800290c:	d116      	bne.n	800293c <HAL_RCC_OscConfig+0x254>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	4b3c      	ldr	r3, [pc, #240]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2204      	movs	r2, #4
 8002914:	4013      	ands	r3, r2
 8002916:	d006      	beq.n	8002926 <HAL_RCC_OscConfig+0x23e>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d002      	beq.n	8002926 <HAL_RCC_OscConfig+0x23e>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	f000 fbc8 	bl	80030b6 <HAL_RCC_OscConfig+0x9ce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002926:	4a36      	ldr	r2, [pc, #216]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 8002928:	4b35      	ldr	r3, [pc, #212]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	4937      	ldr	r1, [pc, #220]	; (8002a0c <HAL_RCC_OscConfig+0x324>)
 800292e:	4019      	ands	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	430b      	orrs	r3, r1
 8002938:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293a:	e046      	b.n	80029ca <HAL_RCC_OscConfig+0x2e2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d028      	beq.n	8002996 <HAL_RCC_OscConfig+0x2ae>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002944:	4a2e      	ldr	r2, [pc, #184]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 8002946:	4b2e      	ldr	r3, [pc, #184]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2109      	movs	r1, #9
 800294c:	438b      	bics	r3, r1
 800294e:	0019      	movs	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	430b      	orrs	r3, r1
 8002956:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7fe fe42 	bl	80015e0 <HAL_GetTick>
 800295c:	0003      	movs	r3, r0
 800295e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002960:	e009      	b.n	8002976 <HAL_RCC_OscConfig+0x28e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002962:	f7fe fe3d 	bl	80015e0 <HAL_GetTick>
 8002966:	0002      	movs	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d902      	bls.n	8002976 <HAL_RCC_OscConfig+0x28e>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	f000 fba0 	bl	80030b6 <HAL_RCC_OscConfig+0x9ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002976:	4b22      	ldr	r3, [pc, #136]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2204      	movs	r2, #4
 800297c:	4013      	ands	r3, r2
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x27a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002980:	4a1f      	ldr	r2, [pc, #124]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 8002982:	4b1f      	ldr	r3, [pc, #124]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4921      	ldr	r1, [pc, #132]	; (8002a0c <HAL_RCC_OscConfig+0x324>)
 8002988:	4019      	ands	r1, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	430b      	orrs	r3, r1
 8002992:	6053      	str	r3, [r2, #4]
 8002994:	e019      	b.n	80029ca <HAL_RCC_OscConfig+0x2e2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002996:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 8002998:	4a19      	ldr	r2, [pc, #100]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	2101      	movs	r1, #1
 800299e:	438a      	bics	r2, r1
 80029a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a2:	f7fe fe1d 	bl	80015e0 <HAL_GetTick>
 80029a6:	0003      	movs	r3, r0
 80029a8:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029aa:	e009      	b.n	80029c0 <HAL_RCC_OscConfig+0x2d8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ac:	f7fe fe18 	bl	80015e0 <HAL_GetTick>
 80029b0:	0002      	movs	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d902      	bls.n	80029c0 <HAL_RCC_OscConfig+0x2d8>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	f000 fb7b 	bl	80030b6 <HAL_RCC_OscConfig+0x9ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2204      	movs	r2, #4
 80029c6:	4013      	ands	r3, r2
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x2c4>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2210      	movs	r2, #16
 80029d0:	4013      	ands	r3, r2
 80029d2:	d100      	bne.n	80029d6 <HAL_RCC_OscConfig+0x2ee>
 80029d4:	e141      	b.n	8002c5a <HAL_RCC_OscConfig+0x572>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80029d6:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	220c      	movs	r2, #12
 80029dc:	4013      	ands	r3, r2
 80029de:	d000      	beq.n	80029e2 <HAL_RCC_OscConfig+0x2fa>
 80029e0:	e0a8      	b.n	8002b34 <HAL_RCC_OscConfig+0x44c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029e2:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <HAL_RCC_OscConfig+0x318>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4013      	ands	r3, r2
 80029ec:	d010      	beq.n	8002a10 <HAL_RCC_OscConfig+0x328>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	f000 fb5d 	bl	80030b6 <HAL_RCC_OscConfig+0x9ce>
 80029fc:	0800c108 	.word	0x0800c108
 8002a00:	40021000 	.word	0x40021000
 8002a04:	fffeffff 	.word	0xfffeffff
 8002a08:	fffbffff 	.word	0xfffbffff
 8002a0c:	ffffe0ff 	.word	0xffffe0ff
      }
      /* Otherwise, just the calibration and MSI range change are allowed */
      else
      {
       /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	2bff      	cmp	r3, #255	; 0xff
 8002a16:	d907      	bls.n	8002a28 <HAL_RCC_OscConfig+0x340>
 8002a18:	23d6      	movs	r3, #214	; 0xd6
 8002a1a:	33ff      	adds	r3, #255	; 0xff
 8002a1c:	001a      	movs	r2, r3
 8002a1e:	4bb1      	ldr	r3, [pc, #708]	; (8002ce4 <HAL_RCC_OscConfig+0x5fc>)
 8002a20:	0011      	movs	r1, r2
 8002a22:	0018      	movs	r0, r3
 8002a24:	f007 fe38 	bl	800a698 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d02a      	beq.n	8002a86 <HAL_RCC_OscConfig+0x39e>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1a      	ldr	r2, [r3, #32]
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	019b      	lsls	r3, r3, #6
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d024      	beq.n	8002a86 <HAL_RCC_OscConfig+0x39e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1a      	ldr	r2, [r3, #32]
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	01db      	lsls	r3, r3, #7
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d01e      	beq.n	8002a86 <HAL_RCC_OscConfig+0x39e>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a1a      	ldr	r2, [r3, #32]
 8002a4c:	23c0      	movs	r3, #192	; 0xc0
 8002a4e:	01db      	lsls	r3, r3, #7
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d018      	beq.n	8002a86 <HAL_RCC_OscConfig+0x39e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1a      	ldr	r2, [r3, #32]
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	021b      	lsls	r3, r3, #8
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d012      	beq.n	8002a86 <HAL_RCC_OscConfig+0x39e>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1a      	ldr	r2, [r3, #32]
 8002a64:	23a0      	movs	r3, #160	; 0xa0
 8002a66:	021b      	lsls	r3, r3, #8
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d00c      	beq.n	8002a86 <HAL_RCC_OscConfig+0x39e>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1a      	ldr	r2, [r3, #32]
 8002a70:	23c0      	movs	r3, #192	; 0xc0
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d006      	beq.n	8002a86 <HAL_RCC_OscConfig+0x39e>
 8002a78:	23eb      	movs	r3, #235	; 0xeb
 8002a7a:	005a      	lsls	r2, r3, #1
 8002a7c:	4b99      	ldr	r3, [pc, #612]	; (8002ce4 <HAL_RCC_OscConfig+0x5fc>)
 8002a7e:	0011      	movs	r1, r2
 8002a80:	0018      	movs	r0, r3
 8002a82:	f007 fe09 	bl	800a698 <assert_failed>

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1a      	ldr	r2, [r3, #32]
 8002a8a:	4b97      	ldr	r3, [pc, #604]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002a8c:	6859      	ldr	r1, [r3, #4]
 8002a8e:	23e0      	movs	r3, #224	; 0xe0
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	400b      	ands	r3, r1
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d91c      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x3ea>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 fda5 	bl	80035ec <RCC_SetFlashLatencyFromMSIRange>
 8002aa2:	1e03      	subs	r3, r0, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_RCC_OscConfig+0x3c2>
          {
            return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e305      	b.n	80030b6 <HAL_RCC_OscConfig+0x9ce>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aaa:	4a8f      	ldr	r2, [pc, #572]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002aac:	4b8e      	ldr	r3, [pc, #568]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	498e      	ldr	r1, [pc, #568]	; (8002cec <HAL_RCC_OscConfig+0x604>)
 8002ab2:	4019      	ands	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	6053      	str	r3, [r2, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002abc:	4a8a      	ldr	r2, [pc, #552]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002abe:	4b8a      	ldr	r3, [pc, #552]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	021b      	lsls	r3, r3, #8
 8002ac4:	0a19      	lsrs	r1, r3, #8
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	061b      	lsls	r3, r3, #24
 8002acc:	430b      	orrs	r3, r1
 8002ace:	6053      	str	r3, [r2, #4]
 8002ad0:	e01b      	b.n	8002b0a <HAL_RCC_OscConfig+0x422>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ad2:	4a85      	ldr	r2, [pc, #532]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002ad4:	4b84      	ldr	r3, [pc, #528]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	4984      	ldr	r1, [pc, #528]	; (8002cec <HAL_RCC_OscConfig+0x604>)
 8002ada:	4019      	ands	r1, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	6053      	str	r3, [r2, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ae4:	4a80      	ldr	r2, [pc, #512]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002ae6:	4b80      	ldr	r3, [pc, #512]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	021b      	lsls	r3, r3, #8
 8002aec:	0a19      	lsrs	r1, r3, #8
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	061b      	lsls	r3, r3, #24
 8002af4:	430b      	orrs	r3, r1
 8002af6:	6053      	str	r3, [r2, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	0018      	movs	r0, r3
 8002afe:	f000 fd75 	bl	80035ec <RCC_SetFlashLatencyFromMSIRange>
 8002b02:	1e03      	subs	r3, r0, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_OscConfig+0x422>
          {
            return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e2d5      	b.n	80030b6 <HAL_RCC_OscConfig+0x9ce>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	0b5b      	lsrs	r3, r3, #13
 8002b10:	3301      	adds	r3, #1
 8002b12:	2280      	movs	r2, #128	; 0x80
 8002b14:	0212      	lsls	r2, r2, #8
 8002b16:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8002b18:	4b73      	ldr	r3, [pc, #460]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	210f      	movs	r1, #15
 8002b20:	400b      	ands	r3, r1
 8002b22:	4973      	ldr	r1, [pc, #460]	; (8002cf0 <HAL_RCC_OscConfig+0x608>)
 8002b24:	5ccb      	ldrb	r3, [r1, r3]
 8002b26:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8002b28:	4b72      	ldr	r3, [pc, #456]	; (8002cf4 <HAL_RCC_OscConfig+0x60c>)
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f7fe fd2d 	bl	800158c <HAL_InitTick>
 8002b32:	e092      	b.n	8002c5a <HAL_RCC_OscConfig+0x572>
      }
    }
    else
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d009      	beq.n	8002b50 <HAL_RCC_OscConfig+0x468>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_OscConfig+0x468>
 8002b44:	4a6c      	ldr	r2, [pc, #432]	; (8002cf8 <HAL_RCC_OscConfig+0x610>)
 8002b46:	4b67      	ldr	r3, [pc, #412]	; (8002ce4 <HAL_RCC_OscConfig+0x5fc>)
 8002b48:	0011      	movs	r1, r2
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f007 fda4 	bl	800a698 <assert_failed>

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d066      	beq.n	8002c26 <HAL_RCC_OscConfig+0x53e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b58:	4b63      	ldr	r3, [pc, #396]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002b5a:	4a63      	ldr	r2, [pc, #396]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002b5c:	6812      	ldr	r2, [r2, #0]
 8002b5e:	2180      	movs	r1, #128	; 0x80
 8002b60:	0049      	lsls	r1, r1, #1
 8002b62:	430a      	orrs	r2, r1
 8002b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b66:	f7fe fd3b 	bl	80015e0 <HAL_GetTick>
 8002b6a:	0003      	movs	r3, r0
 8002b6c:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x49a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b70:	f7fe fd36 	bl	80015e0 <HAL_GetTick>
 8002b74:	0002      	movs	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x49a>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e299      	b.n	80030b6 <HAL_RCC_OscConfig+0x9ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8002b82:	4b59      	ldr	r3, [pc, #356]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x488>
          }
        }
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	2bff      	cmp	r3, #255	; 0xff
 8002b94:	d905      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x4ba>
 8002b96:	4a59      	ldr	r2, [pc, #356]	; (8002cfc <HAL_RCC_OscConfig+0x614>)
 8002b98:	4b52      	ldr	r3, [pc, #328]	; (8002ce4 <HAL_RCC_OscConfig+0x5fc>)
 8002b9a:	0011      	movs	r1, r2
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f007 fd7b 	bl	800a698 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d029      	beq.n	8002bfe <HAL_RCC_OscConfig+0x516>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1a      	ldr	r2, [r3, #32]
 8002bae:	2380      	movs	r3, #128	; 0x80
 8002bb0:	019b      	lsls	r3, r3, #6
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d023      	beq.n	8002bfe <HAL_RCC_OscConfig+0x516>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1a      	ldr	r2, [r3, #32]
 8002bba:	2380      	movs	r3, #128	; 0x80
 8002bbc:	01db      	lsls	r3, r3, #7
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d01d      	beq.n	8002bfe <HAL_RCC_OscConfig+0x516>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1a      	ldr	r2, [r3, #32]
 8002bc6:	23c0      	movs	r3, #192	; 0xc0
 8002bc8:	01db      	lsls	r3, r3, #7
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d017      	beq.n	8002bfe <HAL_RCC_OscConfig+0x516>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1a      	ldr	r2, [r3, #32]
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d011      	beq.n	8002bfe <HAL_RCC_OscConfig+0x516>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1a      	ldr	r2, [r3, #32]
 8002bde:	23a0      	movs	r3, #160	; 0xa0
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d00b      	beq.n	8002bfe <HAL_RCC_OscConfig+0x516>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1a      	ldr	r2, [r3, #32]
 8002bea:	23c0      	movs	r3, #192	; 0xc0
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d005      	beq.n	8002bfe <HAL_RCC_OscConfig+0x516>
 8002bf2:	4a43      	ldr	r2, [pc, #268]	; (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002bf4:	4b3b      	ldr	r3, [pc, #236]	; (8002ce4 <HAL_RCC_OscConfig+0x5fc>)
 8002bf6:	0011      	movs	r1, r2
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f007 fd4d 	bl	800a698 <assert_failed>

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bfe:	4a3a      	ldr	r2, [pc, #232]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002c00:	4b39      	ldr	r3, [pc, #228]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	4939      	ldr	r1, [pc, #228]	; (8002cec <HAL_RCC_OscConfig+0x604>)
 8002c06:	4019      	ands	r1, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	6053      	str	r3, [r2, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c10:	4a35      	ldr	r2, [pc, #212]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002c12:	4b35      	ldr	r3, [pc, #212]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	0a19      	lsrs	r1, r3, #8
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	061b      	lsls	r3, r3, #24
 8002c20:	430b      	orrs	r3, r1
 8002c22:	6053      	str	r3, [r2, #4]
 8002c24:	e019      	b.n	8002c5a <HAL_RCC_OscConfig+0x572>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c26:	4b30      	ldr	r3, [pc, #192]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002c28:	4a2f      	ldr	r2, [pc, #188]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	4935      	ldr	r1, [pc, #212]	; (8002d04 <HAL_RCC_OscConfig+0x61c>)
 8002c2e:	400a      	ands	r2, r1
 8002c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c32:	f7fe fcd5 	bl	80015e0 <HAL_GetTick>
 8002c36:	0003      	movs	r3, r0
 8002c38:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x566>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c3c:	f7fe fcd0 	bl	80015e0 <HAL_GetTick>
 8002c40:	0002      	movs	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x566>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e233      	b.n	80030b6 <HAL_RCC_OscConfig+0x9ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8002c4e:	4b26      	ldr	r3, [pc, #152]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4013      	ands	r3, r2
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }  
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2208      	movs	r2, #8
 8002c60:	4013      	ands	r3, r2
 8002c62:	d058      	beq.n	8002d16 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d009      	beq.n	8002c80 <HAL_RCC_OscConfig+0x598>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_OscConfig+0x598>
 8002c74:	4a24      	ldr	r2, [pc, #144]	; (8002d08 <HAL_RCC_OscConfig+0x620>)
 8002c76:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <HAL_RCC_OscConfig+0x5fc>)
 8002c78:	0011      	movs	r1, r2
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	f007 fd0c 	bl	800a698 <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d019      	beq.n	8002cbc <HAL_RCC_OscConfig+0x5d4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c88:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002c8a:	4a17      	ldr	r2, [pc, #92]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002c8c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c8e:	2101      	movs	r1, #1
 8002c90:	430a      	orrs	r2, r1
 8002c92:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c94:	f7fe fca4 	bl	80015e0 <HAL_GetTick>
 8002c98:	0003      	movs	r3, r0
 8002c9a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c9e:	f7fe fc9f 	bl	80015e0 <HAL_GetTick>
 8002ca2:	0002      	movs	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e202      	b.n	80030b6 <HAL_RCC_OscConfig+0x9ce>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d0f1      	beq.n	8002c9e <HAL_RCC_OscConfig+0x5b6>
 8002cba:	e02c      	b.n	8002d16 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002cbe:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <HAL_RCC_OscConfig+0x600>)
 8002cc0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	438a      	bics	r2, r1
 8002cc6:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc8:	f7fe fc8a 	bl	80015e0 <HAL_GetTick>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd0:	e01c      	b.n	8002d0c <HAL_RCC_OscConfig+0x624>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd2:	f7fe fc85 	bl	80015e0 <HAL_GetTick>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d915      	bls.n	8002d0c <HAL_RCC_OscConfig+0x624>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e1e8      	b.n	80030b6 <HAL_RCC_OscConfig+0x9ce>
 8002ce4:	0800c108 	.word	0x0800c108
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	ffff1fff 	.word	0xffff1fff
 8002cf0:	0800c55c 	.word	0x0800c55c
 8002cf4:	20000000 	.word	0x20000000
 8002cf8:	00000202 	.word	0x00000202
 8002cfc:	00000216 	.word	0x00000216
 8002d00:	00000217 	.word	0x00000217
 8002d04:	fffffeff 	.word	0xfffffeff
 8002d08:	00000236 	.word	0x00000236
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d0c:	4bca      	ldr	r3, [pc, #808]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d10:	2202      	movs	r2, #2
 8002d12:	4013      	ands	r3, r2
 8002d14:	d1dd      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x5ea>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2204      	movs	r2, #4
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d100      	bne.n	8002d22 <HAL_RCC_OscConfig+0x63a>
 8002d20:	e0c5      	b.n	8002eae <HAL_RCC_OscConfig+0x7c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d22:	2317      	movs	r3, #23
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d011      	beq.n	8002d56 <HAL_RCC_OscConfig+0x66e>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	2380      	movs	r3, #128	; 0x80
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d00b      	beq.n	8002d56 <HAL_RCC_OscConfig+0x66e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	23a0      	movs	r3, #160	; 0xa0
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d005      	beq.n	8002d56 <HAL_RCC_OscConfig+0x66e>
 8002d4a:	4abc      	ldr	r2, [pc, #752]	; (800303c <HAL_RCC_OscConfig+0x954>)
 8002d4c:	4bbc      	ldr	r3, [pc, #752]	; (8003040 <HAL_RCC_OscConfig+0x958>)
 8002d4e:	0011      	movs	r1, r2
 8002d50:	0018      	movs	r0, r3
 8002d52:	f007 fca1 	bl	800a698 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d56:	4bb8      	ldr	r3, [pc, #736]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d5a:	2380      	movs	r3, #128	; 0x80
 8002d5c:	055b      	lsls	r3, r3, #21
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d10a      	bne.n	8002d78 <HAL_RCC_OscConfig+0x690>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d62:	4bb5      	ldr	r3, [pc, #724]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002d64:	4ab4      	ldr	r2, [pc, #720]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002d66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d68:	2180      	movs	r1, #128	; 0x80
 8002d6a:	0549      	lsls	r1, r1, #21
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002d70:	2317      	movs	r3, #23
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d78:	4bb2      	ldr	r3, [pc, #712]	; (8003044 <HAL_RCC_OscConfig+0x95c>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4013      	ands	r3, r2
 8002d82:	d11a      	bne.n	8002dba <HAL_RCC_OscConfig+0x6d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d84:	4baf      	ldr	r3, [pc, #700]	; (8003044 <HAL_RCC_OscConfig+0x95c>)
 8002d86:	4aaf      	ldr	r2, [pc, #700]	; (8003044 <HAL_RCC_OscConfig+0x95c>)
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	2180      	movs	r1, #128	; 0x80
 8002d8c:	0049      	lsls	r1, r1, #1
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d92:	f7fe fc25 	bl	80015e0 <HAL_GetTick>
 8002d96:	0003      	movs	r3, r0
 8002d98:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x6c6>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d9c:	f7fe fc20 	bl	80015e0 <HAL_GetTick>
 8002da0:	0002      	movs	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b64      	cmp	r3, #100	; 0x64
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e183      	b.n	80030b6 <HAL_RCC_OscConfig+0x9ce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dae:	4ba5      	ldr	r3, [pc, #660]	; (8003044 <HAL_RCC_OscConfig+0x95c>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4013      	ands	r3, r2
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d107      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x6ee>
 8002dc6:	4b9c      	ldr	r3, [pc, #624]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002dc8:	4a9b      	ldr	r2, [pc, #620]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002dca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002dcc:	2180      	movs	r1, #128	; 0x80
 8002dce:	0049      	lsls	r1, r1, #1
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	651a      	str	r2, [r3, #80]	; 0x50
 8002dd4:	e031      	b.n	8002e3a <HAL_RCC_OscConfig+0x752>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10c      	bne.n	8002df8 <HAL_RCC_OscConfig+0x710>
 8002dde:	4b96      	ldr	r3, [pc, #600]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002de0:	4a95      	ldr	r2, [pc, #596]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002de2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002de4:	4998      	ldr	r1, [pc, #608]	; (8003048 <HAL_RCC_OscConfig+0x960>)
 8002de6:	400a      	ands	r2, r1
 8002de8:	651a      	str	r2, [r3, #80]	; 0x50
 8002dea:	4b93      	ldr	r3, [pc, #588]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002dec:	4a92      	ldr	r2, [pc, #584]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002dee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002df0:	4996      	ldr	r1, [pc, #600]	; (800304c <HAL_RCC_OscConfig+0x964>)
 8002df2:	400a      	ands	r2, r1
 8002df4:	651a      	str	r2, [r3, #80]	; 0x50
 8002df6:	e020      	b.n	8002e3a <HAL_RCC_OscConfig+0x752>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	23a0      	movs	r3, #160	; 0xa0
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d10e      	bne.n	8002e22 <HAL_RCC_OscConfig+0x73a>
 8002e04:	4b8c      	ldr	r3, [pc, #560]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002e06:	4a8c      	ldr	r2, [pc, #560]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002e08:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e0a:	2180      	movs	r1, #128	; 0x80
 8002e0c:	00c9      	lsls	r1, r1, #3
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	651a      	str	r2, [r3, #80]	; 0x50
 8002e12:	4b89      	ldr	r3, [pc, #548]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002e14:	4a88      	ldr	r2, [pc, #544]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002e16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e18:	2180      	movs	r1, #128	; 0x80
 8002e1a:	0049      	lsls	r1, r1, #1
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	651a      	str	r2, [r3, #80]	; 0x50
 8002e20:	e00b      	b.n	8002e3a <HAL_RCC_OscConfig+0x752>
 8002e22:	4b85      	ldr	r3, [pc, #532]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002e24:	4a84      	ldr	r2, [pc, #528]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002e26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e28:	4987      	ldr	r1, [pc, #540]	; (8003048 <HAL_RCC_OscConfig+0x960>)
 8002e2a:	400a      	ands	r2, r1
 8002e2c:	651a      	str	r2, [r3, #80]	; 0x50
 8002e2e:	4b82      	ldr	r3, [pc, #520]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002e30:	4a81      	ldr	r2, [pc, #516]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002e32:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e34:	4985      	ldr	r1, [pc, #532]	; (800304c <HAL_RCC_OscConfig+0x964>)
 8002e36:	400a      	ands	r2, r1
 8002e38:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d015      	beq.n	8002e6e <HAL_RCC_OscConfig+0x786>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e42:	f7fe fbcd 	bl	80015e0 <HAL_GetTick>
 8002e46:	0003      	movs	r3, r0
 8002e48:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4a:	e009      	b.n	8002e60 <HAL_RCC_OscConfig+0x778>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e4c:	f7fe fbc8 	bl	80015e0 <HAL_GetTick>
 8002e50:	0002      	movs	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	4a7e      	ldr	r2, [pc, #504]	; (8003050 <HAL_RCC_OscConfig+0x968>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x778>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e12a      	b.n	80030b6 <HAL_RCC_OscConfig+0x9ce>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e60:	4b75      	ldr	r3, [pc, #468]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002e62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e64:	2380      	movs	r3, #128	; 0x80
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d0ef      	beq.n	8002e4c <HAL_RCC_OscConfig+0x764>
 8002e6c:	e014      	b.n	8002e98 <HAL_RCC_OscConfig+0x7b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6e:	f7fe fbb7 	bl	80015e0 <HAL_GetTick>
 8002e72:	0003      	movs	r3, r0
 8002e74:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e76:	e009      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e78:	f7fe fbb2 	bl	80015e0 <HAL_GetTick>
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	4a73      	ldr	r2, [pc, #460]	; (8003050 <HAL_RCC_OscConfig+0x968>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x7a4>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e114      	b.n	80030b6 <HAL_RCC_OscConfig+0x9ce>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8c:	4b6a      	ldr	r3, [pc, #424]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002e8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e90:	2380      	movs	r3, #128	; 0x80
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4013      	ands	r3, r2
 8002e96:	d1ef      	bne.n	8002e78 <HAL_RCC_OscConfig+0x790>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e98:	2317      	movs	r3, #23
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d105      	bne.n	8002eae <HAL_RCC_OscConfig+0x7c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea2:	4b65      	ldr	r3, [pc, #404]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002ea4:	4a64      	ldr	r2, [pc, #400]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002ea6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ea8:	496a      	ldr	r1, [pc, #424]	; (8003054 <HAL_RCC_OscConfig+0x96c>)
 8002eaa:	400a      	ands	r2, r1
 8002eac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00d      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x7ea>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d009      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x7ea>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d005      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x7ea>
 8002ec6:	4a64      	ldr	r2, [pc, #400]	; (8003058 <HAL_RCC_OscConfig+0x970>)
 8002ec8:	4b5d      	ldr	r3, [pc, #372]	; (8003040 <HAL_RCC_OscConfig+0x958>)
 8002eca:	0011      	movs	r1, r2
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f007 fbe3 	bl	800a698 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d100      	bne.n	8002edc <HAL_RCC_OscConfig+0x7f4>
 8002eda:	e0eb      	b.n	80030b4 <HAL_RCC_OscConfig+0x9cc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002edc:	4b56      	ldr	r3, [pc, #344]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	220c      	movs	r2, #12
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b0c      	cmp	r3, #12
 8002ee6:	d100      	bne.n	8002eea <HAL_RCC_OscConfig+0x802>
 8002ee8:	e0e2      	b.n	80030b0 <HAL_RCC_OscConfig+0x9c8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d000      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x80c>
 8002ef2:	e0c2      	b.n	800307a <HAL_RCC_OscConfig+0x992>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00c      	beq.n	8002f16 <HAL_RCC_OscConfig+0x82e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f00:	2380      	movs	r3, #128	; 0x80
 8002f02:	025b      	lsls	r3, r3, #9
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d006      	beq.n	8002f16 <HAL_RCC_OscConfig+0x82e>
 8002f08:	23b7      	movs	r3, #183	; 0xb7
 8002f0a:	009a      	lsls	r2, r3, #2
 8002f0c:	4b4c      	ldr	r3, [pc, #304]	; (8003040 <HAL_RCC_OscConfig+0x958>)
 8002f0e:	0011      	movs	r1, r2
 8002f10:	0018      	movs	r0, r3
 8002f12:	f007 fbc1 	bl	800a698 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d035      	beq.n	8002f8a <HAL_RCC_OscConfig+0x8a2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	02db      	lsls	r3, r3, #11
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d02f      	beq.n	8002f8a <HAL_RCC_OscConfig+0x8a2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	031b      	lsls	r3, r3, #12
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d029      	beq.n	8002f8a <HAL_RCC_OscConfig+0x8a2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3a:	23c0      	movs	r3, #192	; 0xc0
 8002f3c:	031b      	lsls	r3, r3, #12
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d023      	beq.n	8002f8a <HAL_RCC_OscConfig+0x8a2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f46:	2380      	movs	r3, #128	; 0x80
 8002f48:	035b      	lsls	r3, r3, #13
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d01d      	beq.n	8002f8a <HAL_RCC_OscConfig+0x8a2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f52:	23a0      	movs	r3, #160	; 0xa0
 8002f54:	035b      	lsls	r3, r3, #13
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d017      	beq.n	8002f8a <HAL_RCC_OscConfig+0x8a2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f5e:	23c0      	movs	r3, #192	; 0xc0
 8002f60:	035b      	lsls	r3, r3, #13
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d011      	beq.n	8002f8a <HAL_RCC_OscConfig+0x8a2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6a:	23e0      	movs	r3, #224	; 0xe0
 8002f6c:	035b      	lsls	r3, r3, #13
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d00b      	beq.n	8002f8a <HAL_RCC_OscConfig+0x8a2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	039b      	lsls	r3, r3, #14
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d005      	beq.n	8002f8a <HAL_RCC_OscConfig+0x8a2>
 8002f7e:	4a37      	ldr	r2, [pc, #220]	; (800305c <HAL_RCC_OscConfig+0x974>)
 8002f80:	4b2f      	ldr	r3, [pc, #188]	; (8003040 <HAL_RCC_OscConfig+0x958>)
 8002f82:	0011      	movs	r1, r2
 8002f84:	0018      	movs	r0, r3
 8002f86:	f007 fb87 	bl	800a698 <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f8e:	2380      	movs	r3, #128	; 0x80
 8002f90:	03db      	lsls	r3, r3, #15
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d011      	beq.n	8002fba <HAL_RCC_OscConfig+0x8d2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	041b      	lsls	r3, r3, #16
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d00b      	beq.n	8002fba <HAL_RCC_OscConfig+0x8d2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fa6:	23c0      	movs	r3, #192	; 0xc0
 8002fa8:	041b      	lsls	r3, r3, #16
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d005      	beq.n	8002fba <HAL_RCC_OscConfig+0x8d2>
 8002fae:	4a2c      	ldr	r2, [pc, #176]	; (8003060 <HAL_RCC_OscConfig+0x978>)
 8002fb0:	4b23      	ldr	r3, [pc, #140]	; (8003040 <HAL_RCC_OscConfig+0x958>)
 8002fb2:	0011      	movs	r1, r2
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f007 fb6f 	bl	800a698 <assert_failed>
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fba:	4b1f      	ldr	r3, [pc, #124]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002fbc:	4a1e      	ldr	r2, [pc, #120]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	4928      	ldr	r1, [pc, #160]	; (8003064 <HAL_RCC_OscConfig+0x97c>)
 8002fc2:	400a      	ands	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc6:	f7fe fb0b 	bl	80015e0 <HAL_GetTick>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x8fa>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7fe fb06 	bl	80015e0 <HAL_GetTick>
 8002fd4:	0002      	movs	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x8fa>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e069      	b.n	80030b6 <HAL_RCC_OscConfig+0x9ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe2:	4b15      	ldr	r3, [pc, #84]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	2380      	movs	r3, #128	; 0x80
 8002fe8:	049b      	lsls	r3, r3, #18
 8002fea:	4013      	ands	r3, r2
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x8e8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fee:	4a12      	ldr	r2, [pc, #72]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	491c      	ldr	r1, [pc, #112]	; (8003068 <HAL_RCC_OscConfig+0x980>)
 8002ff6:	4019      	ands	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	4318      	orrs	r0, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	4303      	orrs	r3, r0
 8003008:	430b      	orrs	r3, r1
 800300a:	60d3      	str	r3, [r2, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 800300e:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <HAL_RCC_OscConfig+0x950>)
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	2180      	movs	r1, #128	; 0x80
 8003014:	0449      	lsls	r1, r1, #17
 8003016:	430a      	orrs	r2, r1
 8003018:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301a:	f7fe fae1 	bl	80015e0 <HAL_GetTick>
 800301e:	0003      	movs	r3, r0
 8003020:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003022:	e023      	b.n	800306c <HAL_RCC_OscConfig+0x984>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003024:	f7fe fadc 	bl	80015e0 <HAL_GetTick>
 8003028:	0002      	movs	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d91c      	bls.n	800306c <HAL_RCC_OscConfig+0x984>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e03f      	b.n	80030b6 <HAL_RCC_OscConfig+0x9ce>
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	40021000 	.word	0x40021000
 800303c:	00000262 	.word	0x00000262
 8003040:	0800c108 	.word	0x0800c108
 8003044:	40007000 	.word	0x40007000
 8003048:	fffffeff 	.word	0xfffffeff
 800304c:	fffffbff 	.word	0xfffffbff
 8003050:	00001388 	.word	0x00001388
 8003054:	efffffff 	.word	0xefffffff
 8003058:	000002d3 	.word	0x000002d3
 800305c:	000002dd 	.word	0x000002dd
 8003060:	000002de 	.word	0x000002de
 8003064:	feffffff 	.word	0xfeffffff
 8003068:	ff02ffff 	.word	0xff02ffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800306c:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <HAL_RCC_OscConfig+0x9d8>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	2380      	movs	r3, #128	; 0x80
 8003072:	049b      	lsls	r3, r3, #18
 8003074:	4013      	ands	r3, r2
 8003076:	d0d5      	beq.n	8003024 <HAL_RCC_OscConfig+0x93c>
 8003078:	e01c      	b.n	80030b4 <HAL_RCC_OscConfig+0x9cc>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307a:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <HAL_RCC_OscConfig+0x9d8>)
 800307c:	4a10      	ldr	r2, [pc, #64]	; (80030c0 <HAL_RCC_OscConfig+0x9d8>)
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	4910      	ldr	r1, [pc, #64]	; (80030c4 <HAL_RCC_OscConfig+0x9dc>)
 8003082:	400a      	ands	r2, r1
 8003084:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003086:	f7fe faab 	bl	80015e0 <HAL_GetTick>
 800308a:	0003      	movs	r3, r0
 800308c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x9ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003090:	f7fe faa6 	bl	80015e0 <HAL_GetTick>
 8003094:	0002      	movs	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x9ba>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e009      	b.n	80030b6 <HAL_RCC_OscConfig+0x9ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a2:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <HAL_RCC_OscConfig+0x9d8>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	2380      	movs	r3, #128	; 0x80
 80030a8:	049b      	lsls	r3, r3, #18
 80030aa:	4013      	ands	r3, r2
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x9a8>
 80030ae:	e001      	b.n	80030b4 <HAL_RCC_OscConfig+0x9cc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <HAL_RCC_OscConfig+0x9ce>
    }
  }
  
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	0018      	movs	r0, r3
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b006      	add	sp, #24
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	40021000 	.word	0x40021000
 80030c4:	feffffff 	.word	0xfeffffff

080030c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d106      	bne.n	80030ea <HAL_RCC_ClockConfig+0x22>
 80030dc:	23cf      	movs	r3, #207	; 0xcf
 80030de:	009a      	lsls	r2, r3, #2
 80030e0:	4b9e      	ldr	r3, [pc, #632]	; (800335c <HAL_RCC_ClockConfig+0x294>)
 80030e2:	0011      	movs	r1, r2
 80030e4:	0018      	movs	r0, r3
 80030e6:	f007 fad7 	bl	800a698 <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2201      	movs	r2, #1
 80030f0:	4013      	ands	r3, r2
 80030f2:	d114      	bne.n	800311e <HAL_RCC_ClockConfig+0x56>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2202      	movs	r2, #2
 80030fa:	4013      	ands	r3, r2
 80030fc:	d10f      	bne.n	800311e <HAL_RCC_ClockConfig+0x56>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2204      	movs	r2, #4
 8003104:	4013      	ands	r3, r2
 8003106:	d10a      	bne.n	800311e <HAL_RCC_ClockConfig+0x56>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2208      	movs	r2, #8
 800310e:	4013      	ands	r3, r2
 8003110:	d105      	bne.n	800311e <HAL_RCC_ClockConfig+0x56>
 8003112:	4a93      	ldr	r2, [pc, #588]	; (8003360 <HAL_RCC_ClockConfig+0x298>)
 8003114:	4b91      	ldr	r3, [pc, #580]	; (800335c <HAL_RCC_ClockConfig+0x294>)
 8003116:	0011      	movs	r1, r2
 8003118:	0018      	movs	r0, r3
 800311a:	f007 fabd 	bl	800a698 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d008      	beq.n	8003136 <HAL_RCC_ClockConfig+0x6e>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d005      	beq.n	8003136 <HAL_RCC_ClockConfig+0x6e>
 800312a:	4a8e      	ldr	r2, [pc, #568]	; (8003364 <HAL_RCC_ClockConfig+0x29c>)
 800312c:	4b8b      	ldr	r3, [pc, #556]	; (800335c <HAL_RCC_ClockConfig+0x294>)
 800312e:	0011      	movs	r1, r2
 8003130:	0018      	movs	r0, r3
 8003132:	f007 fab1 	bl	800a698 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003136:	4b8c      	ldr	r3, [pc, #560]	; (8003368 <HAL_RCC_ClockConfig+0x2a0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2201      	movs	r2, #1
 800313c:	401a      	ands	r2, r3
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d211      	bcs.n	8003168 <HAL_RCC_ClockConfig+0xa0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003144:	4b88      	ldr	r3, [pc, #544]	; (8003368 <HAL_RCC_ClockConfig+0x2a0>)
 8003146:	4a88      	ldr	r2, [pc, #544]	; (8003368 <HAL_RCC_ClockConfig+0x2a0>)
 8003148:	6812      	ldr	r2, [r2, #0]
 800314a:	2101      	movs	r1, #1
 800314c:	438a      	bics	r2, r1
 800314e:	0011      	movs	r1, r2
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003156:	4b84      	ldr	r3, [pc, #528]	; (8003368 <HAL_RCC_ClockConfig+0x2a0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2201      	movs	r2, #1
 800315c:	401a      	ands	r2, r3
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_ClockConfig+0xa0>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e17b      	b.n	8003460 <HAL_RCC_ClockConfig+0x398>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2202      	movs	r2, #2
 800316e:	4013      	ands	r3, r2
 8003170:	d033      	beq.n	80031da <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d025      	beq.n	80031c6 <HAL_RCC_ClockConfig+0xfe>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b80      	cmp	r3, #128	; 0x80
 8003180:	d021      	beq.n	80031c6 <HAL_RCC_ClockConfig+0xfe>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b90      	cmp	r3, #144	; 0x90
 8003188:	d01d      	beq.n	80031c6 <HAL_RCC_ClockConfig+0xfe>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2ba0      	cmp	r3, #160	; 0xa0
 8003190:	d019      	beq.n	80031c6 <HAL_RCC_ClockConfig+0xfe>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	2bb0      	cmp	r3, #176	; 0xb0
 8003198:	d015      	beq.n	80031c6 <HAL_RCC_ClockConfig+0xfe>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2bc0      	cmp	r3, #192	; 0xc0
 80031a0:	d011      	beq.n	80031c6 <HAL_RCC_ClockConfig+0xfe>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2bd0      	cmp	r3, #208	; 0xd0
 80031a8:	d00d      	beq.n	80031c6 <HAL_RCC_ClockConfig+0xfe>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2be0      	cmp	r3, #224	; 0xe0
 80031b0:	d009      	beq.n	80031c6 <HAL_RCC_ClockConfig+0xfe>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2bf0      	cmp	r3, #240	; 0xf0
 80031b8:	d005      	beq.n	80031c6 <HAL_RCC_ClockConfig+0xfe>
 80031ba:	4a6c      	ldr	r2, [pc, #432]	; (800336c <HAL_RCC_ClockConfig+0x2a4>)
 80031bc:	4b67      	ldr	r3, [pc, #412]	; (800335c <HAL_RCC_ClockConfig+0x294>)
 80031be:	0011      	movs	r1, r2
 80031c0:	0018      	movs	r0, r3
 80031c2:	f007 fa69 	bl	800a698 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c6:	4a6a      	ldr	r2, [pc, #424]	; (8003370 <HAL_RCC_ClockConfig+0x2a8>)
 80031c8:	4b69      	ldr	r3, [pc, #420]	; (8003370 <HAL_RCC_ClockConfig+0x2a8>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	21f0      	movs	r1, #240	; 0xf0
 80031ce:	438b      	bics	r3, r1
 80031d0:	0019      	movs	r1, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	430b      	orrs	r3, r1
 80031d8:	60d3      	str	r3, [r2, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2201      	movs	r2, #1
 80031e0:	4013      	ands	r3, r2
 80031e2:	d100      	bne.n	80031e6 <HAL_RCC_ClockConfig+0x11e>
 80031e4:	e0a0      	b.n	8003328 <HAL_RCC_ClockConfig+0x260>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d012      	beq.n	8003214 <HAL_RCC_ClockConfig+0x14c>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d00e      	beq.n	8003214 <HAL_RCC_ClockConfig+0x14c>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d00a      	beq.n	8003214 <HAL_RCC_ClockConfig+0x14c>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b03      	cmp	r3, #3
 8003204:	d006      	beq.n	8003214 <HAL_RCC_ClockConfig+0x14c>
 8003206:	23d7      	movs	r3, #215	; 0xd7
 8003208:	009a      	lsls	r2, r3, #2
 800320a:	4b54      	ldr	r3, [pc, #336]	; (800335c <HAL_RCC_ClockConfig+0x294>)
 800320c:	0011      	movs	r1, r2
 800320e:	0018      	movs	r0, r3
 8003210:	f007 fa42 	bl	800a698 <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b02      	cmp	r3, #2
 800321a:	d107      	bne.n	800322c <HAL_RCC_ClockConfig+0x164>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321c:	4b54      	ldr	r3, [pc, #336]	; (8003370 <HAL_RCC_ClockConfig+0x2a8>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	2380      	movs	r3, #128	; 0x80
 8003222:	029b      	lsls	r3, r3, #10
 8003224:	4013      	ands	r3, r2
 8003226:	d120      	bne.n	800326a <HAL_RCC_ClockConfig+0x1a2>
      {
        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e119      	b.n	8003460 <HAL_RCC_ClockConfig+0x398>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b03      	cmp	r3, #3
 8003232:	d107      	bne.n	8003244 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003234:	4b4e      	ldr	r3, [pc, #312]	; (8003370 <HAL_RCC_ClockConfig+0x2a8>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	2380      	movs	r3, #128	; 0x80
 800323a:	049b      	lsls	r3, r3, #18
 800323c:	4013      	ands	r3, r2
 800323e:	d114      	bne.n	800326a <HAL_RCC_ClockConfig+0x1a2>
      {
        return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e10d      	b.n	8003460 <HAL_RCC_ClockConfig+0x398>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d106      	bne.n	800325a <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324c:	4b48      	ldr	r3, [pc, #288]	; (8003370 <HAL_RCC_ClockConfig+0x2a8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2204      	movs	r2, #4
 8003252:	4013      	ands	r3, r2
 8003254:	d109      	bne.n	800326a <HAL_RCC_ClockConfig+0x1a2>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e102      	b.n	8003460 <HAL_RCC_ClockConfig+0x398>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800325a:	4b45      	ldr	r3, [pc, #276]	; (8003370 <HAL_RCC_ClockConfig+0x2a8>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4013      	ands	r3, r2
 8003264:	d101      	bne.n	800326a <HAL_RCC_ClockConfig+0x1a2>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e0fa      	b.n	8003460 <HAL_RCC_ClockConfig+0x398>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800326a:	4a41      	ldr	r2, [pc, #260]	; (8003370 <HAL_RCC_ClockConfig+0x2a8>)
 800326c:	4b40      	ldr	r3, [pc, #256]	; (8003370 <HAL_RCC_ClockConfig+0x2a8>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2103      	movs	r1, #3
 8003272:	438b      	bics	r3, r1
 8003274:	0019      	movs	r1, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	430b      	orrs	r3, r1
 800327c:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800327e:	f7fe f9af 	bl	80015e0 <HAL_GetTick>
 8003282:	0003      	movs	r3, r0
 8003284:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d111      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x1ea>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800328e:	e009      	b.n	80032a4 <HAL_RCC_ClockConfig+0x1dc>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003290:	f7fe f9a6 	bl	80015e0 <HAL_GetTick>
 8003294:	0002      	movs	r2, r0
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	4a36      	ldr	r2, [pc, #216]	; (8003374 <HAL_RCC_ClockConfig+0x2ac>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_ClockConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e0dd      	b.n	8003460 <HAL_RCC_ClockConfig+0x398>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032a4:	4b32      	ldr	r3, [pc, #200]	; (8003370 <HAL_RCC_ClockConfig+0x2a8>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	220c      	movs	r2, #12
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d1ef      	bne.n	8003290 <HAL_RCC_ClockConfig+0x1c8>
 80032b0:	e03a      	b.n	8003328 <HAL_RCC_ClockConfig+0x260>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b03      	cmp	r3, #3
 80032b8:	d111      	bne.n	80032de <HAL_RCC_ClockConfig+0x216>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ba:	e009      	b.n	80032d0 <HAL_RCC_ClockConfig+0x208>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032bc:	f7fe f990 	bl	80015e0 <HAL_GetTick>
 80032c0:	0002      	movs	r2, r0
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	4a2b      	ldr	r2, [pc, #172]	; (8003374 <HAL_RCC_ClockConfig+0x2ac>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_ClockConfig+0x208>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e0c7      	b.n	8003460 <HAL_RCC_ClockConfig+0x398>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032d0:	4b27      	ldr	r3, [pc, #156]	; (8003370 <HAL_RCC_ClockConfig+0x2a8>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	220c      	movs	r2, #12
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b0c      	cmp	r3, #12
 80032da:	d1ef      	bne.n	80032bc <HAL_RCC_ClockConfig+0x1f4>
 80032dc:	e024      	b.n	8003328 <HAL_RCC_ClockConfig+0x260>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d11b      	bne.n	800331e <HAL_RCC_ClockConfig+0x256>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032e6:	e009      	b.n	80032fc <HAL_RCC_ClockConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e8:	f7fe f97a 	bl	80015e0 <HAL_GetTick>
 80032ec:	0002      	movs	r2, r0
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	4a20      	ldr	r2, [pc, #128]	; (8003374 <HAL_RCC_ClockConfig+0x2ac>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_ClockConfig+0x234>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e0b1      	b.n	8003460 <HAL_RCC_ClockConfig+0x398>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032fc:	4b1c      	ldr	r3, [pc, #112]	; (8003370 <HAL_RCC_ClockConfig+0x2a8>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	220c      	movs	r2, #12
 8003302:	4013      	ands	r3, r2
 8003304:	2b04      	cmp	r3, #4
 8003306:	d1ef      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x220>
 8003308:	e00e      	b.n	8003328 <HAL_RCC_ClockConfig+0x260>
    }      
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800330a:	f7fe f969 	bl	80015e0 <HAL_GetTick>
 800330e:	0002      	movs	r2, r0
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	4a17      	ldr	r2, [pc, #92]	; (8003374 <HAL_RCC_ClockConfig+0x2ac>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCC_ClockConfig+0x256>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e0a0      	b.n	8003460 <HAL_RCC_ClockConfig+0x398>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800331e:	4b14      	ldr	r3, [pc, #80]	; (8003370 <HAL_RCC_ClockConfig+0x2a8>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	220c      	movs	r2, #12
 8003324:	4013      	ands	r3, r2
 8003326:	d1f0      	bne.n	800330a <HAL_RCC_ClockConfig+0x242>
        }
      }
    }
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003328:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <HAL_RCC_ClockConfig+0x2a0>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2201      	movs	r2, #1
 800332e:	401a      	ands	r2, r3
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d920      	bls.n	8003378 <HAL_RCC_ClockConfig+0x2b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <HAL_RCC_ClockConfig+0x2a0>)
 8003338:	4a0b      	ldr	r2, [pc, #44]	; (8003368 <HAL_RCC_ClockConfig+0x2a0>)
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	2101      	movs	r1, #1
 800333e:	438a      	bics	r2, r1
 8003340:	0011      	movs	r1, r2
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003348:	4b07      	ldr	r3, [pc, #28]	; (8003368 <HAL_RCC_ClockConfig+0x2a0>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2201      	movs	r2, #1
 800334e:	401a      	ands	r2, r3
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d010      	beq.n	8003378 <HAL_RCC_ClockConfig+0x2b0>
    {
      return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e082      	b.n	8003460 <HAL_RCC_ClockConfig+0x398>
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	0800c108 	.word	0x0800c108
 8003360:	0000033d 	.word	0x0000033d
 8003364:	0000033e 	.word	0x0000033e
 8003368:	40022000 	.word	0x40022000
 800336c:	00000355 	.word	0x00000355
 8003370:	40021000 	.word	0x40021000
 8003374:	00001388 	.word	0x00001388
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2204      	movs	r2, #4
 800337e:	4013      	ands	r3, r2
 8003380:	d02a      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x310>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01d      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x2fe>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	429a      	cmp	r2, r3
 8003394:	d017      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x2fe>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	23a0      	movs	r3, #160	; 0xa0
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	429a      	cmp	r2, r3
 80033a0:	d011      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x2fe>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	23c0      	movs	r3, #192	; 0xc0
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d00b      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x2fe>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	23e0      	movs	r3, #224	; 0xe0
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d005      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x2fe>
 80033ba:	4a2b      	ldr	r2, [pc, #172]	; (8003468 <HAL_RCC_ClockConfig+0x3a0>)
 80033bc:	4b2b      	ldr	r3, [pc, #172]	; (800346c <HAL_RCC_ClockConfig+0x3a4>)
 80033be:	0011      	movs	r1, r2
 80033c0:	0018      	movs	r0, r3
 80033c2:	f007 f969 	bl	800a698 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c6:	4a2a      	ldr	r2, [pc, #168]	; (8003470 <HAL_RCC_ClockConfig+0x3a8>)
 80033c8:	4b29      	ldr	r3, [pc, #164]	; (8003470 <HAL_RCC_ClockConfig+0x3a8>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	4929      	ldr	r1, [pc, #164]	; (8003474 <HAL_RCC_ClockConfig+0x3ac>)
 80033ce:	4019      	ands	r1, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	430b      	orrs	r3, r1
 80033d6:	60d3      	str	r3, [r2, #12]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2208      	movs	r2, #8
 80033de:	4013      	ands	r3, r2
 80033e0:	d02c      	beq.n	800343c <HAL_RCC_ClockConfig+0x374>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d01e      	beq.n	8003428 <HAL_RCC_ClockConfig+0x360>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691a      	ldr	r2, [r3, #16]
 80033ee:	2380      	movs	r3, #128	; 0x80
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d018      	beq.n	8003428 <HAL_RCC_ClockConfig+0x360>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691a      	ldr	r2, [r3, #16]
 80033fa:	23a0      	movs	r3, #160	; 0xa0
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	429a      	cmp	r2, r3
 8003400:	d012      	beq.n	8003428 <HAL_RCC_ClockConfig+0x360>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	23c0      	movs	r3, #192	; 0xc0
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	429a      	cmp	r2, r3
 800340c:	d00c      	beq.n	8003428 <HAL_RCC_ClockConfig+0x360>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	23e0      	movs	r3, #224	; 0xe0
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	429a      	cmp	r2, r3
 8003418:	d006      	beq.n	8003428 <HAL_RCC_ClockConfig+0x360>
 800341a:	23f2      	movs	r3, #242	; 0xf2
 800341c:	009a      	lsls	r2, r3, #2
 800341e:	4b13      	ldr	r3, [pc, #76]	; (800346c <HAL_RCC_ClockConfig+0x3a4>)
 8003420:	0011      	movs	r1, r2
 8003422:	0018      	movs	r0, r3
 8003424:	f007 f938 	bl	800a698 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003428:	4a11      	ldr	r2, [pc, #68]	; (8003470 <HAL_RCC_ClockConfig+0x3a8>)
 800342a:	4b11      	ldr	r3, [pc, #68]	; (8003470 <HAL_RCC_ClockConfig+0x3a8>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	4912      	ldr	r1, [pc, #72]	; (8003478 <HAL_RCC_ClockConfig+0x3b0>)
 8003430:	4019      	ands	r1, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	430b      	orrs	r3, r1
 800343a:	60d3      	str	r3, [r2, #12]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800343c:	f000 f822 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8003440:	0001      	movs	r1, r0
 8003442:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_RCC_ClockConfig+0x3a8>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	091b      	lsrs	r3, r3, #4
 8003448:	220f      	movs	r2, #15
 800344a:	4013      	ands	r3, r2
 800344c:	4a0b      	ldr	r2, [pc, #44]	; (800347c <HAL_RCC_ClockConfig+0x3b4>)
 800344e:	5cd3      	ldrb	r3, [r2, r3]
 8003450:	000a      	movs	r2, r1
 8003452:	40da      	lsrs	r2, r3
 8003454:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <HAL_RCC_ClockConfig+0x3b8>)
 8003456:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003458:	2000      	movs	r0, #0
 800345a:	f7fe f897 	bl	800158c <HAL_InitTick>
  
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	0018      	movs	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	b004      	add	sp, #16
 8003466:	bd80      	pop	{r7, pc}
 8003468:	000003c1 	.word	0x000003c1
 800346c:	0800c108 	.word	0x0800c108
 8003470:	40021000 	.word	0x40021000
 8003474:	fffff8ff 	.word	0xfffff8ff
 8003478:	ffffc7ff 	.word	0xffffc7ff
 800347c:	0800c55c 	.word	0x0800c55c
 8003480:	20000000 	.word	0x20000000

08003484 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, pllm = 0, plld = 0, pllvco = 0, msiclkrange = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	2300      	movs	r3, #0
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	2300      	movs	r3, #0
 8003494:	607b      	str	r3, [r7, #4]
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	2300      	movs	r3, #0
 800349c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800349e:	2300      	movs	r3, #0
 80034a0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80034a2:	4b32      	ldr	r3, [pc, #200]	; (800356c <HAL_RCC_GetSysClockFreq+0xe8>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	220c      	movs	r2, #12
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d00e      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0x4c>
 80034b2:	2b0c      	cmp	r3, #12
 80034b4:	d00f      	beq.n	80034d6 <HAL_RCC_GetSysClockFreq+0x52>
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d145      	bne.n	8003546 <HAL_RCC_GetSysClockFreq+0xc2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 80034ba:	4b2c      	ldr	r3, [pc, #176]	; (800356c <HAL_RCC_GetSysClockFreq+0xe8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2210      	movs	r2, #16
 80034c0:	4013      	ands	r3, r2
 80034c2:	d002      	beq.n	80034ca <HAL_RCC_GetSysClockFreq+0x46>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80034c4:	4b2a      	ldr	r3, [pc, #168]	; (8003570 <HAL_RCC_GetSysClockFreq+0xec>)
 80034c6:	613b      	str	r3, [r7, #16]
      }
      else 
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80034c8:	e04b      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0xde>
        sysclockfreq =  HSI_VALUE;
 80034ca:	4b2a      	ldr	r3, [pc, #168]	; (8003574 <HAL_RCC_GetSysClockFreq+0xf0>)
 80034cc:	613b      	str	r3, [r7, #16]
      break;
 80034ce:	e048      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034d0:	4b29      	ldr	r3, [pc, #164]	; (8003578 <HAL_RCC_GetSysClockFreq+0xf4>)
 80034d2:	613b      	str	r3, [r7, #16]
      break;
 80034d4:	e045      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	0c9b      	lsrs	r3, r3, #18
 80034da:	220f      	movs	r2, #15
 80034dc:	4013      	ands	r3, r2
 80034de:	4a27      	ldr	r2, [pc, #156]	; (800357c <HAL_RCC_GetSysClockFreq+0xf8>)
 80034e0:	5cd3      	ldrb	r3, [r2, r3]
 80034e2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	0d9b      	lsrs	r3, r3, #22
 80034e8:	2203      	movs	r2, #3
 80034ea:	4013      	ands	r3, r2
 80034ec:	3301      	adds	r3, #1
 80034ee:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034f0:	4b1e      	ldr	r3, [pc, #120]	; (800356c <HAL_RCC_GetSysClockFreq+0xe8>)
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	2380      	movs	r3, #128	; 0x80
 80034f6:	025b      	lsls	r3, r3, #9
 80034f8:	4013      	ands	r3, r2
 80034fa:	d009      	beq.n	8003510 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4a1e      	ldr	r2, [pc, #120]	; (8003578 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003500:	4353      	muls	r3, r2
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	0018      	movs	r0, r3
 8003506:	f7fc fdff 	bl	8000108 <__udivsi3>
 800350a:	0003      	movs	r3, r0
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	e017      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0xbc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8003510:	4b16      	ldr	r3, [pc, #88]	; (800356c <HAL_RCC_GetSysClockFreq+0xe8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2210      	movs	r2, #16
 8003516:	4013      	ands	r3, r2
 8003518:	d009      	beq.n	800352e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	4a14      	ldr	r2, [pc, #80]	; (8003570 <HAL_RCC_GetSysClockFreq+0xec>)
 800351e:	4353      	muls	r3, r2
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	0018      	movs	r0, r3
 8003524:	f7fc fdf0 	bl	8000108 <__udivsi3>
 8003528:	0003      	movs	r3, r0
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	e008      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0xbc>
        }
        else 
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	4a10      	ldr	r2, [pc, #64]	; (8003574 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003532:	4353      	muls	r3, r2
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	0018      	movs	r0, r3
 8003538:	f7fc fde6 	bl	8000108 <__udivsi3>
 800353c:	0003      	movs	r3, r0
 800353e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	613b      	str	r3, [r7, #16]
      break;
 8003544:	e00d      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8003546:	4b09      	ldr	r3, [pc, #36]	; (800356c <HAL_RCC_GetSysClockFreq+0xe8>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	0b5b      	lsrs	r3, r3, #13
 800354c:	2207      	movs	r2, #7
 800354e:	4013      	ands	r3, r2
 8003550:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	3301      	adds	r3, #1
 8003556:	2280      	movs	r2, #128	; 0x80
 8003558:	0212      	lsls	r2, r2, #8
 800355a:	409a      	lsls	r2, r3
 800355c:	0013      	movs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
      break;
 8003560:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003562:	693b      	ldr	r3, [r7, #16]
}
 8003564:	0018      	movs	r0, r3
 8003566:	46bd      	mov	sp, r7
 8003568:	b006      	add	sp, #24
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40021000 	.word	0x40021000
 8003570:	003d0900 	.word	0x003d0900
 8003574:	00f42400 	.word	0x00f42400
 8003578:	007a1200 	.word	0x007a1200
 800357c:	0800c574 	.word	0x0800c574

08003580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003584:	4b02      	ldr	r3, [pc, #8]	; (8003590 <HAL_RCC_GetHCLKFreq+0x10>)
 8003586:	681b      	ldr	r3, [r3, #0]
}
 8003588:	0018      	movs	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	20000000 	.word	0x20000000

08003594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003598:	f7ff fff2 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 800359c:	0001      	movs	r1, r0
 800359e:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	0a1b      	lsrs	r3, r3, #8
 80035a4:	2207      	movs	r2, #7
 80035a6:	4013      	ands	r3, r2
 80035a8:	4a04      	ldr	r2, [pc, #16]	; (80035bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80035aa:	5cd3      	ldrb	r3, [r2, r3]
 80035ac:	40d9      	lsrs	r1, r3
 80035ae:	000b      	movs	r3, r1
}    
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	40021000 	.word	0x40021000
 80035bc:	0800c56c 	.word	0x0800c56c

080035c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80035c4:	f7ff ffdc 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 80035c8:	0001      	movs	r1, r0
 80035ca:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	0adb      	lsrs	r3, r3, #11
 80035d0:	2207      	movs	r2, #7
 80035d2:	4013      	ands	r3, r2
 80035d4:	4a04      	ldr	r2, [pc, #16]	; (80035e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035d6:	5cd3      	ldrb	r3, [r2, r3]
 80035d8:	40d9      	lsrs	r1, r3
 80035da:	000b      	movs	r3, r1
} 
 80035dc:	0018      	movs	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	40021000 	.word	0x40021000
 80035e8:	0800c56c 	.word	0x0800c56c

080035ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	60fb      	str	r3, [r7, #12]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035f8:	2300      	movs	r3, #0
 80035fa:	60bb      	str	r3, [r7, #8]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80035fc:	4b23      	ldr	r3, [pc, #140]	; (800368c <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	22f0      	movs	r2, #240	; 0xf0
 8003602:	4013      	ands	r3, r2
 8003604:	d12b      	bne.n	800365e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003606:	4b21      	ldr	r3, [pc, #132]	; (800368c <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8003608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	055b      	lsls	r3, r3, #21
 800360e:	4013      	ands	r3, r2
 8003610:	d006      	beq.n	8003620 <RCC_SetFlashLatencyFromMSIRange+0x34>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003612:	4b1f      	ldr	r3, [pc, #124]	; (8003690 <RCC_SetFlashLatencyFromMSIRange+0xa4>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	23c0      	movs	r3, #192	; 0xc0
 8003618:	015b      	lsls	r3, r3, #5
 800361a:	4013      	ands	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	e012      	b.n	8003646 <RCC_SetFlashLatencyFromMSIRange+0x5a>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003620:	4b1a      	ldr	r3, [pc, #104]	; (800368c <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8003622:	4a1a      	ldr	r2, [pc, #104]	; (800368c <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8003624:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003626:	2180      	movs	r1, #128	; 0x80
 8003628:	0549      	lsls	r1, r1, #21
 800362a:	430a      	orrs	r2, r1
 800362c:	639a      	str	r2, [r3, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800362e:	4b18      	ldr	r3, [pc, #96]	; (8003690 <RCC_SetFlashLatencyFromMSIRange+0xa4>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	23c0      	movs	r3, #192	; 0xc0
 8003634:	015b      	lsls	r3, r3, #5
 8003636:	4013      	ands	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]
      __HAL_RCC_PWR_CLK_DISABLE();
 800363a:	4b14      	ldr	r3, [pc, #80]	; (800368c <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 800363c:	4a13      	ldr	r2, [pc, #76]	; (800368c <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 800363e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003640:	4914      	ldr	r1, [pc, #80]	; (8003694 <RCC_SetFlashLatencyFromMSIRange+0xa8>)
 8003642:	400a      	ands	r2, r1
 8003644:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	23c0      	movs	r3, #192	; 0xc0
 800364a:	015b      	lsls	r3, r3, #5
 800364c:	429a      	cmp	r2, r3
 800364e:	d106      	bne.n	800365e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	23c0      	movs	r3, #192	; 0xc0
 8003654:	021b      	lsls	r3, r3, #8
 8003656:	429a      	cmp	r2, r3
 8003658:	d101      	bne.n	800365e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800365a:	2301      	movs	r3, #1
 800365c:	60bb      	str	r3, [r7, #8]
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 800365e:	4b0e      	ldr	r3, [pc, #56]	; (8003698 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003660:	4a0d      	ldr	r2, [pc, #52]	; (8003698 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	2101      	movs	r1, #1
 8003666:	438a      	bics	r2, r1
 8003668:	0011      	movs	r1, r2
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	430a      	orrs	r2, r1
 800366e:	601a      	str	r2, [r3, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003670:	4b09      	ldr	r3, [pc, #36]	; (8003698 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2201      	movs	r2, #1
 8003676:	401a      	ands	r2, r3
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	429a      	cmp	r2, r3
 800367c:	d001      	beq.n	8003682 <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <RCC_SetFlashLatencyFromMSIRange+0x98>
  }
  
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	0018      	movs	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	b004      	add	sp, #16
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40021000 	.word	0x40021000
 8003690:	40007000 	.word	0x40007000
 8003694:	efffffff 	.word	0xefffffff
 8003698:	40022000 	.word	0x40022000

0800369c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2bbf      	cmp	r3, #191	; 0xbf
 80036b2:	d904      	bls.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x22>
 80036b4:	4b68      	ldr	r3, [pc, #416]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036b6:	217e      	movs	r1, #126	; 0x7e
 80036b8:	0018      	movs	r0, r3
 80036ba:	f006 ffed 	bl	800a698 <assert_failed>
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2220      	movs	r2, #32
 80036c4:	4013      	ands	r3, r2
 80036c6:	d100      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x2e>
 80036c8:	e102      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
#endif /* LCD */
     )
  {
    /* check for RTC Parameters used to output RTCCLK */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2220      	movs	r2, #32
 80036d0:	4013      	ands	r3, r2
 80036d2:	d02c      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d028      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x92>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	2380      	movs	r3, #128	; 0x80
 80036e2:	025b      	lsls	r3, r3, #9
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d022      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x92>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	029b      	lsls	r3, r3, #10
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d01c      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x92>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	23c0      	movs	r3, #192	; 0xc0
 80036fa:	029b      	lsls	r3, r3, #10
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d016      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x92>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	2398      	movs	r3, #152	; 0x98
 8003706:	035b      	lsls	r3, r3, #13
 8003708:	429a      	cmp	r2, r3
 800370a:	d010      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x92>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	238c      	movs	r3, #140	; 0x8c
 8003712:	039b      	lsls	r3, r3, #14
 8003714:	429a      	cmp	r2, r3
 8003716:	d00a      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x92>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	23cc      	movs	r3, #204	; 0xcc
 800371e:	039b      	lsls	r3, r3, #14
 8003720:	429a      	cmp	r2, r3
 8003722:	d004      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x92>
 8003724:	4b4c      	ldr	r3, [pc, #304]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003726:	218a      	movs	r1, #138	; 0x8a
 8003728:	0018      	movs	r0, r3
 800372a:	f006 ffb5 	bl	800a698 <assert_failed>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800372e:	2317      	movs	r3, #23
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	2200      	movs	r2, #0
 8003734:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003736:	4b49      	ldr	r3, [pc, #292]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800373a:	2380      	movs	r3, #128	; 0x80
 800373c:	055b      	lsls	r3, r3, #21
 800373e:	4013      	ands	r3, r2
 8003740:	d10a      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003742:	4b46      	ldr	r3, [pc, #280]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003744:	4a45      	ldr	r2, [pc, #276]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003746:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003748:	2180      	movs	r1, #128	; 0x80
 800374a:	0549      	lsls	r1, r1, #21
 800374c:	430a      	orrs	r2, r1
 800374e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003750:	2317      	movs	r3, #23
 8003752:	18fb      	adds	r3, r7, r3
 8003754:	2201      	movs	r2, #1
 8003756:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003758:	4b41      	ldr	r3, [pc, #260]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	2380      	movs	r3, #128	; 0x80
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	4013      	ands	r3, r2
 8003762:	d11a      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003764:	4b3e      	ldr	r3, [pc, #248]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003766:	4a3e      	ldr	r2, [pc, #248]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	2180      	movs	r1, #128	; 0x80
 800376c:	0049      	lsls	r1, r1, #1
 800376e:	430a      	orrs	r2, r1
 8003770:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003772:	f7fd ff35 	bl	80015e0 <HAL_GetTick>
 8003776:	0003      	movs	r3, r0
 8003778:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377a:	e008      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xf2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377c:	f7fd ff30 	bl	80015e0 <HAL_GetTick>
 8003780:	0002      	movs	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b64      	cmp	r3, #100	; 0x64
 8003788:	d901      	bls.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xf2>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e167      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378e:	4b34      	ldr	r3, [pc, #208]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	2380      	movs	r3, #128	; 0x80
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4013      	ands	r3, r2
 8003798:	d0f0      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */ 
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800379a:	4b30      	ldr	r3, [pc, #192]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	23c0      	movs	r3, #192	; 0xc0
 80037a0:	039b      	lsls	r3, r3, #14
 80037a2:	4013      	ands	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	23c0      	movs	r3, #192	; 0xc0
 80037ac:	039b      	lsls	r3, r3, #14
 80037ae:	401a      	ands	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d010      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	23c0      	movs	r3, #192	; 0xc0
 80037bc:	029b      	lsls	r3, r3, #10
 80037be:	401a      	ands	r2, r3
 80037c0:	23c0      	movs	r3, #192	; 0xc0
 80037c2:	029b      	lsls	r3, r3, #10
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d107      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80037c8:	4b24      	ldr	r3, [pc, #144]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	2380      	movs	r3, #128	; 0x80
 80037ce:	029b      	lsls	r3, r3, #10
 80037d0:	4013      	ands	r3, r2
 80037d2:	d001      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* To update HSE divider, first switch-OFF HSE clock oscillator*/
        return HAL_ERROR; 
 80037d4:	2301      	movs	r3, #1
 80037d6:	e142      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80037d8:	4b20      	ldr	r3, [pc, #128]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80037da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037dc:	23c0      	movs	r3, #192	; 0xc0
 80037de:	029b      	lsls	r3, r3, #10
 80037e0:	4013      	ands	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
    
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d048      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	23c0      	movs	r3, #192	; 0xc0
 80037f0:	029b      	lsls	r3, r3, #10
 80037f2:	401a      	ands	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d040      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2220      	movs	r2, #32
 8003800:	4013      	ands	r3, r2
 8003802:	d03b      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003804:	4b15      	ldr	r3, [pc, #84]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003808:	4a16      	ldr	r2, [pc, #88]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800380a:	4013      	ands	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
      
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800380e:	4b13      	ldr	r3, [pc, #76]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003810:	4a12      	ldr	r2, [pc, #72]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003812:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003814:	2180      	movs	r1, #128	; 0x80
 8003816:	0309      	lsls	r1, r1, #12
 8003818:	430a      	orrs	r2, r1
 800381a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800381c:	4b0f      	ldr	r3, [pc, #60]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800381e:	4a0f      	ldr	r2, [pc, #60]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003820:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003822:	4911      	ldr	r1, [pc, #68]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003824:	400a      	ands	r2, r1
 8003826:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003828:	4b0c      	ldr	r3, [pc, #48]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	651a      	str	r2, [r3, #80]	; 0x50
      
       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	4013      	ands	r3, r2
 8003836:	d021      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7fd fed2 	bl	80015e0 <HAL_GetTick>
 800383c:	0003      	movs	r3, r0
 800383e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003840:	e016      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003842:	f7fd fecd 	bl	80015e0 <HAL_GetTick>
 8003846:	0002      	movs	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	4a07      	ldr	r2, [pc, #28]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d90e      	bls.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e103      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	0800c140 	.word	0x0800c140
 800385c:	40021000 	.word	0x40021000
 8003860:	40007000 	.word	0x40007000
 8003864:	fffcffff 	.word	0xfffcffff
 8003868:	fff7ffff 	.word	0xfff7ffff
 800386c:	00001388 	.word	0x00001388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003870:	4b7d      	ldr	r3, [pc, #500]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003872:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003874:	2380      	movs	r3, #128	; 0x80
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4013      	ands	r3, r2
 800387a:	d0e2      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	23c0      	movs	r3, #192	; 0xc0
 8003882:	029b      	lsls	r3, r3, #10
 8003884:	401a      	ands	r2, r3
 8003886:	23c0      	movs	r3, #192	; 0xc0
 8003888:	029b      	lsls	r3, r3, #10
 800388a:	429a      	cmp	r2, r3
 800388c:	d10b      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800388e:	4a76      	ldr	r2, [pc, #472]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003890:	4b75      	ldr	r3, [pc, #468]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4975      	ldr	r1, [pc, #468]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003896:	4019      	ands	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6858      	ldr	r0, [r3, #4]
 800389c:	23c0      	movs	r3, #192	; 0xc0
 800389e:	039b      	lsls	r3, r3, #14
 80038a0:	4003      	ands	r3, r0
 80038a2:	430b      	orrs	r3, r1
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	4a70      	ldr	r2, [pc, #448]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80038a8:	4b6f      	ldr	r3, [pc, #444]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80038aa:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6858      	ldr	r0, [r3, #4]
 80038b0:	23c0      	movs	r3, #192	; 0xc0
 80038b2:	029b      	lsls	r3, r3, #10
 80038b4:	4003      	ands	r3, r0
 80038b6:	430b      	orrs	r3, r1
 80038b8:	6513      	str	r3, [r2, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038ba:	2317      	movs	r3, #23
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d105      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c4:	4b68      	ldr	r3, [pc, #416]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80038c6:	4a68      	ldr	r2, [pc, #416]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80038c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038ca:	4969      	ldr	r1, [pc, #420]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80038cc:	400a      	ands	r2, r1
 80038ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  
#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2201      	movs	r2, #1
 80038d6:	4013      	ands	r3, r2
 80038d8:	d01e      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d010      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x268>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d00c      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x268>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d008      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x268>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d004      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x268>
 80038fa:	4b5e      	ldr	r3, [pc, #376]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80038fc:	21f2      	movs	r1, #242	; 0xf2
 80038fe:	0018      	movs	r0, r3
 8003900:	f006 feca 	bl	800a698 <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003904:	4a58      	ldr	r2, [pc, #352]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003906:	4b58      	ldr	r3, [pc, #352]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390a:	2103      	movs	r1, #3
 800390c:	438b      	bics	r3, r1
 800390e:	0019      	movs	r1, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	430b      	orrs	r3, r1
 8003916:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */
  
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2202      	movs	r2, #2
 800391e:	4013      	ands	r3, r2
 8003920:	d01e      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d010      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	2b04      	cmp	r3, #4
 8003930:	d00c      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	2b0c      	cmp	r3, #12
 8003938:	d008      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	2b08      	cmp	r3, #8
 8003940:	d004      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003942:	4b4c      	ldr	r3, [pc, #304]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8003944:	21fd      	movs	r1, #253	; 0xfd
 8003946:	0018      	movs	r0, r3
 8003948:	f006 fea6 	bl	800a698 <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800394c:	4a46      	ldr	r2, [pc, #280]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800394e:	4b46      	ldr	r3, [pc, #280]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003952:	210c      	movs	r1, #12
 8003954:	438b      	bics	r3, r1
 8003956:	0019      	movs	r1, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	430b      	orrs	r3, r1
 800395e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
  
  /*------------------------------ LPUART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2204      	movs	r2, #4
 8003966:	4013      	ands	r3, r2
 8003968:	d026      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d019      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	2380      	movs	r3, #128	; 0x80
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	429a      	cmp	r2, r3
 800397c:	d013      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	23c0      	movs	r3, #192	; 0xc0
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	429a      	cmp	r2, r3
 8003988:	d00d      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	2380      	movs	r3, #128	; 0x80
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	429a      	cmp	r2, r3
 8003994:	d007      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8003996:	2308      	movs	r3, #8
 8003998:	33ff      	adds	r3, #255	; 0xff
 800399a:	001a      	movs	r2, r3
 800399c:	4b35      	ldr	r3, [pc, #212]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800399e:	0011      	movs	r1, r2
 80039a0:	0018      	movs	r0, r3
 80039a2:	f006 fe79 	bl	800a698 <assert_failed>
    
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039a6:	4a30      	ldr	r2, [pc, #192]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80039a8:	4b2f      	ldr	r3, [pc, #188]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80039aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ac:	4932      	ldr	r1, [pc, #200]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ae:	4019      	ands	r1, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	430b      	orrs	r3, r1
 80039b6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2208      	movs	r2, #8
 80039be:	4013      	ands	r3, r2
 80039c0:	d020      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d013      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695a      	ldr	r2, [r3, #20]
 80039ce:	2380      	movs	r3, #128	; 0x80
 80039d0:	015b      	lsls	r3, r3, #5
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d00d      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695a      	ldr	r2, [r3, #20]
 80039da:	2380      	movs	r3, #128	; 0x80
 80039dc:	019b      	lsls	r3, r3, #6
 80039de:	429a      	cmp	r2, r3
 80039e0:	d007      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80039e2:	2312      	movs	r3, #18
 80039e4:	33ff      	adds	r3, #255	; 0xff
 80039e6:	001a      	movs	r2, r3
 80039e8:	4b22      	ldr	r3, [pc, #136]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80039ea:	0011      	movs	r1, r2
 80039ec:	0018      	movs	r0, r3
 80039ee:	f006 fe53 	bl	800a698 <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039f2:	4a1d      	ldr	r2, [pc, #116]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80039f4:	4b1c      	ldr	r3, [pc, #112]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80039f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f8:	4920      	ldr	r1, [pc, #128]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fa:	4019      	ands	r1, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	430b      	orrs	r3, r1
 8003a02:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */
  
  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2280      	movs	r2, #128	; 0x80
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d026      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d019      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	2380      	movs	r3, #128	; 0x80
 8003a1c:	02db      	lsls	r3, r3, #11
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d013      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	2380      	movs	r3, #128	; 0x80
 8003a28:	031b      	lsls	r3, r3, #12
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d00d      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699a      	ldr	r2, [r3, #24]
 8003a32:	23c0      	movs	r3, #192	; 0xc0
 8003a34:	031b      	lsls	r3, r3, #12
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d007      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003a3a:	2330      	movs	r3, #48	; 0x30
 8003a3c:	33ff      	adds	r3, #255	; 0xff
 8003a3e:	001a      	movs	r2, r3
 8003a40:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8003a42:	0011      	movs	r1, r2
 8003a44:	0018      	movs	r0, r3
 8003a46:	f006 fe27 	bl	800a698 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003a4a:	4a07      	ldr	r2, [pc, #28]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003a4c:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a50:	490b      	ldr	r1, [pc, #44]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a52:	4019      	ands	r1, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	0018      	movs	r0, r3
 8003a60:	46bd      	mov	sp, r7
 8003a62:	b006      	add	sp, #24
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	ffcfffff 	.word	0xffcfffff
 8003a70:	efffffff 	.word	0xefffffff
 8003a74:	0800c140 	.word	0x0800c140
 8003a78:	fffff3ff 	.word	0xfffff3ff
 8003a7c:	ffffcfff 	.word	0xffffcfff
 8003a80:	fff3ffff 	.word	0xfff3ffff

08003a84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_I2C3     I2C3 peripheral clock (*)
  * @note   (*) means that this peripheral is not present on all the devices
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t temp_reg = 0U, clkprediv = 0U, frequency = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
  uint32_t srcclk = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60bb      	str	r3, [r7, #8]
#if defined(USB)
    uint32_t pllmul = 0U, plldiv = 0U, pllvco = 0U;
#endif /* USB */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2bbf      	cmp	r3, #191	; 0xbf
 8003aa0:	d906      	bls.n	8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
 8003aa2:	23ca      	movs	r3, #202	; 0xca
 8003aa4:	005a      	lsls	r2, r3, #1
 8003aa6:	4b9d      	ldr	r3, [pc, #628]	; (8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003aa8:	0011      	movs	r1, r2
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f006 fdf4 	bl	800a698 <assert_failed>
  
  switch (PeriphClk)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b20      	cmp	r3, #32
 8003ab4:	d900      	bls.n	8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
 8003ab6:	e12b      	b.n	8003d10 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	009a      	lsls	r2, r3, #2
 8003abc:	4b98      	ldr	r3, [pc, #608]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8003abe:	18d3      	adds	r3, r2, r3
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	469f      	mov	pc, r3
#if defined(LCD)
  case RCC_PERIPHCLK_LCD:
#endif /* LCD */
    {
      /* Get RCC CSR configuration ------------------------------------------------------*/
      temp_reg = RCC->CSR;
 8003ac4:	4b97      	ldr	r3, [pc, #604]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac8:	613b      	str	r3, [r7, #16]

      /* Get the current RTC source */
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003aca:	4b96      	ldr	r3, [pc, #600]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003acc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ace:	23c0      	movs	r3, #192	; 0xc0
 8003ad0:	029b      	lsls	r3, r3, #10
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	60bb      	str	r3, [r7, #8]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	2380      	movs	r3, #128	; 0x80
 8003ada:	025b      	lsls	r3, r3, #9
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d108      	bne.n	8003af2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	2380      	movs	r3, #128	; 0x80
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d003      	beq.n	8003af2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
      {
        frequency = LSE_VALUE;
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	e03a      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	2380      	movs	r3, #128	; 0x80
 8003af6:	029b      	lsls	r3, r3, #10
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d106      	bne.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x86>
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	2202      	movs	r2, #2
 8003b00:	4013      	ands	r3, r2
 8003b02:	d002      	beq.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x86>
      {
        frequency = LSI_VALUE;
 8003b04:	4b88      	ldr	r3, [pc, #544]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	e02e      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
      }
      /* Check if HSE is ready and if RTC clock selection is HSE */
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIVX) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	23c0      	movs	r3, #192	; 0xc0
 8003b0e:	029b      	lsls	r3, r3, #10
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d126      	bne.n	8003b62 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 8003b14:	4b83      	ldr	r3, [pc, #524]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	2380      	movs	r3, #128	; 0x80
 8003b1a:	029b      	lsls	r3, r3, #10
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d020      	beq.n	8003b62 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
      {
        /* Get the current HSE clock divider */
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 8003b20:	4b80      	ldr	r3, [pc, #512]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	23c0      	movs	r3, #192	; 0xc0
 8003b26:	039b      	lsls	r3, r3, #14
 8003b28:	4013      	ands	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]

        switch (clkprediv)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2280      	movs	r2, #128	; 0x80
 8003b30:	0392      	lsls	r2, r2, #14
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00b      	beq.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8003b36:	22c0      	movs	r2, #192	; 0xc0
 8003b38:	0392      	lsls	r2, r2, #14
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d004      	beq.n	8003b48 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8003b3e:	2280      	movs	r2, #128	; 0x80
 8003b40:	0352      	lsls	r2, r2, #13
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d006      	beq.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8003b46:	e008      	b.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
        {
          case RCC_RTC_HSE_DIV_16:  /* HSE DIV16 has been selected */
          {
            frequency = HSE_VALUE / 16U;
 8003b48:	4b78      	ldr	r3, [pc, #480]	; (8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8003b4a:	617b      	str	r3, [r7, #20]
            break;
 8003b4c:	e008      	b.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
          }
          case RCC_RTC_HSE_DIV_8:   /* HSE DIV8 has been selected  */
          {
            frequency = HSE_VALUE / 8U;
 8003b4e:	4b78      	ldr	r3, [pc, #480]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8003b50:	617b      	str	r3, [r7, #20]
            break;
 8003b52:	e005      	b.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
          }
          case RCC_RTC_HSE_DIV_4:   /* HSE DIV4 has been selected  */
          {
            frequency = HSE_VALUE / 4U;
 8003b54:	4b77      	ldr	r3, [pc, #476]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8003b56:	617b      	str	r3, [r7, #20]
            break;
 8003b58:	e002      	b.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
          }
          default:                  /* HSE DIV2 has been selected  */
          {
            frequency = HSE_VALUE / 2U;
 8003b5a:	4b77      	ldr	r3, [pc, #476]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003b5c:	617b      	str	r3, [r7, #20]
            break;
 8003b5e:	46c0      	nop			; (mov r8, r8)
          }
        }
      }
 8003b60:	e002      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
      /* Clock not enabled for RTC */
      else
      {
        frequency = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
      }
      break;
 8003b66:	e0d4      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8003b68:	e0d3      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
#endif /* USB */
#if defined(RCC_CCIPR_USART1SEL)
  case RCC_PERIPHCLK_USART1:
    {
      /* Get the current USART1 source */
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003b6a:	4b6e      	ldr	r3, [pc, #440]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6e:	2203      	movs	r2, #3
 8003b70:	4013      	ands	r3, r2
 8003b72:	60bb      	str	r3, [r7, #8]

      /* Check if USART1 clock selection is PCLK2 */
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d104      	bne.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
      {
        frequency = HAL_RCC_GetPCLK2Freq();
 8003b7a:	f7ff fd21 	bl	80035c0 <HAL_RCC_GetPCLK2Freq>
 8003b7e:	0003      	movs	r3, r0
 8003b80:	617b      	str	r3, [r7, #20]
      /* Clock not enabled for USART1*/
      else
      {
        frequency = 0U;
      }
      break;
 8003b82:	e0c6      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d107      	bne.n	8003b9a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 8003b8a:	4b66      	ldr	r3, [pc, #408]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2204      	movs	r2, #4
 8003b90:	4013      	ands	r3, r2
 8003b92:	d002      	beq.n	8003b9a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        frequency = HSI_VALUE;
 8003b94:	4b69      	ldr	r3, [pc, #420]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	e017      	b.n	8003bca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d104      	bne.n	8003baa <HAL_RCCEx_GetPeriphCLKFreq+0x126>
        frequency = HAL_RCC_GetSysClockFreq();
 8003ba0:	f7ff fc70 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	617b      	str	r3, [r7, #20]
      break;
 8003ba8:	e0b3      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d109      	bne.n	8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8003bb0:	4b5c      	ldr	r3, [pc, #368]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003bb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d003      	beq.n	8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = LSE_VALUE;
 8003bbc:	2380      	movs	r3, #128	; 0x80
 8003bbe:	021b      	lsls	r3, r3, #8
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	e002      	b.n	8003bca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]
      break;
 8003bc8:	e0a3      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8003bca:	e0a2      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
    }
#endif /* RCC_CCIPR_USART1SEL */
  case RCC_PERIPHCLK_USART2:
    {
      /* Get the current USART2 source */
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003bcc:	4b55      	ldr	r3, [pc, #340]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd0:	220c      	movs	r2, #12
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	60bb      	str	r3, [r7, #8]

      /* Check if USART2 clock selection is PCLK1 */
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d104      	bne.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8003bdc:	f7ff fcda 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 8003be0:	0003      	movs	r3, r0
 8003be2:	617b      	str	r3, [r7, #20]
      /* Clock not enabled for USART2*/
      else
      {
        frequency = 0U;
      }
      break;
 8003be4:	e095      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d107      	bne.n	8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x178>
 8003bec:	4b4d      	ldr	r3, [pc, #308]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2204      	movs	r2, #4
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d002      	beq.n	8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x178>
        frequency = HSI_VALUE;
 8003bf6:	4b51      	ldr	r3, [pc, #324]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	e017      	b.n	8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d104      	bne.n	8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
        frequency = HAL_RCC_GetSysClockFreq();
 8003c02:	f7ff fc3f 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8003c06:	0003      	movs	r3, r0
 8003c08:	617b      	str	r3, [r7, #20]
      break;
 8003c0a:	e082      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b0c      	cmp	r3, #12
 8003c10:	d109      	bne.n	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8003c12:	4b44      	ldr	r3, [pc, #272]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003c14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d003      	beq.n	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
        frequency = LSE_VALUE;
 8003c1e:	2380      	movs	r3, #128	; 0x80
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	e002      	b.n	8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
        frequency = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
      break;
 8003c2a:	e072      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8003c2c:	e071      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
    }
  case RCC_PERIPHCLK_LPUART1:
    {
      /* Get the current LPUART1 source */
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003c2e:	4b3d      	ldr	r3, [pc, #244]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003c30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c32:	23c0      	movs	r3, #192	; 0xc0
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	4013      	ands	r3, r2
 8003c38:	60bb      	str	r3, [r7, #8]

      /* Check if LPUART1 clock selection is PCLK1 */
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d104      	bne.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8003c40:	f7ff fca8 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 8003c44:	0003      	movs	r3, r0
 8003c46:	617b      	str	r3, [r7, #20]
      /* Clock not enabled for LPUART1*/
      else
      {
        frequency = 0U;
      }
      break;
 8003c48:	e063      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d107      	bne.n	8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8003c54:	4b33      	ldr	r3, [pc, #204]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2204      	movs	r2, #4
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d002      	beq.n	8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        frequency = HSI_VALUE;
 8003c5e:	4b37      	ldr	r3, [pc, #220]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	e01b      	b.n	8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0x218>
      else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	2380      	movs	r3, #128	; 0x80
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d104      	bne.n	8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
        frequency = HAL_RCC_GetSysClockFreq();
 8003c6e:	f7ff fc09 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8003c72:	0003      	movs	r3, r0
 8003c74:	617b      	str	r3, [r7, #20]
      break;
 8003c76:	e04c      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	23c0      	movs	r3, #192	; 0xc0
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d109      	bne.n	8003c96 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 8003c82:	4b28      	ldr	r3, [pc, #160]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003c84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c86:	2380      	movs	r3, #128	; 0x80
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d003      	beq.n	8003c96 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
        frequency = LSE_VALUE;
 8003c8e:	2380      	movs	r3, #128	; 0x80
 8003c90:	021b      	lsls	r3, r3, #8
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	e002      	b.n	8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0x218>
        frequency = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
      break;
 8003c9a:	e03a      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8003c9c:	e039      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
    }    
  case RCC_PERIPHCLK_I2C1:
    {
      /* Get the current I2C1 source */
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003c9e:	4b21      	ldr	r3, [pc, #132]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003ca0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ca2:	23c0      	movs	r3, #192	; 0xc0
 8003ca4:	019b      	lsls	r3, r3, #6
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	60bb      	str	r3, [r7, #8]

      /* Check if I2C1 clock selection is PCLK1 */
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d104      	bne.n	8003cba <HAL_RCCEx_GetPeriphCLKFreq+0x236>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8003cb0:	f7ff fc70 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 8003cb4:	0003      	movs	r3, r0
 8003cb6:	617b      	str	r3, [r7, #20]
      /* Clock not enabled for I2C1*/
      else
      {
        frequency = 0U;
      }
      break;
 8003cb8:	e02b      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	2380      	movs	r3, #128	; 0x80
 8003cbe:	019b      	lsls	r3, r3, #6
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d107      	bne.n	8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
 8003cc4:	4b17      	ldr	r3, [pc, #92]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2204      	movs	r2, #4
 8003cca:	4013      	ands	r3, r2
 8003ccc:	d002      	beq.n	8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
        frequency = HSI_VALUE;
 8003cce:	4b1b      	ldr	r3, [pc, #108]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003cd0:	617b      	str	r3, [r7, #20]
      break;
 8003cd2:	e01e      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	2380      	movs	r3, #128	; 0x80
 8003cd8:	015b      	lsls	r3, r3, #5
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d104      	bne.n	8003ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        frequency = HAL_RCC_GetSysClockFreq();
 8003cde:	f7ff fbd1 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8003ce2:	0003      	movs	r3, r0
 8003ce4:	617b      	str	r3, [r7, #20]
      break;
 8003ce6:	e014      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
        frequency = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]
      break;
 8003cec:	e011      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
#if defined(I2C2)
  case RCC_PERIPHCLK_I2C2:
    {

      /* Check if I2C2 on APB1 clock enabled*/
      if (READ_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))==RCC_APB1ENR_I2C2EN)
 8003cee:	4b0d      	ldr	r3, [pc, #52]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cf2:	2380      	movs	r3, #128	; 0x80
 8003cf4:	03db      	lsls	r3, r3, #15
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	2380      	movs	r3, #128	; 0x80
 8003cfa:	03db      	lsls	r3, r3, #15
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d104      	bne.n	8003d0a <HAL_RCCEx_GetPeriphCLKFreq+0x286>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8003d00:	f7ff fc48 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 8003d04:	0003      	movs	r3, r0
 8003d06:	617b      	str	r3, [r7, #20]
      }
      else
      {
        frequency = 0U;
      }
      break;
 8003d08:	e003      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
        frequency = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]
      break;
 8003d0e:	e000      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
      break;
    } 
#endif /* RCC_CCIPR_I2C3SEL */
  default: 
    {
      break;
 8003d10:	46c0      	nop			; (mov r8, r8)
    }
  }
  return(frequency);
 8003d12:	697b      	ldr	r3, [r7, #20]
}
 8003d14:	0018      	movs	r0, r3
 8003d16:	46bd      	mov	sp, r7
 8003d18:	b006      	add	sp, #24
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	0800c140 	.word	0x0800c140
 8003d20:	0800c3a0 	.word	0x0800c3a0
 8003d24:	40021000 	.word	0x40021000
 8003d28:	00009088 	.word	0x00009088
 8003d2c:	0007a120 	.word	0x0007a120
 8003d30:	000f4240 	.word	0x000f4240
 8003d34:	001e8480 	.word	0x001e8480
 8003d38:	003d0900 	.word	0x003d0900
 8003d3c:	00f42400 	.word	0x00f42400

08003d40 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e0e2      	b.n	8003f18 <HAL_RTC_Init+0x1d8>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a72      	ldr	r2, [pc, #456]	; (8003f20 <HAL_RTC_Init+0x1e0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d004      	beq.n	8003d66 <HAL_RTC_Init+0x26>
 8003d5c:	4b71      	ldr	r3, [pc, #452]	; (8003f24 <HAL_RTC_Init+0x1e4>)
 8003d5e:	21b9      	movs	r1, #185	; 0xb9
 8003d60:	0018      	movs	r0, r3
 8003d62:	f006 fc99 	bl	800a698 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b40      	cmp	r3, #64	; 0x40
 8003d6c:	d008      	beq.n	8003d80 <HAL_RTC_Init+0x40>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d004      	beq.n	8003d80 <HAL_RTC_Init+0x40>
 8003d76:	4b6b      	ldr	r3, [pc, #428]	; (8003f24 <HAL_RTC_Init+0x1e4>)
 8003d78:	21ba      	movs	r1, #186	; 0xba
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f006 fc8c 	bl	800a698 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	2b7f      	cmp	r3, #127	; 0x7f
 8003d86:	d904      	bls.n	8003d92 <HAL_RTC_Init+0x52>
 8003d88:	4b66      	ldr	r3, [pc, #408]	; (8003f24 <HAL_RTC_Init+0x1e4>)
 8003d8a:	21bb      	movs	r1, #187	; 0xbb
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f006 fc83 	bl	800a698 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	4a64      	ldr	r2, [pc, #400]	; (8003f28 <HAL_RTC_Init+0x1e8>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d904      	bls.n	8003da6 <HAL_RTC_Init+0x66>
 8003d9c:	4b61      	ldr	r3, [pc, #388]	; (8003f24 <HAL_RTC_Init+0x1e4>)
 8003d9e:	21bc      	movs	r1, #188	; 0xbc
 8003da0:	0018      	movs	r0, r3
 8003da2:	f006 fc79 	bl	800a698 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d016      	beq.n	8003ddc <HAL_RTC_Init+0x9c>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	2380      	movs	r3, #128	; 0x80
 8003db4:	039b      	lsls	r3, r3, #14
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d010      	beq.n	8003ddc <HAL_RTC_Init+0x9c>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691a      	ldr	r2, [r3, #16]
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	03db      	lsls	r3, r3, #15
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d00a      	beq.n	8003ddc <HAL_RTC_Init+0x9c>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	23c0      	movs	r3, #192	; 0xc0
 8003dcc:	03db      	lsls	r3, r3, #15
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d004      	beq.n	8003ddc <HAL_RTC_Init+0x9c>
 8003dd2:	4b54      	ldr	r3, [pc, #336]	; (8003f24 <HAL_RTC_Init+0x1e4>)
 8003dd4:	21bd      	movs	r1, #189	; 0xbd
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f006 fc5e 	bl	800a698 <assert_failed>
  assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_RTC_Init+0xb6>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d004      	beq.n	8003df6 <HAL_RTC_Init+0xb6>
 8003dec:	4b4d      	ldr	r3, [pc, #308]	; (8003f24 <HAL_RTC_Init+0x1e4>)
 8003dee:	21be      	movs	r1, #190	; 0xbe
 8003df0:	0018      	movs	r0, r3
 8003df2:	f006 fc51 	bl	800a698 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <HAL_RTC_Init+0xd4>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699a      	ldr	r2, [r3, #24]
 8003e02:	2380      	movs	r3, #128	; 0x80
 8003e04:	035b      	lsls	r3, r3, #13
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d004      	beq.n	8003e14 <HAL_RTC_Init+0xd4>
 8003e0a:	4b46      	ldr	r3, [pc, #280]	; (8003f24 <HAL_RTC_Init+0x1e4>)
 8003e0c:	21bf      	movs	r1, #191	; 0xbf
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f006 fc42 	bl	800a698 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d008      	beq.n	8003e2e <HAL_RTC_Init+0xee>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d004      	beq.n	8003e2e <HAL_RTC_Init+0xee>
 8003e24:	4b3f      	ldr	r3, [pc, #252]	; (8003f24 <HAL_RTC_Init+0x1e4>)
 8003e26:	21c0      	movs	r1, #192	; 0xc0
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f006 fc35 	bl	800a698 <assert_failed>
  
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2221      	movs	r2, #33	; 0x21
 8003e32:	5c9b      	ldrb	r3, [r3, r2]
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d107      	bne.n	8003e4a <HAL_RTC_Init+0x10a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	2100      	movs	r1, #0
 8003e40:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	0018      	movs	r0, r3
 8003e46:	f006 ff35 	bl	800acb4 <HAL_RTC_MspInit>
  }

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2221      	movs	r2, #33	; 0x21
 8003e4e:	2102      	movs	r1, #2
 8003e50:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	22ca      	movs	r2, #202	; 0xca
 8003e58:	625a      	str	r2, [r3, #36]	; 0x24
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2253      	movs	r2, #83	; 0x53
 8003e60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	0018      	movs	r0, r3
 8003e66:	f000 fc34 	bl	80046d2 <RTC_EnterInitMode>
 8003e6a:	1e03      	subs	r3, r0, #0
 8003e6c:	d009      	beq.n	8003e82 <HAL_RTC_Init+0x142>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	22ff      	movs	r2, #255	; 0xff
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2221      	movs	r2, #33	; 0x21
 8003e7a:	2104      	movs	r1, #4
 8003e7c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e04a      	b.n	8003f18 <HAL_RTC_Init+0x1d8>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6812      	ldr	r2, [r2, #0]
 8003e8a:	6892      	ldr	r2, [r2, #8]
 8003e8c:	4927      	ldr	r1, [pc, #156]	; (8003f2c <HAL_RTC_Init+0x1ec>)
 8003e8e:	400a      	ands	r2, r1
 8003e90:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6812      	ldr	r2, [r2, #0]
 8003e9a:	6891      	ldr	r1, [r2, #8]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6850      	ldr	r0, [r2, #4]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6912      	ldr	r2, [r2, #16]
 8003ea4:	4310      	orrs	r0, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6992      	ldr	r2, [r2, #24]
 8003eaa:	4302      	orrs	r2, r0
 8003eac:	430a      	orrs	r2, r1
 8003eae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	68d2      	ldr	r2, [r2, #12]
 8003eb8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	6911      	ldr	r1, [r2, #16]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6892      	ldr	r2, [r2, #8]
 8003ec8:	0412      	lsls	r2, r2, #16
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	68d2      	ldr	r2, [r2, #12]
 8003ed8:	2180      	movs	r1, #128	; 0x80
 8003eda:	438a      	bics	r2, r1
 8003edc:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003ee8:	2103      	movs	r1, #3
 8003eea:	438a      	bics	r2, r1
 8003eec:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6812      	ldr	r2, [r2, #0]
 8003ef6:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	69d0      	ldr	r0, [r2, #28]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6952      	ldr	r2, [r2, #20]
 8003f00:	4302      	orrs	r2, r0
 8003f02:	430a      	orrs	r2, r1
 8003f04:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	22ff      	movs	r2, #255	; 0xff
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2221      	movs	r2, #33	; 0x21
 8003f12:	2101      	movs	r1, #1
 8003f14:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f16:	2300      	movs	r3, #0
  }
}
 8003f18:	0018      	movs	r0, r3
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b002      	add	sp, #8
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40002800 	.word	0x40002800
 8003f24:	0800c17c 	.word	0x0800c17c
 8003f28:	00007fff 	.word	0x00007fff
 8003f2c:	ff8fffbf 	.word	0xff8fffbf

08003f30 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f30:	b590      	push	{r4, r7, lr}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d009      	beq.n	8003f5a <HAL_RTC_SetTime+0x2a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d006      	beq.n	8003f5a <HAL_RTC_SetTime+0x2a>
 8003f4c:	23cf      	movs	r3, #207	; 0xcf
 8003f4e:	005a      	lsls	r2, r3, #1
 8003f50:	4bbe      	ldr	r3, [pc, #760]	; (800424c <HAL_RTC_SetTime+0x31c>)
 8003f52:	0011      	movs	r1, r2
 8003f54:	0018      	movs	r0, r3
 8003f56:	f006 fb9f 	bl	800a698 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	2380      	movs	r3, #128	; 0x80
 8003f60:	029b      	lsls	r3, r3, #10
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d011      	beq.n	8003f8a <HAL_RTC_SetTime+0x5a>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	2380      	movs	r3, #128	; 0x80
 8003f6c:	025b      	lsls	r3, r3, #9
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d00b      	beq.n	8003f8a <HAL_RTC_SetTime+0x5a>
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <HAL_RTC_SetTime+0x5a>
 8003f7a:	23a0      	movs	r3, #160	; 0xa0
 8003f7c:	33ff      	adds	r3, #255	; 0xff
 8003f7e:	001a      	movs	r2, r3
 8003f80:	4bb2      	ldr	r3, [pc, #712]	; (800424c <HAL_RTC_SetTime+0x31c>)
 8003f82:	0011      	movs	r1, r2
 8003f84:	0018      	movs	r0, r3
 8003f86:	f006 fb87 	bl	800a698 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00c      	beq.n	8003fac <HAL_RTC_SetTime+0x7c>
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	2380      	movs	r3, #128	; 0x80
 8003f98:	02db      	lsls	r3, r3, #11
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d006      	beq.n	8003fac <HAL_RTC_SetTime+0x7c>
 8003f9e:	23d0      	movs	r3, #208	; 0xd0
 8003fa0:	005a      	lsls	r2, r3, #1
 8003fa2:	4baa      	ldr	r3, [pc, #680]	; (800424c <HAL_RTC_SetTime+0x31c>)
 8003fa4:	0011      	movs	r1, r2
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f006 fb76 	bl	800a698 <assert_failed>

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	5c9b      	ldrb	r3, [r3, r2]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_RTC_SetTime+0x8a>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e143      	b.n	8004242 <HAL_RTC_SetTime+0x312>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2221      	movs	r2, #33	; 0x21
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d168      	bne.n	80040a2 <HAL_RTC_SetTime+0x172>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2240      	movs	r2, #64	; 0x40
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d01f      	beq.n	800401c <HAL_RTC_SetTime+0xec>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <HAL_RTC_SetTime+0xbc>
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b0c      	cmp	r3, #12
 8003fea:	d907      	bls.n	8003ffc <HAL_RTC_SetTime+0xcc>
 8003fec:	23ac      	movs	r3, #172	; 0xac
 8003fee:	33ff      	adds	r3, #255	; 0xff
 8003ff0:	001a      	movs	r2, r3
 8003ff2:	4b96      	ldr	r3, [pc, #600]	; (800424c <HAL_RTC_SetTime+0x31c>)
 8003ff4:	0011      	movs	r1, r2
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f006 fb4e 	bl	800a698 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	78db      	ldrb	r3, [r3, #3]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d01a      	beq.n	800403a <HAL_RTC_SetTime+0x10a>
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	78db      	ldrb	r3, [r3, #3]
 8004008:	2b40      	cmp	r3, #64	; 0x40
 800400a:	d016      	beq.n	800403a <HAL_RTC_SetTime+0x10a>
 800400c:	23d6      	movs	r3, #214	; 0xd6
 800400e:	005a      	lsls	r2, r3, #1
 8004010:	4b8e      	ldr	r3, [pc, #568]	; (800424c <HAL_RTC_SetTime+0x31c>)
 8004012:	0011      	movs	r1, r2
 8004014:	0018      	movs	r0, r3
 8004016:	f006 fb3f 	bl	800a698 <assert_failed>
 800401a:	e00e      	b.n	800403a <HAL_RTC_SetTime+0x10a>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2200      	movs	r2, #0
 8004020:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b17      	cmp	r3, #23
 8004028:	d907      	bls.n	800403a <HAL_RTC_SetTime+0x10a>
 800402a:	23b2      	movs	r3, #178	; 0xb2
 800402c:	33ff      	adds	r3, #255	; 0xff
 800402e:	001a      	movs	r2, r3
 8004030:	4b86      	ldr	r3, [pc, #536]	; (800424c <HAL_RTC_SetTime+0x31c>)
 8004032:	0011      	movs	r1, r2
 8004034:	0018      	movs	r0, r3
 8004036:	f006 fb2f 	bl	800a698 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	785b      	ldrb	r3, [r3, #1]
 800403e:	2b3b      	cmp	r3, #59	; 0x3b
 8004040:	d907      	bls.n	8004052 <HAL_RTC_SetTime+0x122>
 8004042:	23b4      	movs	r3, #180	; 0xb4
 8004044:	33ff      	adds	r3, #255	; 0xff
 8004046:	001a      	movs	r2, r3
 8004048:	4b80      	ldr	r3, [pc, #512]	; (800424c <HAL_RTC_SetTime+0x31c>)
 800404a:	0011      	movs	r1, r2
 800404c:	0018      	movs	r0, r3
 800404e:	f006 fb23 	bl	800a698 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	789b      	ldrb	r3, [r3, #2]
 8004056:	2b3b      	cmp	r3, #59	; 0x3b
 8004058:	d906      	bls.n	8004068 <HAL_RTC_SetTime+0x138>
 800405a:	23da      	movs	r3, #218	; 0xda
 800405c:	005a      	lsls	r2, r3, #1
 800405e:	4b7b      	ldr	r3, [pc, #492]	; (800424c <HAL_RTC_SetTime+0x31c>)
 8004060:	0011      	movs	r1, r2
 8004062:	0018      	movs	r0, r3
 8004064:	f006 fb18 	bl	800a698 <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	0018      	movs	r0, r3
 800406e:	f000 fb5c 	bl	800472a <RTC_ByteToBcd2>
 8004072:	0003      	movs	r3, r0
 8004074:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	785b      	ldrb	r3, [r3, #1]
 800407a:	0018      	movs	r0, r3
 800407c:	f000 fb55 	bl	800472a <RTC_ByteToBcd2>
 8004080:	0003      	movs	r3, r0
 8004082:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004084:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	789b      	ldrb	r3, [r3, #2]
 800408a:	0018      	movs	r0, r3
 800408c:	f000 fb4d 	bl	800472a <RTC_ByteToBcd2>
 8004090:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004092:	0022      	movs	r2, r4
 8004094:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	78db      	ldrb	r3, [r3, #3]
 800409a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	e06a      	b.n	8004178 <HAL_RTC_SetTime+0x248>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2240      	movs	r2, #64	; 0x40
 80040aa:	4013      	ands	r3, r2
 80040ac:	d024      	beq.n	80040f8 <HAL_RTC_SetTime+0x1c8>
    {
      tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	0018      	movs	r0, r3
 80040b4:	f000 fb5a 	bl	800476c <RTC_Bcd2ToByte>
 80040b8:	0003      	movs	r3, r0
 80040ba:	617b      	str	r3, [r7, #20]
      assert_param(IS_RTC_HOUR12(tmpreg));
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <HAL_RTC_SetTime+0x198>
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2b0c      	cmp	r3, #12
 80040c6:	d906      	bls.n	80040d6 <HAL_RTC_SetTime+0x1a6>
 80040c8:	23e0      	movs	r3, #224	; 0xe0
 80040ca:	005a      	lsls	r2, r3, #1
 80040cc:	4b5f      	ldr	r3, [pc, #380]	; (800424c <HAL_RTC_SetTime+0x31c>)
 80040ce:	0011      	movs	r1, r2
 80040d0:	0018      	movs	r0, r3
 80040d2:	f006 fae1 	bl	800a698 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	78db      	ldrb	r3, [r3, #3]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d01e      	beq.n	800411c <HAL_RTC_SetTime+0x1ec>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	78db      	ldrb	r3, [r3, #3]
 80040e2:	2b40      	cmp	r3, #64	; 0x40
 80040e4:	d01a      	beq.n	800411c <HAL_RTC_SetTime+0x1ec>
 80040e6:	23c2      	movs	r3, #194	; 0xc2
 80040e8:	33ff      	adds	r3, #255	; 0xff
 80040ea:	001a      	movs	r2, r3
 80040ec:	4b57      	ldr	r3, [pc, #348]	; (800424c <HAL_RTC_SetTime+0x31c>)
 80040ee:	0011      	movs	r1, r2
 80040f0:	0018      	movs	r0, r3
 80040f2:	f006 fad1 	bl	800a698 <assert_failed>
 80040f6:	e011      	b.n	800411c <HAL_RTC_SetTime+0x1ec>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2200      	movs	r2, #0
 80040fc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	0018      	movs	r0, r3
 8004104:	f000 fb32 	bl	800476c <RTC_Bcd2ToByte>
 8004108:	0003      	movs	r3, r0
 800410a:	2b17      	cmp	r3, #23
 800410c:	d906      	bls.n	800411c <HAL_RTC_SetTime+0x1ec>
 800410e:	23e3      	movs	r3, #227	; 0xe3
 8004110:	005a      	lsls	r2, r3, #1
 8004112:	4b4e      	ldr	r3, [pc, #312]	; (800424c <HAL_RTC_SetTime+0x31c>)
 8004114:	0011      	movs	r1, r2
 8004116:	0018      	movs	r0, r3
 8004118:	f006 fabe 	bl	800a698 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	785b      	ldrb	r3, [r3, #1]
 8004120:	0018      	movs	r0, r3
 8004122:	f000 fb23 	bl	800476c <RTC_Bcd2ToByte>
 8004126:	0003      	movs	r3, r0
 8004128:	2b3b      	cmp	r3, #59	; 0x3b
 800412a:	d906      	bls.n	800413a <HAL_RTC_SetTime+0x20a>
 800412c:	23e4      	movs	r3, #228	; 0xe4
 800412e:	005a      	lsls	r2, r3, #1
 8004130:	4b46      	ldr	r3, [pc, #280]	; (800424c <HAL_RTC_SetTime+0x31c>)
 8004132:	0011      	movs	r1, r2
 8004134:	0018      	movs	r0, r3
 8004136:	f006 faaf 	bl	800a698 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	789b      	ldrb	r3, [r3, #2]
 800413e:	0018      	movs	r0, r3
 8004140:	f000 fb14 	bl	800476c <RTC_Bcd2ToByte>
 8004144:	0003      	movs	r3, r0
 8004146:	2b3b      	cmp	r3, #59	; 0x3b
 8004148:	d907      	bls.n	800415a <HAL_RTC_SetTime+0x22a>
 800414a:	23ca      	movs	r3, #202	; 0xca
 800414c:	33ff      	adds	r3, #255	; 0xff
 800414e:	001a      	movs	r2, r3
 8004150:	4b3e      	ldr	r3, [pc, #248]	; (800424c <HAL_RTC_SetTime+0x31c>)
 8004152:	0011      	movs	r1, r2
 8004154:	0018      	movs	r0, r3
 8004156:	f006 fa9f 	bl	800a698 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	785b      	ldrb	r3, [r3, #1]
 8004164:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004166:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800416c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	78db      	ldrb	r3, [r3, #3]
 8004172:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	22ca      	movs	r2, #202	; 0xca
 800417e:	625a      	str	r2, [r3, #36]	; 0x24
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2253      	movs	r2, #83	; 0x53
 8004186:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	0018      	movs	r0, r3
 800418c:	f000 faa1 	bl	80046d2 <RTC_EnterInitMode>
 8004190:	1e03      	subs	r3, r0, #0
 8004192:	d00d      	beq.n	80041b0 <HAL_RTC_SetTime+0x280>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	22ff      	movs	r2, #255	; 0xff
 800419a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2221      	movs	r2, #33	; 0x21
 80041a0:	2104      	movs	r1, #4
 80041a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2220      	movs	r2, #32
 80041a8:	2100      	movs	r1, #0
 80041aa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e048      	b.n	8004242 <HAL_RTC_SetTime+0x312>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4926      	ldr	r1, [pc, #152]	; (8004250 <HAL_RTC_SetTime+0x320>)
 80041b8:	400a      	ands	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	6892      	ldr	r2, [r2, #8]
 80041c6:	4923      	ldr	r1, [pc, #140]	; (8004254 <HAL_RTC_SetTime+0x324>)
 80041c8:	400a      	ands	r2, r1
 80041ca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	6891      	ldr	r1, [r2, #8]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	68d0      	ldr	r0, [r2, #12]
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	6912      	ldr	r2, [r2, #16]
 80041de:	4302      	orrs	r2, r0
 80041e0:	430a      	orrs	r2, r1
 80041e2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	68d2      	ldr	r2, [r2, #12]
 80041ee:	2180      	movs	r1, #128	; 0x80
 80041f0:	438a      	bics	r2, r1
 80041f2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2220      	movs	r2, #32
 80041fc:	4013      	ands	r3, r2
 80041fe:	d113      	bne.n	8004228 <HAL_RTC_SetTime+0x2f8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	0018      	movs	r0, r3
 8004204:	f000 fa3c 	bl	8004680 <HAL_RTC_WaitForSynchro>
 8004208:	1e03      	subs	r3, r0, #0
 800420a:	d00d      	beq.n	8004228 <HAL_RTC_SetTime+0x2f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	22ff      	movs	r2, #255	; 0xff
 8004212:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2221      	movs	r2, #33	; 0x21
 8004218:	2104      	movs	r1, #4
 800421a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	2100      	movs	r1, #0
 8004222:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e00c      	b.n	8004242 <HAL_RTC_SetTime+0x312>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	22ff      	movs	r2, #255	; 0xff
 800422e:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2221      	movs	r2, #33	; 0x21
 8004234:	2101      	movs	r1, #1
 8004236:	5499      	strb	r1, [r3, r2]

   __HAL_UNLOCK(hrtc); 
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2220      	movs	r2, #32
 800423c:	2100      	movs	r1, #0
 800423e:	5499      	strb	r1, [r3, r2]

   return HAL_OK;
 8004240:	2300      	movs	r3, #0
  }
}
 8004242:	0018      	movs	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	b007      	add	sp, #28
 8004248:	bd90      	pop	{r4, r7, pc}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	0800c17c 	.word	0x0800c17c
 8004250:	007f7f7f 	.word	0x007f7f7f
 8004254:	fffbffff 	.word	0xfffbffff

08004258 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d008      	beq.n	8004280 <HAL_RTC_GetTime+0x28>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d005      	beq.n	8004280 <HAL_RTC_GetTime+0x28>
 8004274:	4a2c      	ldr	r2, [pc, #176]	; (8004328 <HAL_RTC_GetTime+0xd0>)
 8004276:	4b2d      	ldr	r3, [pc, #180]	; (800432c <HAL_RTC_GetTime+0xd4>)
 8004278:	0011      	movs	r1, r2
 800427a:	0018      	movs	r0, r3
 800427c:	f006 fa0c 	bl	800a698 <assert_failed>

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	045b      	lsls	r3, r3, #17
 8004292:	0c5a      	lsrs	r2, r3, #17
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a24      	ldr	r2, [pc, #144]	; (8004330 <HAL_RTC_GetTime+0xd8>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	0c1b      	lsrs	r3, r3, #16
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	223f      	movs	r2, #63	; 0x3f
 80042ac:	4013      	ands	r3, r2
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	0a1b      	lsrs	r3, r3, #8
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	227f      	movs	r2, #127	; 0x7f
 80042bc:	4013      	ands	r3, r2
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	227f      	movs	r2, #127	; 0x7f
 80042ca:	4013      	ands	r3, r2
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	0c1b      	lsrs	r3, r3, #16
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2240      	movs	r2, #64	; 0x40
 80042da:	4013      	ands	r3, r2
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d11a      	bne.n	800431e <HAL_RTC_GetTime+0xc6>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	0018      	movs	r0, r3
 80042ee:	f000 fa3d 	bl	800476c <RTC_Bcd2ToByte>
 80042f2:	0003      	movs	r3, r0
 80042f4:	001a      	movs	r2, r3
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	785b      	ldrb	r3, [r3, #1]
 80042fe:	0018      	movs	r0, r3
 8004300:	f000 fa34 	bl	800476c <RTC_Bcd2ToByte>
 8004304:	0003      	movs	r3, r0
 8004306:	001a      	movs	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	789b      	ldrb	r3, [r3, #2]
 8004310:	0018      	movs	r0, r3
 8004312:	f000 fa2b 	bl	800476c <RTC_Bcd2ToByte>
 8004316:	0003      	movs	r3, r0
 8004318:	001a      	movs	r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	0018      	movs	r0, r3
 8004322:	46bd      	mov	sp, r7
 8004324:	b006      	add	sp, #24
 8004326:	bd80      	pop	{r7, pc}
 8004328:	00000225 	.word	0x00000225
 800432c:	0800c17c 	.word	0x0800c17c
 8004330:	007f7f7f 	.word	0x007f7f7f

08004334 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004334:	b590      	push	{r4, r7, lr}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d008      	beq.n	800435c <HAL_RTC_SetDate+0x28>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d005      	beq.n	800435c <HAL_RTC_SetDate+0x28>
 8004350:	4a94      	ldr	r2, [pc, #592]	; (80045a4 <HAL_RTC_SetDate+0x270>)
 8004352:	4b95      	ldr	r3, [pc, #596]	; (80045a8 <HAL_RTC_SetDate+0x274>)
 8004354:	0011      	movs	r1, r2
 8004356:	0018      	movs	r0, r3
 8004358:	f006 f99e 	bl	800a698 <assert_failed>

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	5c9b      	ldrb	r3, [r3, r2]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_RTC_SetDate+0x36>
 8004366:	2302      	movs	r3, #2
 8004368:	e117      	b.n	800459a <HAL_RTC_SetDate+0x266>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2220      	movs	r2, #32
 800436e:	2101      	movs	r1, #1
 8004370:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2221      	movs	r2, #33	; 0x21
 8004376:	2102      	movs	r1, #2
 8004378:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10e      	bne.n	800439e <HAL_RTC_SetDate+0x6a>
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	785b      	ldrb	r3, [r3, #1]
 8004384:	001a      	movs	r2, r3
 8004386:	2310      	movs	r3, #16
 8004388:	4013      	ands	r3, r2
 800438a:	d008      	beq.n	800439e <HAL_RTC_SetDate+0x6a>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	785b      	ldrb	r3, [r3, #1]
 8004390:	2210      	movs	r2, #16
 8004392:	4393      	bics	r3, r2
 8004394:	b2db      	uxtb	r3, r3
 8004396:	330a      	adds	r3, #10
 8004398:	b2da      	uxtb	r2, r3
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d01d      	beq.n	80043e2 <HAL_RTC_SetDate+0xae>
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d019      	beq.n	80043e2 <HAL_RTC_SetDate+0xae>
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d015      	beq.n	80043e2 <HAL_RTC_SetDate+0xae>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d011      	beq.n	80043e2 <HAL_RTC_SetDate+0xae>
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b05      	cmp	r3, #5
 80043c4:	d00d      	beq.n	80043e2 <HAL_RTC_SetDate+0xae>
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b06      	cmp	r3, #6
 80043cc:	d009      	beq.n	80043e2 <HAL_RTC_SetDate+0xae>
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b07      	cmp	r3, #7
 80043d4:	d005      	beq.n	80043e2 <HAL_RTC_SetDate+0xae>
 80043d6:	4a75      	ldr	r2, [pc, #468]	; (80045ac <HAL_RTC_SetDate+0x278>)
 80043d8:	4b73      	ldr	r3, [pc, #460]	; (80045a8 <HAL_RTC_SetDate+0x274>)
 80043da:	0011      	movs	r1, r2
 80043dc:	0018      	movs	r0, r3
 80043de:	f006 f95b 	bl	800a698 <assert_failed>

  if(Format == RTC_FORMAT_BIN)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d142      	bne.n	800446e <HAL_RTC_SetDate+0x13a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	78db      	ldrb	r3, [r3, #3]
 80043ec:	2b63      	cmp	r3, #99	; 0x63
 80043ee:	d905      	bls.n	80043fc <HAL_RTC_SetDate+0xc8>
 80043f0:	4a6f      	ldr	r2, [pc, #444]	; (80045b0 <HAL_RTC_SetDate+0x27c>)
 80043f2:	4b6d      	ldr	r3, [pc, #436]	; (80045a8 <HAL_RTC_SetDate+0x274>)
 80043f4:	0011      	movs	r1, r2
 80043f6:	0018      	movs	r0, r3
 80043f8:	f006 f94e 	bl	800a698 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	785b      	ldrb	r3, [r3, #1]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_RTC_SetDate+0xd8>
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	785b      	ldrb	r3, [r3, #1]
 8004408:	2b0c      	cmp	r3, #12
 800440a:	d905      	bls.n	8004418 <HAL_RTC_SetDate+0xe4>
 800440c:	4a69      	ldr	r2, [pc, #420]	; (80045b4 <HAL_RTC_SetDate+0x280>)
 800440e:	4b66      	ldr	r3, [pc, #408]	; (80045a8 <HAL_RTC_SetDate+0x274>)
 8004410:	0011      	movs	r1, r2
 8004412:	0018      	movs	r0, r3
 8004414:	f006 f940 	bl	800a698 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	789b      	ldrb	r3, [r3, #2]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <HAL_RTC_SetDate+0xf4>
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	789b      	ldrb	r3, [r3, #2]
 8004424:	2b1f      	cmp	r3, #31
 8004426:	d905      	bls.n	8004434 <HAL_RTC_SetDate+0x100>
 8004428:	4a63      	ldr	r2, [pc, #396]	; (80045b8 <HAL_RTC_SetDate+0x284>)
 800442a:	4b5f      	ldr	r3, [pc, #380]	; (80045a8 <HAL_RTC_SetDate+0x274>)
 800442c:	0011      	movs	r1, r2
 800442e:	0018      	movs	r0, r3
 8004430:	f006 f932 	bl	800a698 <assert_failed>

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	78db      	ldrb	r3, [r3, #3]
 8004438:	0018      	movs	r0, r3
 800443a:	f000 f976 	bl	800472a <RTC_ByteToBcd2>
 800443e:	0003      	movs	r3, r0
 8004440:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	785b      	ldrb	r3, [r3, #1]
 8004446:	0018      	movs	r0, r3
 8004448:	f000 f96f 	bl	800472a <RTC_ByteToBcd2>
 800444c:	0003      	movs	r3, r0
 800444e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004450:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	789b      	ldrb	r3, [r3, #2]
 8004456:	0018      	movs	r0, r3
 8004458:	f000 f967 	bl	800472a <RTC_ByteToBcd2>
 800445c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800445e:	0022      	movs	r2, r4
 8004460:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	e044      	b.n	80044f8 <HAL_RTC_SetDate+0x1c4>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	78db      	ldrb	r3, [r3, #3]
 8004472:	0018      	movs	r0, r3
 8004474:	f000 f97a 	bl	800476c <RTC_Bcd2ToByte>
 8004478:	0003      	movs	r3, r0
 800447a:	2b63      	cmp	r3, #99	; 0x63
 800447c:	d906      	bls.n	800448c <HAL_RTC_SetDate+0x158>
 800447e:	239b      	movs	r3, #155	; 0x9b
 8004480:	009a      	lsls	r2, r3, #2
 8004482:	4b49      	ldr	r3, [pc, #292]	; (80045a8 <HAL_RTC_SetDate+0x274>)
 8004484:	0011      	movs	r1, r2
 8004486:	0018      	movs	r0, r3
 8004488:	f006 f906 	bl	800a698 <assert_failed>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	785b      	ldrb	r3, [r3, #1]
 8004490:	0018      	movs	r0, r3
 8004492:	f000 f96b 	bl	800476c <RTC_Bcd2ToByte>
 8004496:	0003      	movs	r3, r0
 8004498:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_MONTH(datetmpreg));
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <HAL_RTC_SetDate+0x172>
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b0c      	cmp	r3, #12
 80044a4:	d905      	bls.n	80044b2 <HAL_RTC_SetDate+0x17e>
 80044a6:	4a45      	ldr	r2, [pc, #276]	; (80045bc <HAL_RTC_SetDate+0x288>)
 80044a8:	4b3f      	ldr	r3, [pc, #252]	; (80045a8 <HAL_RTC_SetDate+0x274>)
 80044aa:	0011      	movs	r1, r2
 80044ac:	0018      	movs	r0, r3
 80044ae:	f006 f8f3 	bl	800a698 <assert_failed>
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	789b      	ldrb	r3, [r3, #2]
 80044b6:	0018      	movs	r0, r3
 80044b8:	f000 f958 	bl	800476c <RTC_Bcd2ToByte>
 80044bc:	0003      	movs	r3, r0
 80044be:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_DATE(datetmpreg));
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <HAL_RTC_SetDate+0x198>
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b1f      	cmp	r3, #31
 80044ca:	d906      	bls.n	80044da <HAL_RTC_SetDate+0x1a6>
 80044cc:	239c      	movs	r3, #156	; 0x9c
 80044ce:	009a      	lsls	r2, r3, #2
 80044d0:	4b35      	ldr	r3, [pc, #212]	; (80045a8 <HAL_RTC_SetDate+0x274>)
 80044d2:	0011      	movs	r1, r2
 80044d4:	0018      	movs	r0, r3
 80044d6:	f006 f8df 	bl	800a698 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	78db      	ldrb	r3, [r3, #3]
 80044de:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	785b      	ldrb	r3, [r3, #1]
 80044e4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80044e6:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80044ec:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	22ca      	movs	r2, #202	; 0xca
 80044fe:	625a      	str	r2, [r3, #36]	; 0x24
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2253      	movs	r2, #83	; 0x53
 8004506:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	0018      	movs	r0, r3
 800450c:	f000 f8e1 	bl	80046d2 <RTC_EnterInitMode>
 8004510:	1e03      	subs	r3, r0, #0
 8004512:	d00d      	beq.n	8004530 <HAL_RTC_SetDate+0x1fc>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	22ff      	movs	r2, #255	; 0xff
 800451a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2221      	movs	r2, #33	; 0x21
 8004520:	2104      	movs	r1, #4
 8004522:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2220      	movs	r2, #32
 8004528:	2100      	movs	r1, #0
 800452a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e034      	b.n	800459a <HAL_RTC_SetDate+0x266>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	4922      	ldr	r1, [pc, #136]	; (80045c0 <HAL_RTC_SetDate+0x28c>)
 8004538:	400a      	ands	r2, r1
 800453a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	6812      	ldr	r2, [r2, #0]
 8004544:	68d2      	ldr	r2, [r2, #12]
 8004546:	2180      	movs	r1, #128	; 0x80
 8004548:	438a      	bics	r2, r1
 800454a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2220      	movs	r2, #32
 8004554:	4013      	ands	r3, r2
 8004556:	d113      	bne.n	8004580 <HAL_RTC_SetDate+0x24c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	0018      	movs	r0, r3
 800455c:	f000 f890 	bl	8004680 <HAL_RTC_WaitForSynchro>
 8004560:	1e03      	subs	r3, r0, #0
 8004562:	d00d      	beq.n	8004580 <HAL_RTC_SetDate+0x24c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	22ff      	movs	r2, #255	; 0xff
 800456a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2221      	movs	r2, #33	; 0x21
 8004570:	2104      	movs	r1, #4
 8004572:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	2100      	movs	r1, #0
 800457a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e00c      	b.n	800459a <HAL_RTC_SetDate+0x266>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	22ff      	movs	r2, #255	; 0xff
 8004586:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2221      	movs	r2, #33	; 0x21
 800458c:	2101      	movs	r1, #1
 800458e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	2100      	movs	r1, #0
 8004596:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004598:	2300      	movs	r3, #0
  }
}
 800459a:	0018      	movs	r0, r3
 800459c:	46bd      	mov	sp, r7
 800459e:	b007      	add	sp, #28
 80045a0:	bd90      	pop	{r4, r7, pc}
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	00000251 	.word	0x00000251
 80045a8:	0800c17c 	.word	0x0800c17c
 80045ac:	0000025d 	.word	0x0000025d
 80045b0:	00000261 	.word	0x00000261
 80045b4:	00000262 	.word	0x00000262
 80045b8:	00000263 	.word	0x00000263
 80045bc:	0000026e 	.word	0x0000026e
 80045c0:	00ffff3f 	.word	0x00ffff3f

080045c4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <HAL_RTC_GetDate+0x2a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d006      	beq.n	80045ee <HAL_RTC_GetDate+0x2a>
 80045e0:	23b0      	movs	r3, #176	; 0xb0
 80045e2:	009a      	lsls	r2, r3, #2
 80045e4:	4b24      	ldr	r3, [pc, #144]	; (8004678 <HAL_RTC_GetDate+0xb4>)
 80045e6:	0011      	movs	r1, r2
 80045e8:	0018      	movs	r0, r3
 80045ea:	f006 f855 	bl	800a698 <assert_failed>

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	4a21      	ldr	r2, [pc, #132]	; (800467c <HAL_RTC_GetDate+0xb8>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	0c1b      	lsrs	r3, r3, #16
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	0a1b      	lsrs	r3, r3, #8
 8004608:	b2db      	uxtb	r3, r3
 800460a:	221f      	movs	r2, #31
 800460c:	4013      	ands	r3, r2
 800460e:	b2da      	uxtb	r2, r3
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	223f      	movs	r2, #63	; 0x3f
 800461a:	4013      	ands	r3, r2
 800461c:	b2da      	uxtb	r2, r3
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	0b5b      	lsrs	r3, r3, #13
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2207      	movs	r2, #7
 800462a:	4013      	ands	r3, r2
 800462c:	b2da      	uxtb	r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d11a      	bne.n	800466e <HAL_RTC_GetDate+0xaa>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	78db      	ldrb	r3, [r3, #3]
 800463c:	0018      	movs	r0, r3
 800463e:	f000 f895 	bl	800476c <RTC_Bcd2ToByte>
 8004642:	0003      	movs	r3, r0
 8004644:	001a      	movs	r2, r3
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	785b      	ldrb	r3, [r3, #1]
 800464e:	0018      	movs	r0, r3
 8004650:	f000 f88c 	bl	800476c <RTC_Bcd2ToByte>
 8004654:	0003      	movs	r3, r0
 8004656:	001a      	movs	r2, r3
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	789b      	ldrb	r3, [r3, #2]
 8004660:	0018      	movs	r0, r3
 8004662:	f000 f883 	bl	800476c <RTC_Bcd2ToByte>
 8004666:	0003      	movs	r3, r0
 8004668:	001a      	movs	r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	0018      	movs	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	b006      	add	sp, #24
 8004676:	bd80      	pop	{r7, pc}
 8004678:	0800c17c 	.word	0x0800c17c
 800467c:	00ffff3f 	.word	0x00ffff3f

08004680 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	68d2      	ldr	r2, [r2, #12]
 8004696:	21a0      	movs	r1, #160	; 0xa0
 8004698:	438a      	bics	r2, r1
 800469a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800469c:	f7fc ffa0 	bl	80015e0 <HAL_GetTick>
 80046a0:	0003      	movs	r3, r0
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80046a4:	e00a      	b.n	80046bc <HAL_RTC_WaitForSynchro+0x3c>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80046a6:	f7fc ff9b 	bl	80015e0 <HAL_GetTick>
 80046aa:	0002      	movs	r2, r0
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	1ad2      	subs	r2, r2, r3
 80046b0:	23fa      	movs	r3, #250	; 0xfa
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d901      	bls.n	80046bc <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e006      	b.n	80046ca <HAL_RTC_WaitForSynchro+0x4a>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	4013      	ands	r3, r2
 80046c6:	d0ee      	beq.n	80046a6 <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	0018      	movs	r0, r3
 80046cc:	46bd      	mov	sp, r7
 80046ce:	b004      	add	sp, #16
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	2240      	movs	r2, #64	; 0x40
 80046e6:	4013      	ands	r3, r2
 80046e8:	d11a      	bne.n	8004720 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2201      	movs	r2, #1
 80046f0:	4252      	negs	r2, r2
 80046f2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80046f4:	f7fc ff74 	bl	80015e0 <HAL_GetTick>
 80046f8:	0003      	movs	r3, r0
 80046fa:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80046fc:	e00a      	b.n	8004714 <RTC_EnterInitMode+0x42>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80046fe:	f7fc ff6f 	bl	80015e0 <HAL_GetTick>
 8004702:	0002      	movs	r2, r0
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	1ad2      	subs	r2, r2, r3
 8004708:	23fa      	movs	r3, #250	; 0xfa
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	429a      	cmp	r2, r3
 800470e:	d901      	bls.n	8004714 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e006      	b.n	8004722 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	2240      	movs	r2, #64	; 0x40
 800471c:	4013      	ands	r3, r2
 800471e:	d0ee      	beq.n	80046fe <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	0018      	movs	r0, r3
 8004724:	46bd      	mov	sp, r7
 8004726:	b004      	add	sp, #16
 8004728:	bd80      	pop	{r7, pc}

0800472a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	0002      	movs	r2, r0
 8004732:	1dfb      	adds	r3, r7, #7
 8004734:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800473a:	e007      	b.n	800474c <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	3301      	adds	r3, #1
 8004740:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004742:	1dfb      	adds	r3, r7, #7
 8004744:	1dfa      	adds	r2, r7, #7
 8004746:	7812      	ldrb	r2, [r2, #0]
 8004748:	3a0a      	subs	r2, #10
 800474a:	701a      	strb	r2, [r3, #0]
  while(Value >= 10U)
 800474c:	1dfb      	adds	r3, r7, #7
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	2b09      	cmp	r3, #9
 8004752:	d8f3      	bhi.n	800473c <RTC_ByteToBcd2+0x12>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	b2da      	uxtb	r2, r3
 800475c:	1dfb      	adds	r3, r7, #7
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	4313      	orrs	r3, r2
 8004762:	b2db      	uxtb	r3, r3
}
 8004764:	0018      	movs	r0, r3
 8004766:	46bd      	mov	sp, r7
 8004768:	b004      	add	sp, #16
 800476a:	bd80      	pop	{r7, pc}

0800476c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	0002      	movs	r2, r0
 8004774:	1dfb      	adds	r3, r7, #7
 8004776:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800477c:	1dfb      	adds	r3, r7, #7
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	091b      	lsrs	r3, r3, #4
 8004782:	b2db      	uxtb	r3, r3
 8004784:	001a      	movs	r2, r3
 8004786:	0013      	movs	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	189b      	adds	r3, r3, r2
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8004790:	1dfb      	adds	r3, r7, #7
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	220f      	movs	r2, #15
 8004796:	4013      	ands	r3, r2
 8004798:	b2da      	uxtb	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	18d3      	adds	r3, r2, r3
 80047a0:	b2db      	uxtb	r3, r3
}
 80047a2:	0018      	movs	r0, r3
 80047a4:	46bd      	mov	sp, r7
 80047a6:	b004      	add	sp, #16
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e12d      	b.n	8004a1a <HAL_SPI_Init+0x26e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a98      	ldr	r2, [pc, #608]	; (8004a24 <HAL_SPI_Init+0x278>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d009      	beq.n	80047dc <HAL_SPI_Init+0x30>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a96      	ldr	r2, [pc, #600]	; (8004a28 <HAL_SPI_Init+0x27c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d004      	beq.n	80047dc <HAL_SPI_Init+0x30>
 80047d2:	4b96      	ldr	r3, [pc, #600]	; (8004a2c <HAL_SPI_Init+0x280>)
 80047d4:	21f7      	movs	r1, #247	; 0xf7
 80047d6:	0018      	movs	r0, r3
 80047d8:	f005 ff5e 	bl	800a698 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <HAL_SPI_Init+0x4e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	2382      	movs	r3, #130	; 0x82
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d004      	beq.n	80047fa <HAL_SPI_Init+0x4e>
 80047f0:	4b8e      	ldr	r3, [pc, #568]	; (8004a2c <HAL_SPI_Init+0x280>)
 80047f2:	21f8      	movs	r1, #248	; 0xf8
 80047f4:	0018      	movs	r0, r3
 80047f6:	f005 ff4f 	bl	800a698 <assert_failed>
  assert_param(IS_SPI_DIRECTION_MODE(hspi->Init.Direction));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d010      	beq.n	8004824 <HAL_SPI_Init+0x78>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	2380      	movs	r3, #128	; 0x80
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	429a      	cmp	r2, r3
 800480c:	d00a      	beq.n	8004824 <HAL_SPI_Init+0x78>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	2380      	movs	r3, #128	; 0x80
 8004814:	021b      	lsls	r3, r3, #8
 8004816:	429a      	cmp	r2, r3
 8004818:	d004      	beq.n	8004824 <HAL_SPI_Init+0x78>
 800481a:	4b84      	ldr	r3, [pc, #528]	; (8004a2c <HAL_SPI_Init+0x280>)
 800481c:	21f9      	movs	r1, #249	; 0xf9
 800481e:	0018      	movs	r0, r3
 8004820:	f005 ff3a 	bl	800a698 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	2380      	movs	r3, #128	; 0x80
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	429a      	cmp	r2, r3
 800482e:	d008      	beq.n	8004842 <HAL_SPI_Init+0x96>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d004      	beq.n	8004842 <HAL_SPI_Init+0x96>
 8004838:	4b7c      	ldr	r3, [pc, #496]	; (8004a2c <HAL_SPI_Init+0x280>)
 800483a:	21fa      	movs	r1, #250	; 0xfa
 800483c:	0018      	movs	r0, r3
 800483e:	f005 ff2b 	bl	800a698 <assert_failed>
  assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d008      	beq.n	800485c <HAL_SPI_Init+0xb0>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d004      	beq.n	800485c <HAL_SPI_Init+0xb0>
 8004852:	4b76      	ldr	r3, [pc, #472]	; (8004a2c <HAL_SPI_Init+0x280>)
 8004854:	21fb      	movs	r1, #251	; 0xfb
 8004856:	0018      	movs	r0, r3
 8004858:	f005 ff1e 	bl	800a698 <assert_failed>
  assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <HAL_SPI_Init+0xca>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d004      	beq.n	8004876 <HAL_SPI_Init+0xca>
 800486c:	4b6f      	ldr	r3, [pc, #444]	; (8004a2c <HAL_SPI_Init+0x280>)
 800486e:	21fc      	movs	r1, #252	; 0xfc
 8004870:	0018      	movs	r0, r3
 8004872:	f005 ff11 	bl	800a698 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	2380      	movs	r3, #128	; 0x80
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	429a      	cmp	r2, r3
 8004880:	d00e      	beq.n	80048a0 <HAL_SPI_Init+0xf4>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <HAL_SPI_Init+0xf4>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699a      	ldr	r2, [r3, #24]
 800488e:	2380      	movs	r3, #128	; 0x80
 8004890:	02db      	lsls	r3, r3, #11
 8004892:	429a      	cmp	r2, r3
 8004894:	d004      	beq.n	80048a0 <HAL_SPI_Init+0xf4>
 8004896:	4b65      	ldr	r3, [pc, #404]	; (8004a2c <HAL_SPI_Init+0x280>)
 8004898:	21fd      	movs	r1, #253	; 0xfd
 800489a:	0018      	movs	r0, r3
 800489c:	f005 fefc 	bl	800a698 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d020      	beq.n	80048ea <HAL_SPI_Init+0x13e>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d01c      	beq.n	80048ea <HAL_SPI_Init+0x13e>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	2b10      	cmp	r3, #16
 80048b6:	d018      	beq.n	80048ea <HAL_SPI_Init+0x13e>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	2b18      	cmp	r3, #24
 80048be:	d014      	beq.n	80048ea <HAL_SPI_Init+0x13e>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	d010      	beq.n	80048ea <HAL_SPI_Init+0x13e>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	2b28      	cmp	r3, #40	; 0x28
 80048ce:	d00c      	beq.n	80048ea <HAL_SPI_Init+0x13e>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	2b30      	cmp	r3, #48	; 0x30
 80048d6:	d008      	beq.n	80048ea <HAL_SPI_Init+0x13e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	2b38      	cmp	r3, #56	; 0x38
 80048de:	d004      	beq.n	80048ea <HAL_SPI_Init+0x13e>
 80048e0:	4b52      	ldr	r3, [pc, #328]	; (8004a2c <HAL_SPI_Init+0x280>)
 80048e2:	21fe      	movs	r1, #254	; 0xfe
 80048e4:	0018      	movs	r0, r3
 80048e6:	f005 fed7 	bl	800a698 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d008      	beq.n	8004904 <HAL_SPI_Init+0x158>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	2b80      	cmp	r3, #128	; 0x80
 80048f8:	d004      	beq.n	8004904 <HAL_SPI_Init+0x158>
 80048fa:	4b4c      	ldr	r3, [pc, #304]	; (8004a2c <HAL_SPI_Init+0x280>)
 80048fc:	21ff      	movs	r1, #255	; 0xff
 80048fe:	0018      	movs	r0, r3
 8004900:	f005 feca 	bl	800a698 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <HAL_SPI_Init+0x176>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	2b10      	cmp	r3, #16
 8004912:	d006      	beq.n	8004922 <HAL_SPI_Init+0x176>
 8004914:	2380      	movs	r3, #128	; 0x80
 8004916:	005a      	lsls	r2, r3, #1
 8004918:	4b44      	ldr	r3, [pc, #272]	; (8004a2c <HAL_SPI_Init+0x280>)
 800491a:	0011      	movs	r1, r2
 800491c:	0018      	movs	r0, r3
 800491e:	f005 febb 	bl	800a698 <assert_failed>
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00d      	beq.n	8004946 <HAL_SPI_Init+0x19a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800492e:	2380      	movs	r3, #128	; 0x80
 8004930:	019b      	lsls	r3, r3, #6
 8004932:	429a      	cmp	r2, r3
 8004934:	d007      	beq.n	8004946 <HAL_SPI_Init+0x19a>
 8004936:	2302      	movs	r3, #2
 8004938:	33ff      	adds	r3, #255	; 0xff
 800493a:	001a      	movs	r2, r3
 800493c:	4b3b      	ldr	r3, [pc, #236]	; (8004a2c <HAL_SPI_Init+0x280>)
 800493e:	0011      	movs	r1, r2
 8004940:	0018      	movs	r0, r3
 8004942:	f005 fea9 	bl	800a698 <assert_failed>
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	2b00      	cmp	r3, #0
 800494c:	d004      	beq.n	8004958 <HAL_SPI_Init+0x1ac>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	4a37      	ldr	r2, [pc, #220]	; (8004a30 <HAL_SPI_Init+0x284>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d906      	bls.n	8004966 <HAL_SPI_Init+0x1ba>
 8004958:	2381      	movs	r3, #129	; 0x81
 800495a:	005a      	lsls	r2, r3, #1
 800495c:	4b33      	ldr	r3, [pc, #204]	; (8004a2c <HAL_SPI_Init+0x280>)
 800495e:	0011      	movs	r1, r2
 8004960:	0018      	movs	r0, r3
 8004962:	f005 fe99 	bl	800a698 <assert_failed>

  if(hspi->State == HAL_SPI_STATE_RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2251      	movs	r2, #81	; 0x51
 800496a:	5c9b      	ldrb	r3, [r3, r2]
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d107      	bne.n	8004982 <HAL_SPI_Init+0x1d6>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2250      	movs	r2, #80	; 0x50
 8004976:	2100      	movs	r1, #0
 8004978:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	0018      	movs	r0, r3
 800497e:	f006 f9b1 	bl	800ace4 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2251      	movs	r2, #81	; 0x51
 8004986:	2102      	movs	r1, #2
 8004988:	5499      	strb	r1, [r3, r2]

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6812      	ldr	r2, [r2, #0]
 8004992:	6812      	ldr	r2, [r2, #0]
 8004994:	2140      	movs	r1, #64	; 0x40
 8004996:	438a      	bics	r2, r1
 8004998:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6851      	ldr	r1, [r2, #4]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6892      	ldr	r2, [r2, #8]
 80049a6:	4311      	orrs	r1, r2
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	68d2      	ldr	r2, [r2, #12]
 80049ac:	4311      	orrs	r1, r2
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6912      	ldr	r2, [r2, #16]
 80049b2:	4311      	orrs	r1, r2
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6952      	ldr	r2, [r2, #20]
 80049b8:	4311      	orrs	r1, r2
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6990      	ldr	r0, [r2, #24]
 80049be:	2280      	movs	r2, #128	; 0x80
 80049c0:	0092      	lsls	r2, r2, #2
 80049c2:	4002      	ands	r2, r0
 80049c4:	4311      	orrs	r1, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	69d2      	ldr	r2, [r2, #28]
 80049ca:	4311      	orrs	r1, r2
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6a12      	ldr	r2, [r2, #32]
 80049d0:	4311      	orrs	r1, r2
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80049d6:	430a      	orrs	r2, r1
 80049d8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6992      	ldr	r2, [r2, #24]
 80049e2:	0c12      	lsrs	r2, r2, #16
 80049e4:	2104      	movs	r1, #4
 80049e6:	4011      	ands	r1, r2
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049ec:	430a      	orrs	r2, r1
 80049ee:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80049f8:	611a      	str	r2, [r3, #16]
  
#if !defined(STM32L011xx) && !defined(STM32L021xx) && !defined(STM32L031xx) && !defined(STM32L041xx)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6812      	ldr	r2, [r2, #0]
 8004a02:	69d2      	ldr	r2, [r2, #28]
 8004a04:	490b      	ldr	r1, [pc, #44]	; (8004a34 <HAL_SPI_Init+0x288>)
 8004a06:	400a      	ands	r2, r1
 8004a08:	61da      	str	r2, [r3, #28]
#endif
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2251      	movs	r2, #81	; 0x51
 8004a14:	2101      	movs	r1, #1
 8004a16:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	b002      	add	sp, #8
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	46c0      	nop			; (mov r8, r8)
 8004a24:	40013000 	.word	0x40013000
 8004a28:	40003800 	.word	0x40003800
 8004a2c:	0800c1b4 	.word	0x0800c1b4
 8004a30:	0000ffff 	.word	0x0000ffff
 8004a34:	fffff7ff 	.word	0xfffff7ff

08004a38 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	001a      	movs	r2, r3
 8004a46:	1cbb      	adds	r3, r7, #2
 8004a48:	801a      	strh	r2, [r3, #0]
  __IO uint16_t tmpreg = 0U;
 8004a4a:	2316      	movs	r3, #22
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	2200      	movs	r2, #0
 8004a50:	801a      	strh	r2, [r3, #0]

  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2251      	movs	r2, #81	; 0x51
 8004a56:	5c9b      	ldrb	r3, [r3, r2]
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d006      	beq.n	8004a6c <HAL_SPI_TransmitReceive+0x34>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2251      	movs	r2, #81	; 0x51
 8004a62:	5c9b      	ldrb	r3, [r3, r2]
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b22      	cmp	r3, #34	; 0x22
 8004a68:	d000      	beq.n	8004a6c <HAL_SPI_TransmitReceive+0x34>
 8004a6a:	e264      	b.n	8004f36 <HAL_SPI_TransmitReceive+0x4fe>
  {
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d006      	beq.n	8004a80 <HAL_SPI_TransmitReceive+0x48>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_SPI_TransmitReceive+0x48>
 8004a78:	1cbb      	adds	r3, r7, #2
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_SPI_TransmitReceive+0x4c>
    {
      return  HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e259      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x500>
    }

    /* Check the parameters */
    assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d005      	beq.n	8004a98 <HAL_SPI_TransmitReceive+0x60>
 8004a8c:	4ac3      	ldr	r2, [pc, #780]	; (8004d9c <HAL_SPI_TransmitReceive+0x364>)
 8004a8e:	4bc4      	ldr	r3, [pc, #784]	; (8004da0 <HAL_SPI_TransmitReceive+0x368>)
 8004a90:	0011      	movs	r1, r2
 8004a92:	0018      	movs	r0, r3
 8004a94:	f005 fe00 	bl	800a698 <assert_failed>

    /* Process Locked */
    __HAL_LOCK(hspi);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2250      	movs	r2, #80	; 0x50
 8004a9c:	5c9b      	ldrb	r3, [r3, r2]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_SPI_TransmitReceive+0x6e>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e248      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x500>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2250      	movs	r2, #80	; 0x50
 8004aaa:	2101      	movs	r1, #1
 8004aac:	5499      	strb	r1, [r3, r2]
 
    /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
    if(hspi->State == HAL_SPI_STATE_READY)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2251      	movs	r2, #81	; 0x51
 8004ab2:	5c9b      	ldrb	r3, [r3, r2]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d103      	bne.n	8004ac2 <HAL_SPI_TransmitReceive+0x8a>
    {
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2251      	movs	r2, #81	; 0x51
 8004abe:	2132      	movs	r1, #50	; 0x32
 8004ac0:	5499      	strb	r1, [r3, r2]
    }

     /* Configure communication */   
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	655a      	str	r2, [r3, #84]	; 0x54

    hspi->pRxBuffPtr  = pRxData;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->RxXferSize  = Size;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	1cba      	adds	r2, r7, #2
 8004ad2:	8812      	ldrh	r2, [r2, #0]
 8004ad4:	879a      	strh	r2, [r3, #60]	; 0x3c
    hspi->RxXferCount = Size;  
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	1cba      	adds	r2, r7, #2
 8004ada:	8812      	ldrh	r2, [r2, #0]
 8004adc:	87da      	strh	r2, [r3, #62]	; 0x3e
    
    hspi->pTxBuffPtr  = pTxData;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->TxXferSize  = Size; 
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	1cba      	adds	r2, r7, #2
 8004ae8:	8812      	ldrh	r2, [r2, #0]
 8004aea:	869a      	strh	r2, [r3, #52]	; 0x34
    hspi->TxXferCount = Size;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	1cba      	adds	r2, r7, #2
 8004af0:	8812      	ldrh	r2, [r2, #0]
 8004af2:	86da      	strh	r2, [r3, #54]	; 0x36

    /*Init field not used in handle to zero */
    hspi->RxISR = 0U;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	649a      	str	r2, [r3, #72]	; 0x48
    hspi->TxISR = 0U;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b04:	2380      	movs	r3, #128	; 0x80
 8004b06:	019b      	lsls	r3, r3, #6
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d110      	bne.n	8004b2e <HAL_SPI_TransmitReceive+0xf6>
    {
      SPI_RESET_CRC(hspi);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	6812      	ldr	r2, [r2, #0]
 8004b16:	49a3      	ldr	r1, [pc, #652]	; (8004da4 <HAL_SPI_TransmitReceive+0x36c>)
 8004b18:	400a      	ands	r2, r1
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	6812      	ldr	r2, [r2, #0]
 8004b24:	6812      	ldr	r2, [r2, #0]
 8004b26:	2180      	movs	r1, #128	; 0x80
 8004b28:	0189      	lsls	r1, r1, #6
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	601a      	str	r2, [r3, #0]
    }

    /* Check if the SPI is already enabled */ 
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2240      	movs	r2, #64	; 0x40
 8004b36:	4013      	ands	r3, r2
 8004b38:	2b40      	cmp	r3, #64	; 0x40
 8004b3a:	d007      	beq.n	8004b4c <HAL_SPI_TransmitReceive+0x114>
    {
      /* Enable SPI peripheral */
      __HAL_SPI_ENABLE(hspi);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	6812      	ldr	r2, [r2, #0]
 8004b44:	6812      	ldr	r2, [r2, #0]
 8004b46:	2140      	movs	r1, #64	; 0x40
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	601a      	str	r2, [r3, #0]
    }

    /* Transmit and Receive data in 16 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	2380      	movs	r3, #128	; 0x80
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d000      	beq.n	8004b5a <HAL_SPI_TransmitReceive+0x122>
 8004b58:	e0c8      	b.n	8004cec <HAL_SPI_TransmitReceive+0x2b4>
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <HAL_SPI_TransmitReceive+0x140>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	2382      	movs	r3, #130	; 0x82
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d116      	bne.n	8004b9c <HAL_SPI_TransmitReceive+0x164>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d111      	bne.n	8004b9c <HAL_SPI_TransmitReceive+0x164>
      {
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b80:	8812      	ldrh	r2, [r2, #0]
 8004b82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2U;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b88:	1c9a      	adds	r2, r3, #2
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	86da      	strh	r2, [r3, #54]	; 0x36
      }
      if(hspi->TxXferCount == 0U)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d000      	beq.n	8004ba8 <HAL_SPI_TransmitReceive+0x170>
 8004ba6:	e079      	b.n	8004c9c <HAL_SPI_TransmitReceive+0x264>
      {
        /* Enable CRC Transmission */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bac:	2380      	movs	r3, #128	; 0x80
 8004bae:	019b      	lsls	r3, r3, #6
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d108      	bne.n	8004bc6 <HAL_SPI_TransmitReceive+0x18e>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	6812      	ldr	r2, [r2, #0]
 8004bbe:	2180      	movs	r1, #128	; 0x80
 8004bc0:	0149      	lsls	r1, r1, #5
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	601a      	str	r2, [r3, #0]
        }

        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	2101      	movs	r1, #1
 8004bce:	f000 fa6f 	bl	80050b0 <SPI_WaitOnFlagUntilTimeout>
 8004bd2:	1e03      	subs	r3, r0, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_SPI_TransmitReceive+0x1a2>
        { 
          return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e1ae      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x500>
        }

        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr+=2U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	1c9a      	adds	r2, r3, #2
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c00:	e135      	b.n	8004e6e <HAL_SPI_TransmitReceive+0x436>
      else
      {
        while(hspi->TxXferCount > 0U)
        {
          /* Wait until TXE flag is set to send data */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	2102      	movs	r1, #2
 8004c0a:	f000 fa51 	bl	80050b0 <SPI_WaitOnFlagUntilTimeout>
 8004c0e:	1e03      	subs	r3, r0, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_SPI_TransmitReceive+0x1de>
          { 
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e190      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x500>
          }

          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c1e:	8812      	ldrh	r2, [r2, #0]
 8004c20:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr+=2U;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c26:	1c9a      	adds	r2, r3, #2
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	631a      	str	r2, [r3, #48]	; 0x30
          hspi->TxXferCount--;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	86da      	strh	r2, [r3, #54]	; 0x36

          /* Enable CRC Transmission */
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10e      	bne.n	8004c62 <HAL_SPI_TransmitReceive+0x22a>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c48:	2380      	movs	r3, #128	; 0x80
 8004c4a:	019b      	lsls	r3, r3, #6
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d108      	bne.n	8004c62 <HAL_SPI_TransmitReceive+0x22a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	6812      	ldr	r2, [r2, #0]
 8004c5a:	2180      	movs	r1, #128	; 0x80
 8004c5c:	0149      	lsls	r1, r1, #5
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	601a      	str	r2, [r3, #0]
          }

          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	2101      	movs	r1, #1
 8004c6a:	f000 fa21 	bl	80050b0 <SPI_WaitOnFlagUntilTimeout>
 8004c6e:	1e03      	subs	r3, r0, #0
 8004c70:	d001      	beq.n	8004c76 <HAL_SPI_TransmitReceive+0x23e>
          { 
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e160      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x500>
          }

          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr+=2U;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	1c9a      	adds	r2, r3, #2
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->RxXferCount--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1ad      	bne.n	8004c02 <HAL_SPI_TransmitReceive+0x1ca>
        }
        /* Receive the last byte */
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d000      	beq.n	8004cb0 <HAL_SPI_TransmitReceive+0x278>
 8004cae:	e0de      	b.n	8004e6e <HAL_SPI_TransmitReceive+0x436>
        {
          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	f000 f9fa 	bl	80050b0 <SPI_WaitOnFlagUntilTimeout>
 8004cbc:	1e03      	subs	r3, r0, #0
 8004cbe:	d001      	beq.n	8004cc4 <HAL_SPI_TransmitReceive+0x28c>
          {
            return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e139      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x500>
          }
          
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr+=2U;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	1c9a      	adds	r2, r3, #2
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->RxXferCount--;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cea:	e0c0      	b.n	8004e6e <HAL_SPI_TransmitReceive+0x436>
      }
    }
    /* Transmit and Receive data in 8 Bit mode */
    else
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <HAL_SPI_TransmitReceive+0x2d2>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	2382      	movs	r3, #130	; 0x82
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d114      	bne.n	8004d2a <HAL_SPI_TransmitReceive+0x2f2>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d10f      	bne.n	8004d2a <HAL_SPI_TransmitReceive+0x2f2>
      {
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d12:	1c50      	adds	r0, r2, #1
 8004d14:	68f9      	ldr	r1, [r7, #12]
 8004d16:	6308      	str	r0, [r1, #48]	; 0x30
 8004d18:	7812      	ldrb	r2, [r2, #0]
 8004d1a:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	86da      	strh	r2, [r3, #54]	; 0x36
      }
      if(hspi->TxXferCount == 0U)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d000      	beq.n	8004d36 <HAL_SPI_TransmitReceive+0x2fe>
 8004d34:	e077      	b.n	8004e26 <HAL_SPI_TransmitReceive+0x3ee>
      {
        /* Enable CRC Transmission */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d3a:	2380      	movs	r3, #128	; 0x80
 8004d3c:	019b      	lsls	r3, r3, #6
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d108      	bne.n	8004d54 <HAL_SPI_TransmitReceive+0x31c>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	6812      	ldr	r2, [r2, #0]
 8004d4a:	6812      	ldr	r2, [r2, #0]
 8004d4c:	2180      	movs	r1, #128	; 0x80
 8004d4e:	0149      	lsls	r1, r1, #5
 8004d50:	430a      	orrs	r2, r1
 8004d52:	601a      	str	r2, [r3, #0]
        }

        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	f000 f9a8 	bl	80050b0 <SPI_WaitOnFlagUntilTimeout>
 8004d60:	1e03      	subs	r3, r0, #0
 8004d62:	d001      	beq.n	8004d68 <HAL_SPI_TransmitReceive+0x330>
        {
          return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e0e7      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x500>
        }

        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d84:	e073      	b.n	8004e6e <HAL_SPI_TransmitReceive+0x436>
      else
      {
        while(hspi->TxXferCount > 0U)
        {
          /* Wait until TXE flag is set to send data */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2102      	movs	r1, #2
 8004d8e:	f000 f98f 	bl	80050b0 <SPI_WaitOnFlagUntilTimeout>
 8004d92:	1e03      	subs	r3, r0, #0
 8004d94:	d008      	beq.n	8004da8 <HAL_SPI_TransmitReceive+0x370>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e0ce      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x500>
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	000002fa 	.word	0x000002fa
 8004da0:	0800c1b4 	.word	0x0800c1b4
 8004da4:	ffffdfff 	.word	0xffffdfff
          }

          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004db0:	1c50      	adds	r0, r2, #1
 8004db2:	68f9      	ldr	r1, [r7, #12]
 8004db4:	6308      	str	r0, [r1, #48]	; 0x30
 8004db6:	7812      	ldrb	r2, [r2, #0]
 8004db8:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	86da      	strh	r2, [r3, #54]	; 0x36

          /* Enable CRC Transmission */
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10e      	bne.n	8004df0 <HAL_SPI_TransmitReceive+0x3b8>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dd6:	2380      	movs	r3, #128	; 0x80
 8004dd8:	019b      	lsls	r3, r3, #6
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d108      	bne.n	8004df0 <HAL_SPI_TransmitReceive+0x3b8>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	6812      	ldr	r2, [r2, #0]
 8004de6:	6812      	ldr	r2, [r2, #0]
 8004de8:	2180      	movs	r1, #128	; 0x80
 8004dea:	0149      	lsls	r1, r1, #5
 8004dec:	430a      	orrs	r2, r1
 8004dee:	601a      	str	r2, [r3, #0]
          }

          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	2101      	movs	r1, #1
 8004df8:	f000 f95a 	bl	80050b0 <SPI_WaitOnFlagUntilTimeout>
 8004dfc:	1e03      	subs	r3, r0, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_SPI_TransmitReceive+0x3cc>
          {
            return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e099      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x500>
          }

          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	1c59      	adds	r1, r3, #1
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	6391      	str	r1, [r2, #56]	; 0x38
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	6812      	ldr	r2, [r2, #0]
 8004e12:	68d2      	ldr	r2, [r2, #12]
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	87da      	strh	r2, [r3, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1aa      	bne.n	8004d86 <HAL_SPI_TransmitReceive+0x34e>
        }
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d11a      	bne.n	8004e6e <HAL_SPI_TransmitReceive+0x436>
        {
          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2101      	movs	r1, #1
 8004e40:	f000 f936 	bl	80050b0 <SPI_WaitOnFlagUntilTimeout>
 8004e44:	1e03      	subs	r3, r0, #0
 8004e46:	d001      	beq.n	8004e4c <HAL_SPI_TransmitReceive+0x414>
          {
            return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e075      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x500>
          }
          
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e50:	1c59      	adds	r1, r3, #1
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	6391      	str	r1, [r2, #56]	; 0x38
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	6812      	ldr	r2, [r2, #0]
 8004e5a:	68d2      	ldr	r2, [r2, #12]
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
      }
    }

    /* Read CRC from DR to close CRC calculation process */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e72:	2380      	movs	r3, #128	; 0x80
 8004e74:	019b      	lsls	r3, r3, #6
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d119      	bne.n	8004eae <HAL_SPI_TransmitReceive+0x476>
    {
      /* Wait until RXNE flag is set */
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2101      	movs	r1, #1
 8004e82:	f000 f915 	bl	80050b0 <SPI_WaitOnFlagUntilTimeout>
 8004e86:	1e03      	subs	r3, r0, #0
 8004e88:	d007      	beq.n	8004e9a <HAL_SPI_TransmitReceive+0x462>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8e:	2202      	movs	r2, #2
 8004e90:	431a      	orrs	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e04e      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x500>
      }
      /* Read CRC */
      tmpreg = hspi->Instance->DR;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	2316      	movs	r3, #22
 8004ea4:	18fb      	adds	r3, r7, r3
 8004ea6:	801a      	strh	r2, [r3, #0]
      UNUSED(tmpreg);		/* avoid warning on tmpreg affectation with stupid compiler */
 8004ea8:	2316      	movs	r3, #22
 8004eaa:	18fb      	adds	r3, r7, r3
 8004eac:	881b      	ldrh	r3, [r3, #0]
    }

    /* Wait until Busy flag is reset before disabling SPI */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	2180      	movs	r1, #128	; 0x80
 8004eb6:	f000 f8fb 	bl	80050b0 <SPI_WaitOnFlagUntilTimeout>
 8004eba:	1e03      	subs	r3, r0, #0
 8004ebc:	d007      	beq.n	8004ece <HAL_SPI_TransmitReceive+0x496>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e034      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x500>
    }
    
    hspi->State = HAL_SPI_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2251      	movs	r2, #81	; 0x51
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	5499      	strb	r1, [r3, r2]

    /* Check if CRC error occurred */
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eda:	2380      	movs	r3, #128	; 0x80
 8004edc:	019b      	lsls	r3, r3, #6
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d123      	bne.n	8004f2a <HAL_SPI_TransmitReceive+0x4f2>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	2210      	movs	r2, #16
 8004eea:	4013      	ands	r3, r2
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	d11c      	bne.n	8004f2a <HAL_SPI_TransmitReceive+0x4f2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	655a      	str	r2, [r3, #84]	; 0x54

      SPI_RESET_CRC(hspi);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	6812      	ldr	r2, [r2, #0]
 8004f06:	490e      	ldr	r1, [pc, #56]	; (8004f40 <HAL_SPI_TransmitReceive+0x508>)
 8004f08:	400a      	ands	r2, r1
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	6812      	ldr	r2, [r2, #0]
 8004f14:	6812      	ldr	r2, [r2, #0]
 8004f16:	2180      	movs	r1, #128	; 0x80
 8004f18:	0189      	lsls	r1, r1, #6
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hspi);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2250      	movs	r2, #80	; 0x50
 8004f22:	2100      	movs	r1, #0
 8004f24:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR; 
 8004f26:	2301      	movs	r3, #1
 8004f28:	e006      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x500>
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2250      	movs	r2, #80	; 0x50
 8004f2e:	2100      	movs	r1, #0
 8004f30:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	e000      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x500>
  }
  else
  {
    return HAL_BUSY;
 8004f36:	2302      	movs	r3, #2
  }
}
 8004f38:	0018      	movs	r0, r3
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	b006      	add	sp, #24
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	ffffdfff 	.word	0xffffdfff

08004f44 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* SPI in mode Receiver and Overrun not occurred ---------------------------*/
  if((__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_RXNE) != RESET) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE) != RESET) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_OVR) == RESET))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2240      	movs	r2, #64	; 0x40
 8004f54:	4013      	ands	r3, r2
 8004f56:	2b40      	cmp	r3, #64	; 0x40
 8004f58:	d113      	bne.n	8004f82 <HAL_SPI_IRQHandler+0x3e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	2201      	movs	r2, #1
 8004f62:	4013      	ands	r3, r2
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d10c      	bne.n	8004f82 <HAL_SPI_IRQHandler+0x3e>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2240      	movs	r2, #64	; 0x40
 8004f70:	4013      	ands	r3, r2
 8004f72:	2b40      	cmp	r3, #64	; 0x40
 8004f74:	d005      	beq.n	8004f82 <HAL_SPI_IRQHandler+0x3e>
  {
    hspi->RxISR(hspi);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	0010      	movs	r0, r2
 8004f7e:	4798      	blx	r3
    return;
 8004f80:	e08b      	b.n	800509a <HAL_SPI_IRQHandler+0x156>
  }

  /* SPI in mode Tramitter ---------------------------------------------------*/
  if((__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_TXE) != RESET) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE) != RESET))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2280      	movs	r2, #128	; 0x80
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	2b80      	cmp	r3, #128	; 0x80
 8004f8e:	d10c      	bne.n	8004faa <HAL_SPI_IRQHandler+0x66>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	2202      	movs	r2, #2
 8004f98:	4013      	ands	r3, r2
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d105      	bne.n	8004faa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	0010      	movs	r0, r2
 8004fa6:	4798      	blx	r3
    return;
 8004fa8:	e077      	b.n	800509a <HAL_SPI_IRQHandler+0x156>
  }

  if(__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_ERR) != RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	d170      	bne.n	800509a <HAL_SPI_IRQHandler+0x156>
  {
    /* SPI CRC error interrupt occurred ---------------------------------------*/
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	2210      	movs	r2, #16
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	2b10      	cmp	r3, #16
 8004fc4:	d10a      	bne.n	8004fdc <HAL_SPI_IRQHandler+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fca:	2202      	movs	r2, #2
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2211      	movs	r2, #17
 8004fd8:	4252      	negs	r2, r2
 8004fda:	609a      	str	r2, [r3, #8]
    }
    /* SPI Mode Fault error interrupt occurred --------------------------------*/
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_MODF) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	2b20      	cmp	r3, #32
 8004fe8:	d112      	bne.n	8005010 <HAL_SPI_IRQHandler+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fee:	2201      	movs	r2, #1
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	617b      	str	r3, [r7, #20]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6812      	ldr	r2, [r2, #0]
 8005006:	6812      	ldr	r2, [r2, #0]
 8005008:	2140      	movs	r1, #64	; 0x40
 800500a:	438a      	bics	r2, r1
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	697b      	ldr	r3, [r7, #20]
    }
    
    /* SPI Overrun error interrupt occurred -----------------------------------*/
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_OVR) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	2240      	movs	r2, #64	; 0x40
 8005018:	4013      	ands	r3, r2
 800501a:	2b40      	cmp	r3, #64	; 0x40
 800501c:	d114      	bne.n	8005048 <HAL_SPI_IRQHandler+0x104>
    {
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2251      	movs	r2, #81	; 0x51
 8005022:	5c9b      	ldrb	r3, [r3, r2]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b12      	cmp	r3, #18
 8005028:	d00e      	beq.n	8005048 <HAL_SPI_IRQHandler+0x104>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502e:	2204      	movs	r2, #4
 8005030:	431a      	orrs	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);      
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	613b      	str	r3, [r7, #16]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	613b      	str	r3, [r7, #16]
 8005046:	693b      	ldr	r3, [r7, #16]
      }
    }

    /* SPI Frame error interrupt occurred -------------------------------------*/
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_FRE) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	2380      	movs	r3, #128	; 0x80
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	401a      	ands	r2, r3
 8005054:	2380      	movs	r3, #128	; 0x80
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	429a      	cmp	r2, r3
 800505a:	d10a      	bne.n	8005072 <HAL_SPI_IRQHandler+0x12e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005060:	2208      	movs	r2, #8
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	60fb      	str	r3, [r7, #12]
 8005070:	68fb      	ldr	r3, [r7, #12]
    }

    /* Call the Error call Back in case of Errors */
    if(hspi->ErrorCode!=HAL_SPI_ERROR_NONE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00f      	beq.n	800509a <HAL_SPI_IRQHandler+0x156>
    {
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6812      	ldr	r2, [r2, #0]
 8005082:	6852      	ldr	r2, [r2, #4]
 8005084:	21e0      	movs	r1, #224	; 0xe0
 8005086:	438a      	bics	r2, r1
 8005088:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2251      	movs	r2, #81	; 0x51
 800508e:	2101      	movs	r1, #1
 8005090:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	0018      	movs	r0, r3
 8005096:	f000 f803 	bl	80050a0 <HAL_SPI_ErrorCallback>
    }
  }
}
 800509a:	46bd      	mov	sp, r7
 800509c:	b006      	add	sp, #24
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function Should not be modified, when the callback is needed,
            the HAL_SPI_ErrorCallback() could be implenetd in the user file.
            - The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred.
   */
}
 80050a8:	46c0      	nop			; (mov r8, r8)
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b002      	add	sp, #8
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	1dfb      	adds	r3, r7, #7
 80050be:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	617b      	str	r3, [r7, #20]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80050c4:	f7fc fa8c 	bl	80015e0 <HAL_GetTick>
 80050c8:	0003      	movs	r3, r0
 80050ca:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 80050cc:	1dfb      	adds	r3, r7, #7
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d000      	beq.n	80050d6 <SPI_WaitOnFlagUntilTimeout+0x26>
 80050d4:	e087      	b.n	80051e6 <SPI_WaitOnFlagUntilTimeout+0x136>
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 80050d6:	e03e      	b.n	8005156 <SPI_WaitOnFlagUntilTimeout+0xa6>
    {
      if(Timeout != HAL_MAX_DELAY)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	3301      	adds	r3, #1
 80050dc:	d03b      	beq.n	8005156 <SPI_WaitOnFlagUntilTimeout+0xa6>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <SPI_WaitOnFlagUntilTimeout+0x44>
 80050e4:	f7fc fa7c 	bl	80015e0 <HAL_GetTick>
 80050e8:	0002      	movs	r2, r0
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	1ad2      	subs	r2, r2, r3
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d930      	bls.n	8005156 <SPI_WaitOnFlagUntilTimeout+0xa6>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	6812      	ldr	r2, [r2, #0]
 80050fc:	6852      	ldr	r2, [r2, #4]
 80050fe:	21e0      	movs	r1, #224	; 0xe0
 8005100:	438a      	bics	r2, r1
 8005102:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	6812      	ldr	r2, [r2, #0]
 800510c:	6812      	ldr	r2, [r2, #0]
 800510e:	2140      	movs	r1, #64	; 0x40
 8005110:	438a      	bics	r2, r1
 8005112:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005118:	2380      	movs	r3, #128	; 0x80
 800511a:	019b      	lsls	r3, r3, #6
 800511c:	429a      	cmp	r2, r3
 800511e:	d110      	bne.n	8005142 <SPI_WaitOnFlagUntilTimeout+0x92>
          {
            SPI_RESET_CRC(hspi);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	6812      	ldr	r2, [r2, #0]
 8005128:	6812      	ldr	r2, [r2, #0]
 800512a:	4935      	ldr	r1, [pc, #212]	; (8005200 <SPI_WaitOnFlagUntilTimeout+0x150>)
 800512c:	400a      	ands	r2, r1
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	2180      	movs	r1, #128	; 0x80
 800513c:	0189      	lsls	r1, r1, #6
 800513e:	430a      	orrs	r2, r1
 8005140:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2251      	movs	r2, #81	; 0x51
 8005146:	2101      	movs	r1, #1
 8005148:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2250      	movs	r2, #80	; 0x50
 800514e:	2100      	movs	r1, #0
 8005150:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e050      	b.n	80051f8 <SPI_WaitOnFlagUntilTimeout+0x148>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	401a      	ands	r2, r3
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	429a      	cmp	r2, r3
 8005164:	d1b8      	bne.n	80050d8 <SPI_WaitOnFlagUntilTimeout+0x28>
 8005166:	e046      	b.n	80051f6 <SPI_WaitOnFlagUntilTimeout+0x146>
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
    {
      if(Timeout != HAL_MAX_DELAY)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	3301      	adds	r3, #1
 800516c:	d03b      	beq.n	80051e6 <SPI_WaitOnFlagUntilTimeout+0x136>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d007      	beq.n	8005184 <SPI_WaitOnFlagUntilTimeout+0xd4>
 8005174:	f7fc fa34 	bl	80015e0 <HAL_GetTick>
 8005178:	0002      	movs	r2, r0
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	1ad2      	subs	r2, r2, r3
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d930      	bls.n	80051e6 <SPI_WaitOnFlagUntilTimeout+0x136>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	6812      	ldr	r2, [r2, #0]
 800518c:	6852      	ldr	r2, [r2, #4]
 800518e:	21e0      	movs	r1, #224	; 0xe0
 8005190:	438a      	bics	r2, r1
 8005192:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	6812      	ldr	r2, [r2, #0]
 800519c:	6812      	ldr	r2, [r2, #0]
 800519e:	2140      	movs	r1, #64	; 0x40
 80051a0:	438a      	bics	r2, r1
 80051a2:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051a8:	2380      	movs	r3, #128	; 0x80
 80051aa:	019b      	lsls	r3, r3, #6
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d110      	bne.n	80051d2 <SPI_WaitOnFlagUntilTimeout+0x122>
          {
            SPI_RESET_CRC(hspi);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	6812      	ldr	r2, [r2, #0]
 80051b8:	6812      	ldr	r2, [r2, #0]
 80051ba:	4911      	ldr	r1, [pc, #68]	; (8005200 <SPI_WaitOnFlagUntilTimeout+0x150>)
 80051bc:	400a      	ands	r2, r1
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	6812      	ldr	r2, [r2, #0]
 80051c8:	6812      	ldr	r2, [r2, #0]
 80051ca:	2180      	movs	r1, #128	; 0x80
 80051cc:	0189      	lsls	r1, r1, #6
 80051ce:	430a      	orrs	r2, r1
 80051d0:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2251      	movs	r2, #81	; 0x51
 80051d6:	2101      	movs	r1, #1
 80051d8:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2250      	movs	r2, #80	; 0x50
 80051de:	2100      	movs	r1, #0
 80051e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e008      	b.n	80051f8 <SPI_WaitOnFlagUntilTimeout+0x148>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	401a      	ands	r2, r3
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d0b8      	beq.n	8005168 <SPI_WaitOnFlagUntilTimeout+0xb8>
        }
      }
    }
  }
  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	0018      	movs	r0, r3
 80051fa:	46bd      	mov	sp, r7
 80051fc:	b006      	add	sp, #24
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	ffffdfff 	.word	0xffffdfff

08005204 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e074      	b.n	8005300 <HAL_UART_Init+0xfc>
  }

  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d014      	beq.n	8005248 <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a39      	ldr	r2, [pc, #228]	; (8005308 <HAL_UART_Init+0x104>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d023      	beq.n	8005270 <HAL_UART_Init+0x6c>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a37      	ldr	r2, [pc, #220]	; (800530c <HAL_UART_Init+0x108>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d01e      	beq.n	8005270 <HAL_UART_Init+0x6c>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a36      	ldr	r2, [pc, #216]	; (8005310 <HAL_UART_Init+0x10c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d019      	beq.n	8005270 <HAL_UART_Init+0x6c>
 800523c:	4b35      	ldr	r3, [pc, #212]	; (8005314 <HAL_UART_Init+0x110>)
 800523e:	21ec      	movs	r1, #236	; 0xec
 8005240:	0018      	movs	r0, r3
 8005242:	f005 fa29 	bl	800a698 <assert_failed>
 8005246:	e013      	b.n	8005270 <HAL_UART_Init+0x6c>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a2e      	ldr	r2, [pc, #184]	; (8005308 <HAL_UART_Init+0x104>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d00e      	beq.n	8005270 <HAL_UART_Init+0x6c>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a2d      	ldr	r2, [pc, #180]	; (800530c <HAL_UART_Init+0x108>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d009      	beq.n	8005270 <HAL_UART_Init+0x6c>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a2b      	ldr	r2, [pc, #172]	; (8005310 <HAL_UART_Init+0x10c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d004      	beq.n	8005270 <HAL_UART_Init+0x6c>
 8005266:	4b2b      	ldr	r3, [pc, #172]	; (8005314 <HAL_UART_Init+0x110>)
 8005268:	21f1      	movs	r1, #241	; 0xf1
 800526a:	0018      	movs	r0, r3
 800526c:	f005 fa14 	bl	800a698 <assert_failed>
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2269      	movs	r2, #105	; 0x69
 8005274:	5c9b      	ldrb	r3, [r3, r2]
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	d107      	bne.n	800528c <HAL_UART_Init+0x88>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2268      	movs	r2, #104	; 0x68
 8005280:	2100      	movs	r1, #0
 8005282:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	0018      	movs	r0, r3
 8005288:	f005 fbf4 	bl	800aa74 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2269      	movs	r2, #105	; 0x69
 8005290:	2124      	movs	r1, #36	; 0x24
 8005292:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6812      	ldr	r2, [r2, #0]
 800529c:	6812      	ldr	r2, [r2, #0]
 800529e:	2101      	movs	r1, #1
 80052a0:	438a      	bics	r2, r1
 80052a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <HAL_UART_Init+0xb0>
  {
    UART_AdvFeatureConfig(huart);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	0018      	movs	r0, r3
 80052b0:	f000 fcbe 	bl	8005c30 <UART_AdvFeatureConfig>
  }

  if (UART_SetConfig(huart) == HAL_ERROR)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	0018      	movs	r0, r3
 80052b8:	f000 f8c8 	bl	800544c <UART_SetConfig>
 80052bc:	0003      	movs	r3, r0
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <HAL_UART_Init+0xc2>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e01c      	b.n	8005300 <HAL_UART_Init+0xfc>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6812      	ldr	r2, [r2, #0]
 80052ce:	6852      	ldr	r2, [r2, #4]
 80052d0:	4911      	ldr	r1, [pc, #68]	; (8005318 <HAL_UART_Init+0x114>)
 80052d2:	400a      	ands	r2, r1
 80052d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6812      	ldr	r2, [r2, #0]
 80052de:	6892      	ldr	r2, [r2, #8]
 80052e0:	212a      	movs	r1, #42	; 0x2a
 80052e2:	438a      	bics	r2, r1
 80052e4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6812      	ldr	r2, [r2, #0]
 80052ee:	6812      	ldr	r2, [r2, #0]
 80052f0:	2101      	movs	r1, #1
 80052f2:	430a      	orrs	r2, r1
 80052f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	0018      	movs	r0, r3
 80052fa:	f000 fe15 	bl	8005f28 <UART_CheckIdleState>
 80052fe:	0003      	movs	r3, r0
}
 8005300:	0018      	movs	r0, r3
 8005302:	46bd      	mov	sp, r7
 8005304:	b002      	add	sp, #8
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40013800 	.word	0x40013800
 800530c:	40004400 	.word	0x40004400
 8005310:	40004800 	.word	0x40004800
 8005314:	0800c1ec 	.word	0x0800c1ec
 8005318:	ffffb7ff 	.word	0xffffb7ff

0800531c <HAL_UART_Receive_DMA>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	1dbb      	adds	r3, r7, #6
 8005328:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	226a      	movs	r2, #106	; 0x6a
 800532e:	5c9b      	ldrb	r3, [r3, r2]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b20      	cmp	r3, #32
 8005334:	d000      	beq.n	8005338 <HAL_UART_Receive_DMA+0x1c>
 8005336:	e06e      	b.n	8005416 <HAL_UART_Receive_DMA+0xfa>
  {
    if((pData == NULL ) || (Size == 0U))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_UART_Receive_DMA+0x2a>
 800533e:	1dbb      	adds	r3, r7, #6
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_UART_Receive_DMA+0x2e>
    {
      return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e066      	b.n	8005418 <HAL_UART_Receive_DMA+0xfc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data copy from RDR will be 
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	689a      	ldr	r2, [r3, #8]
 800534e:	2380      	movs	r3, #128	; 0x80
 8005350:	015b      	lsls	r3, r3, #5
 8005352:	429a      	cmp	r2, r3
 8005354:	d109      	bne.n	800536a <HAL_UART_Receive_DMA+0x4e>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d105      	bne.n	800536a <HAL_UART_Receive_DMA+0x4e>
    {
      if((((uint32_t)pData)&1) != 0)
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2201      	movs	r2, #1
 8005362:	4013      	ands	r3, r2
 8005364:	d001      	beq.n	800536a <HAL_UART_Receive_DMA+0x4e>
      {
        return  HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e056      	b.n	8005418 <HAL_UART_Receive_DMA+0xfc>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2268      	movs	r2, #104	; 0x68
 800536e:	5c9b      	ldrb	r3, [r3, r2]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_UART_Receive_DMA+0x5c>
 8005374:	2302      	movs	r3, #2
 8005376:	e04f      	b.n	8005418 <HAL_UART_Receive_DMA+0xfc>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2268      	movs	r2, #104	; 0x68
 800537c:	2101      	movs	r1, #1
 800537e:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1dba      	adds	r2, r7, #6
 800538a:	2158      	movs	r1, #88	; 0x58
 800538c:	8812      	ldrh	r2, [r2, #0]
 800538e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	226a      	movs	r2, #106	; 0x6a
 800539a:	2122      	movs	r1, #34	; 0x22
 800539c:	5499      	strb	r1, [r3, r2]

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053a2:	4a1f      	ldr	r2, [pc, #124]	; (8005420 <HAL_UART_Receive_DMA+0x104>)
 80053a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053aa:	4a1e      	ldr	r2, [pc, #120]	; (8005424 <HAL_UART_Receive_DMA+0x108>)
 80053ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053b2:	4a1d      	ldr	r2, [pc, #116]	; (8005428 <HAL_UART_Receive_DMA+0x10c>)
 80053b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053ba:	2200      	movs	r2, #0
 80053bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3324      	adds	r3, #36	; 0x24
 80053c8:	0019      	movs	r1, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ce:	001a      	movs	r2, r3
 80053d0:	1dbb      	adds	r3, r7, #6
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	f7fc fc00 	bl	8001bd8 <HAL_DMA_Start_IT>

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2268      	movs	r2, #104	; 0x68
 80053dc:	2100      	movs	r1, #0
 80053de:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	6812      	ldr	r2, [r2, #0]
 80053e8:	6812      	ldr	r2, [r2, #0]
 80053ea:	2180      	movs	r1, #128	; 0x80
 80053ec:	0049      	lsls	r1, r1, #1
 80053ee:	430a      	orrs	r2, r1
 80053f0:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	6812      	ldr	r2, [r2, #0]
 80053fa:	6892      	ldr	r2, [r2, #8]
 80053fc:	2101      	movs	r1, #1
 80053fe:	430a      	orrs	r2, r1
 8005400:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	6812      	ldr	r2, [r2, #0]
 800540a:	6892      	ldr	r2, [r2, #8]
 800540c:	2140      	movs	r1, #64	; 0x40
 800540e:	430a      	orrs	r2, r1
 8005410:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	e000      	b.n	8005418 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8005416:	2302      	movs	r3, #2
  }
}
 8005418:	0018      	movs	r0, r3
 800541a:	46bd      	mov	sp, r7
 800541c:	b004      	add	sp, #16
 800541e:	bd80      	pop	{r7, pc}
 8005420:	080060b9 	.word	0x080060b9
 8005424:	08006129 	.word	0x08006129
 8005428:	08006147 	.word	0x08006147

0800542c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005434:	46c0      	nop			; (mov r8, r8)
 8005436:	46bd      	mov	sp, r7
 8005438:	b002      	add	sp, #8
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005444:	46c0      	nop			; (mov r8, r8)
 8005446:	46bd      	mov	sp, r7
 8005448:	b002      	add	sp, #8
 800544a:	bd80      	pop	{r7, pc}

0800544c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800544c:	b5b0      	push	{r4, r5, r7, lr}
 800544e:	b08c      	sub	sp, #48	; 0x30
 8005450:	af00      	add	r7, sp, #0
 8005452:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg                     = 0x00000000U;
 8005454:	2300      	movs	r3, #0
 8005456:	62fb      	str	r3, [r7, #44]	; 0x2c
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8005458:	2313      	movs	r3, #19
 800545a:	2218      	movs	r2, #24
 800545c:	4694      	mov	ip, r2
 800545e:	44bc      	add	ip, r7
 8005460:	4463      	add	r3, ip
 8005462:	2210      	movs	r2, #16
 8005464:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8005466:	230c      	movs	r3, #12
 8005468:	2218      	movs	r2, #24
 800546a:	4694      	mov	ip, r2
 800546c:	44bc      	add	ip, r7
 800546e:	4463      	add	r3, ip
 8005470:	2200      	movs	r2, #0
 8005472:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8005474:	2310      	movs	r3, #16
 8005476:	2218      	movs	r2, #24
 8005478:	4694      	mov	ip, r2
 800547a:	44bc      	add	ip, r7
 800547c:	4463      	add	r3, ip
 800547e:	2200      	movs	r2, #0
 8005480:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005482:	230f      	movs	r3, #15
 8005484:	2218      	movs	r2, #24
 8005486:	4694      	mov	ip, r2
 8005488:	44bc      	add	ip, r7
 800548a:	4463      	add	r3, ip
 800548c:	2200      	movs	r2, #0
 800548e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	4ac8      	ldr	r2, [pc, #800]	; (80057b8 <UART_SetConfig+0x36c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d905      	bls.n	80054a6 <UART_SetConfig+0x5a>
 800549a:	4ac8      	ldr	r2, [pc, #800]	; (80057bc <UART_SetConfig+0x370>)
 800549c:	4bc8      	ldr	r3, [pc, #800]	; (80057c0 <UART_SetConfig+0x374>)
 800549e:	0011      	movs	r1, r2
 80054a0:	0018      	movs	r0, r3
 80054a2:	f005 f8f9 	bl	800a698 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	2380      	movs	r3, #128	; 0x80
 80054ac:	055b      	lsls	r3, r3, #21
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d00f      	beq.n	80054d2 <UART_SetConfig+0x86>
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00b      	beq.n	80054d2 <UART_SetConfig+0x86>
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	689a      	ldr	r2, [r3, #8]
 80054be:	2380      	movs	r3, #128	; 0x80
 80054c0:	015b      	lsls	r3, r3, #5
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d005      	beq.n	80054d2 <UART_SetConfig+0x86>
 80054c6:	4abf      	ldr	r2, [pc, #764]	; (80057c4 <UART_SetConfig+0x378>)
 80054c8:	4bbd      	ldr	r3, [pc, #756]	; (80057c0 <UART_SetConfig+0x374>)
 80054ca:	0011      	movs	r1, r2
 80054cc:	0018      	movs	r0, r3
 80054ce:	f005 f8e3 	bl	800a698 <assert_failed>
  if(UART_INSTANCE_LOWPOWER(huart))
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4abc      	ldr	r2, [pc, #752]	; (80057c8 <UART_SetConfig+0x37c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d110      	bne.n	80054fe <UART_SetConfig+0xb2>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d032      	beq.n	800554a <UART_SetConfig+0xfe>
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	68da      	ldr	r2, [r3, #12]
 80054e8:	2380      	movs	r3, #128	; 0x80
 80054ea:	019b      	lsls	r3, r3, #6
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d02c      	beq.n	800554a <UART_SetConfig+0xfe>
 80054f0:	4ab6      	ldr	r2, [pc, #728]	; (80057cc <UART_SetConfig+0x380>)
 80054f2:	4bb3      	ldr	r3, [pc, #716]	; (80057c0 <UART_SetConfig+0x374>)
 80054f4:	0011      	movs	r1, r2
 80054f6:	0018      	movs	r0, r3
 80054f8:	f005 f8ce 	bl	800a698 <assert_failed>
 80054fc:	e025      	b.n	800554a <UART_SetConfig+0xfe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d011      	beq.n	800552a <UART_SetConfig+0xde>
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	23c0      	movs	r3, #192	; 0xc0
 800550c:	019b      	lsls	r3, r3, #6
 800550e:	429a      	cmp	r2, r3
 8005510:	d00b      	beq.n	800552a <UART_SetConfig+0xde>
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	2380      	movs	r3, #128	; 0x80
 8005518:	019b      	lsls	r3, r3, #6
 800551a:	429a      	cmp	r2, r3
 800551c:	d005      	beq.n	800552a <UART_SetConfig+0xde>
 800551e:	4aac      	ldr	r2, [pc, #688]	; (80057d0 <UART_SetConfig+0x384>)
 8005520:	4ba7      	ldr	r3, [pc, #668]	; (80057c0 <UART_SetConfig+0x374>)
 8005522:	0011      	movs	r1, r2
 8005524:	0018      	movs	r0, r3
 8005526:	f005 f8b7 	bl	800a698 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00b      	beq.n	800554a <UART_SetConfig+0xfe>
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	6a1a      	ldr	r2, [r3, #32]
 8005536:	2380      	movs	r3, #128	; 0x80
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	429a      	cmp	r2, r3
 800553c:	d005      	beq.n	800554a <UART_SetConfig+0xfe>
 800553e:	4aa5      	ldr	r2, [pc, #660]	; (80057d4 <UART_SetConfig+0x388>)
 8005540:	4b9f      	ldr	r3, [pc, #636]	; (80057c0 <UART_SetConfig+0x374>)
 8005542:	0011      	movs	r1, r2
 8005544:	0018      	movs	r0, r3
 8005546:	f005 f8a7 	bl	800a698 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d012      	beq.n	8005578 <UART_SetConfig+0x12c>
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	691a      	ldr	r2, [r3, #16]
 8005556:	2380      	movs	r3, #128	; 0x80
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	429a      	cmp	r2, r3
 800555c:	d00c      	beq.n	8005578 <UART_SetConfig+0x12c>
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	691a      	ldr	r2, [r3, #16]
 8005562:	23c0      	movs	r3, #192	; 0xc0
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	429a      	cmp	r2, r3
 8005568:	d006      	beq.n	8005578 <UART_SetConfig+0x12c>
 800556a:	2385      	movs	r3, #133	; 0x85
 800556c:	011a      	lsls	r2, r3, #4
 800556e:	4b94      	ldr	r3, [pc, #592]	; (80057c0 <UART_SetConfig+0x374>)
 8005570:	0011      	movs	r1, r2
 8005572:	0018      	movs	r0, r3
 8005574:	f005 f890 	bl	800a698 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	220c      	movs	r2, #12
 800557e:	4393      	bics	r3, r2
 8005580:	d103      	bne.n	800558a <UART_SetConfig+0x13e>
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d105      	bne.n	8005596 <UART_SetConfig+0x14a>
 800558a:	4a93      	ldr	r2, [pc, #588]	; (80057d8 <UART_SetConfig+0x38c>)
 800558c:	4b8c      	ldr	r3, [pc, #560]	; (80057c0 <UART_SetConfig+0x374>)
 800558e:	0011      	movs	r1, r2
 8005590:	0018      	movs	r0, r3
 8005592:	f005 f881 	bl	800a698 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d017      	beq.n	80055ce <UART_SetConfig+0x182>
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	699a      	ldr	r2, [r3, #24]
 80055a2:	2380      	movs	r3, #128	; 0x80
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d011      	beq.n	80055ce <UART_SetConfig+0x182>
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	2380      	movs	r3, #128	; 0x80
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d00b      	beq.n	80055ce <UART_SetConfig+0x182>
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	699a      	ldr	r2, [r3, #24]
 80055ba:	23c0      	movs	r3, #192	; 0xc0
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	429a      	cmp	r2, r3
 80055c0:	d005      	beq.n	80055ce <UART_SetConfig+0x182>
 80055c2:	4a86      	ldr	r2, [pc, #536]	; (80057dc <UART_SetConfig+0x390>)
 80055c4:	4b7e      	ldr	r3, [pc, #504]	; (80057c0 <UART_SetConfig+0x374>)
 80055c6:	0011      	movs	r1, r2
 80055c8:	0018      	movs	r0, r3
 80055ca:	f005 f865 	bl	800a698 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00b      	beq.n	80055ee <UART_SetConfig+0x1a2>
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	69da      	ldr	r2, [r3, #28]
 80055da:	2380      	movs	r3, #128	; 0x80
 80055dc:	021b      	lsls	r3, r3, #8
 80055de:	429a      	cmp	r2, r3
 80055e0:	d005      	beq.n	80055ee <UART_SetConfig+0x1a2>
 80055e2:	4a7f      	ldr	r2, [pc, #508]	; (80057e0 <UART_SetConfig+0x394>)
 80055e4:	4b76      	ldr	r3, [pc, #472]	; (80057c0 <UART_SetConfig+0x374>)
 80055e6:	0011      	movs	r1, r2
 80055e8:	0018      	movs	r0, r3
 80055ea:	f005 f855 	bl	800a698 <assert_failed>
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	431a      	orrs	r2, r3
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	4313      	orrs	r3, r2
 8005604:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	69fa      	ldr	r2, [r7, #28]
 800560c:	6812      	ldr	r2, [r2, #0]
 800560e:	6812      	ldr	r2, [r2, #0]
 8005610:	4974      	ldr	r1, [pc, #464]	; (80057e4 <UART_SetConfig+0x398>)
 8005612:	4011      	ands	r1, r2
 8005614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005616:	430a      	orrs	r2, r1
 8005618:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69fa      	ldr	r2, [r7, #28]
 8005620:	6812      	ldr	r2, [r2, #0]
 8005622:	6852      	ldr	r2, [r2, #4]
 8005624:	4970      	ldr	r1, [pc, #448]	; (80057e8 <UART_SetConfig+0x39c>)
 8005626:	4011      	ands	r1, r2
 8005628:	69fa      	ldr	r2, [r7, #28]
 800562a:	68d2      	ldr	r2, [r2, #12]
 800562c:	430a      	orrs	r2, r1
 800562e:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a63      	ldr	r2, [pc, #396]	; (80057c8 <UART_SetConfig+0x37c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d004      	beq.n	800564a <UART_SetConfig+0x1fe>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005646:	4313      	orrs	r3, r2
 8005648:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69fa      	ldr	r2, [r7, #28]
 8005650:	6812      	ldr	r2, [r2, #0]
 8005652:	6892      	ldr	r2, [r2, #8]
 8005654:	4965      	ldr	r1, [pc, #404]	; (80057ec <UART_SetConfig+0x3a0>)
 8005656:	4011      	ands	r1, r2
 8005658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800565a:	430a      	orrs	r2, r1
 800565c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a63      	ldr	r2, [pc, #396]	; (80057f0 <UART_SetConfig+0x3a4>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d134      	bne.n	80056d2 <UART_SetConfig+0x286>
 8005668:	4b62      	ldr	r3, [pc, #392]	; (80057f4 <UART_SetConfig+0x3a8>)
 800566a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800566c:	2203      	movs	r2, #3
 800566e:	4013      	ands	r3, r2
 8005670:	2b01      	cmp	r3, #1
 8005672:	d015      	beq.n	80056a0 <UART_SetConfig+0x254>
 8005674:	d304      	bcc.n	8005680 <UART_SetConfig+0x234>
 8005676:	2b02      	cmp	r3, #2
 8005678:	d00a      	beq.n	8005690 <UART_SetConfig+0x244>
 800567a:	2b03      	cmp	r3, #3
 800567c:	d018      	beq.n	80056b0 <UART_SetConfig+0x264>
 800567e:	e01f      	b.n	80056c0 <UART_SetConfig+0x274>
 8005680:	2313      	movs	r3, #19
 8005682:	2218      	movs	r2, #24
 8005684:	4694      	mov	ip, r2
 8005686:	44bc      	add	ip, r7
 8005688:	4463      	add	r3, ip
 800568a:	2201      	movs	r2, #1
 800568c:	701a      	strb	r2, [r3, #0]
 800568e:	e0c4      	b.n	800581a <UART_SetConfig+0x3ce>
 8005690:	2313      	movs	r3, #19
 8005692:	2218      	movs	r2, #24
 8005694:	4694      	mov	ip, r2
 8005696:	44bc      	add	ip, r7
 8005698:	4463      	add	r3, ip
 800569a:	2202      	movs	r2, #2
 800569c:	701a      	strb	r2, [r3, #0]
 800569e:	e0bc      	b.n	800581a <UART_SetConfig+0x3ce>
 80056a0:	2313      	movs	r3, #19
 80056a2:	2218      	movs	r2, #24
 80056a4:	4694      	mov	ip, r2
 80056a6:	44bc      	add	ip, r7
 80056a8:	4463      	add	r3, ip
 80056aa:	2204      	movs	r2, #4
 80056ac:	701a      	strb	r2, [r3, #0]
 80056ae:	e0b4      	b.n	800581a <UART_SetConfig+0x3ce>
 80056b0:	2313      	movs	r3, #19
 80056b2:	2218      	movs	r2, #24
 80056b4:	4694      	mov	ip, r2
 80056b6:	44bc      	add	ip, r7
 80056b8:	4463      	add	r3, ip
 80056ba:	2208      	movs	r2, #8
 80056bc:	701a      	strb	r2, [r3, #0]
 80056be:	e0ac      	b.n	800581a <UART_SetConfig+0x3ce>
 80056c0:	2313      	movs	r3, #19
 80056c2:	2218      	movs	r2, #24
 80056c4:	4694      	mov	ip, r2
 80056c6:	44bc      	add	ip, r7
 80056c8:	4463      	add	r3, ip
 80056ca:	2210      	movs	r2, #16
 80056cc:	701a      	strb	r2, [r3, #0]
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	e0a3      	b.n	800581a <UART_SetConfig+0x3ce>
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a48      	ldr	r2, [pc, #288]	; (80057f8 <UART_SetConfig+0x3ac>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d137      	bne.n	800574c <UART_SetConfig+0x300>
 80056dc:	4b45      	ldr	r3, [pc, #276]	; (80057f4 <UART_SetConfig+0x3a8>)
 80056de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e0:	220c      	movs	r2, #12
 80056e2:	4013      	ands	r3, r2
 80056e4:	2b04      	cmp	r3, #4
 80056e6:	d018      	beq.n	800571a <UART_SetConfig+0x2ce>
 80056e8:	d802      	bhi.n	80056f0 <UART_SetConfig+0x2a4>
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <UART_SetConfig+0x2ae>
 80056ee:	e024      	b.n	800573a <UART_SetConfig+0x2ee>
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d00a      	beq.n	800570a <UART_SetConfig+0x2be>
 80056f4:	2b0c      	cmp	r3, #12
 80056f6:	d018      	beq.n	800572a <UART_SetConfig+0x2de>
 80056f8:	e01f      	b.n	800573a <UART_SetConfig+0x2ee>
 80056fa:	2313      	movs	r3, #19
 80056fc:	2218      	movs	r2, #24
 80056fe:	4694      	mov	ip, r2
 8005700:	44bc      	add	ip, r7
 8005702:	4463      	add	r3, ip
 8005704:	2200      	movs	r2, #0
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	e087      	b.n	800581a <UART_SetConfig+0x3ce>
 800570a:	2313      	movs	r3, #19
 800570c:	2218      	movs	r2, #24
 800570e:	4694      	mov	ip, r2
 8005710:	44bc      	add	ip, r7
 8005712:	4463      	add	r3, ip
 8005714:	2202      	movs	r2, #2
 8005716:	701a      	strb	r2, [r3, #0]
 8005718:	e07f      	b.n	800581a <UART_SetConfig+0x3ce>
 800571a:	2313      	movs	r3, #19
 800571c:	2218      	movs	r2, #24
 800571e:	4694      	mov	ip, r2
 8005720:	44bc      	add	ip, r7
 8005722:	4463      	add	r3, ip
 8005724:	2204      	movs	r2, #4
 8005726:	701a      	strb	r2, [r3, #0]
 8005728:	e077      	b.n	800581a <UART_SetConfig+0x3ce>
 800572a:	2313      	movs	r3, #19
 800572c:	2218      	movs	r2, #24
 800572e:	4694      	mov	ip, r2
 8005730:	44bc      	add	ip, r7
 8005732:	4463      	add	r3, ip
 8005734:	2208      	movs	r2, #8
 8005736:	701a      	strb	r2, [r3, #0]
 8005738:	e06f      	b.n	800581a <UART_SetConfig+0x3ce>
 800573a:	2313      	movs	r3, #19
 800573c:	2218      	movs	r2, #24
 800573e:	4694      	mov	ip, r2
 8005740:	44bc      	add	ip, r7
 8005742:	4463      	add	r3, ip
 8005744:	2210      	movs	r2, #16
 8005746:	701a      	strb	r2, [r3, #0]
 8005748:	46c0      	nop			; (mov r8, r8)
 800574a:	e066      	b.n	800581a <UART_SetConfig+0x3ce>
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a1d      	ldr	r2, [pc, #116]	; (80057c8 <UART_SetConfig+0x37c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d162      	bne.n	800581c <UART_SetConfig+0x3d0>
 8005756:	4b27      	ldr	r3, [pc, #156]	; (80057f4 <UART_SetConfig+0x3a8>)
 8005758:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800575a:	23c0      	movs	r3, #192	; 0xc0
 800575c:	011b      	lsls	r3, r3, #4
 800575e:	4013      	ands	r3, r2
 8005760:	2280      	movs	r2, #128	; 0x80
 8005762:	00d2      	lsls	r2, r2, #3
 8005764:	4293      	cmp	r3, r2
 8005766:	d01f      	beq.n	80057a8 <UART_SetConfig+0x35c>
 8005768:	2280      	movs	r2, #128	; 0x80
 800576a:	00d2      	lsls	r2, r2, #3
 800576c:	4293      	cmp	r3, r2
 800576e:	d802      	bhi.n	8005776 <UART_SetConfig+0x32a>
 8005770:	2b00      	cmp	r3, #0
 8005772:	d009      	beq.n	8005788 <UART_SetConfig+0x33c>
 8005774:	e04a      	b.n	800580c <UART_SetConfig+0x3c0>
 8005776:	2280      	movs	r2, #128	; 0x80
 8005778:	0112      	lsls	r2, r2, #4
 800577a:	4293      	cmp	r3, r2
 800577c:	d00c      	beq.n	8005798 <UART_SetConfig+0x34c>
 800577e:	22c0      	movs	r2, #192	; 0xc0
 8005780:	0112      	lsls	r2, r2, #4
 8005782:	4293      	cmp	r3, r2
 8005784:	d03a      	beq.n	80057fc <UART_SetConfig+0x3b0>
 8005786:	e041      	b.n	800580c <UART_SetConfig+0x3c0>
 8005788:	2313      	movs	r3, #19
 800578a:	2218      	movs	r2, #24
 800578c:	4694      	mov	ip, r2
 800578e:	44bc      	add	ip, r7
 8005790:	4463      	add	r3, ip
 8005792:	2200      	movs	r2, #0
 8005794:	701a      	strb	r2, [r3, #0]
 8005796:	e040      	b.n	800581a <UART_SetConfig+0x3ce>
 8005798:	2313      	movs	r3, #19
 800579a:	2218      	movs	r2, #24
 800579c:	4694      	mov	ip, r2
 800579e:	44bc      	add	ip, r7
 80057a0:	4463      	add	r3, ip
 80057a2:	2202      	movs	r2, #2
 80057a4:	701a      	strb	r2, [r3, #0]
 80057a6:	e038      	b.n	800581a <UART_SetConfig+0x3ce>
 80057a8:	2313      	movs	r3, #19
 80057aa:	2218      	movs	r2, #24
 80057ac:	4694      	mov	ip, r2
 80057ae:	44bc      	add	ip, r7
 80057b0:	4463      	add	r3, ip
 80057b2:	2204      	movs	r2, #4
 80057b4:	701a      	strb	r2, [r3, #0]
 80057b6:	e030      	b.n	800581a <UART_SetConfig+0x3ce>
 80057b8:	003d0900 	.word	0x003d0900
 80057bc:	00000844 	.word	0x00000844
 80057c0:	0800c1ec 	.word	0x0800c1ec
 80057c4:	00000845 	.word	0x00000845
 80057c8:	40004800 	.word	0x40004800
 80057cc:	00000848 	.word	0x00000848
 80057d0:	0000084c 	.word	0x0000084c
 80057d4:	0000084d 	.word	0x0000084d
 80057d8:	00000851 	.word	0x00000851
 80057dc:	00000852 	.word	0x00000852
 80057e0:	00000853 	.word	0x00000853
 80057e4:	efff69f3 	.word	0xefff69f3
 80057e8:	ffffcfff 	.word	0xffffcfff
 80057ec:	fffff4ff 	.word	0xfffff4ff
 80057f0:	40013800 	.word	0x40013800
 80057f4:	40021000 	.word	0x40021000
 80057f8:	40004400 	.word	0x40004400
 80057fc:	2313      	movs	r3, #19
 80057fe:	2218      	movs	r2, #24
 8005800:	4694      	mov	ip, r2
 8005802:	44bc      	add	ip, r7
 8005804:	4463      	add	r3, ip
 8005806:	2208      	movs	r2, #8
 8005808:	701a      	strb	r2, [r3, #0]
 800580a:	e006      	b.n	800581a <UART_SetConfig+0x3ce>
 800580c:	2313      	movs	r3, #19
 800580e:	2218      	movs	r2, #24
 8005810:	4694      	mov	ip, r2
 8005812:	44bc      	add	ip, r7
 8005814:	4463      	add	r3, ip
 8005816:	2210      	movs	r2, #16
 8005818:	701a      	strb	r2, [r3, #0]
 800581a:	46c0      	nop			; (mov r8, r8)
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 800581c:	2002      	movs	r0, #2
 800581e:	f7fe f931 	bl	8003a84 <HAL_RCCEx_GetPeriphCLKFreq>
 8005822:	0003      	movs	r3, r0
 8005824:	623b      	str	r3, [r7, #32]

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4adb      	ldr	r2, [pc, #876]	; (8005b98 <UART_SetConfig+0x74c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d000      	beq.n	8005832 <UART_SetConfig+0x3e6>
 8005830:	e085      	b.n	800593e <UART_SetConfig+0x4f2>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;
 8005832:	2300      	movs	r3, #0
 8005834:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (clocksource)
 8005836:	2313      	movs	r3, #19
 8005838:	2218      	movs	r2, #24
 800583a:	4694      	mov	ip, r2
 800583c:	44bc      	add	ip, r7
 800583e:	4463      	add	r3, ip
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	2b02      	cmp	r3, #2
 8005844:	d00d      	beq.n	8005862 <UART_SetConfig+0x416>
 8005846:	dc02      	bgt.n	800584e <UART_SetConfig+0x402>
 8005848:	2b00      	cmp	r3, #0
 800584a:	d005      	beq.n	8005858 <UART_SetConfig+0x40c>
 800584c:	e01d      	b.n	800588a <UART_SetConfig+0x43e>
 800584e:	2b04      	cmp	r3, #4
 8005850:	d012      	beq.n	8005878 <UART_SetConfig+0x42c>
 8005852:	2b08      	cmp	r3, #8
 8005854:	d015      	beq.n	8005882 <UART_SetConfig+0x436>
 8005856:	e018      	b.n	800588a <UART_SetConfig+0x43e>
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8005858:	f7fd fe9c 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 800585c:	0003      	movs	r3, r0
 800585e:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8005860:	e01b      	b.n	800589a <UART_SetConfig+0x44e>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005862:	4bce      	ldr	r3, [pc, #824]	; (8005b9c <UART_SetConfig+0x750>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2210      	movs	r2, #16
 8005868:	4013      	ands	r3, r2
 800586a:	d002      	beq.n	8005872 <UART_SetConfig+0x426>
      {
        tmpreg = (uint32_t) (HSI_VALUE >> 2U);
 800586c:	4bcc      	ldr	r3, [pc, #816]	; (8005ba0 <UART_SetConfig+0x754>)
 800586e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      else
      {
        tmpreg = (uint32_t) HSI_VALUE;
      }
      break;
 8005870:	e013      	b.n	800589a <UART_SetConfig+0x44e>
        tmpreg = (uint32_t) HSI_VALUE;
 8005872:	4bcc      	ldr	r3, [pc, #816]	; (8005ba4 <UART_SetConfig+0x758>)
 8005874:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8005876:	e010      	b.n	800589a <UART_SetConfig+0x44e>
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 8005878:	f7fd fe04 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 800587c:	0003      	movs	r3, r0
 800587e:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8005880:	e00b      	b.n	800589a <UART_SetConfig+0x44e>
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 8005882:	2380      	movs	r3, #128	; 0x80
 8005884:	021b      	lsls	r3, r3, #8
 8005886:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8005888:	e007      	b.n	800589a <UART_SetConfig+0x44e>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800588a:	230f      	movs	r3, #15
 800588c:	2218      	movs	r2, #24
 800588e:	4694      	mov	ip, r2
 8005890:	44bc      	add	ip, r7
 8005892:	4463      	add	r3, ip
 8005894:	2201      	movs	r2, #1
 8005896:	701a      	strb	r2, [r3, #0]
      break;
 8005898:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 800589a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589c:	2b00      	cmp	r3, #0
 800589e:	d100      	bne.n	80058a2 <UART_SetConfig+0x456>
 80058a0:	e1bb      	b.n	8005c1a <UART_SetConfig+0x7ce>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	0013      	movs	r3, r2
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	189a      	adds	r2, r3, r2
 80058ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d805      	bhi.n	80058be <UART_SetConfig+0x472>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	031a      	lsls	r2, r3, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80058b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d207      	bcs.n	80058ce <UART_SetConfig+0x482>
      {
        ret = HAL_ERROR;
 80058be:	230f      	movs	r3, #15
 80058c0:	2218      	movs	r2, #24
 80058c2:	4694      	mov	ip, r2
 80058c4:	44bc      	add	ip, r7
 80058c6:	4463      	add	r3, ip
 80058c8:	2201      	movs	r2, #1
 80058ca:	701a      	strb	r2, [r3, #0]
 80058cc:	e1a5      	b.n	8005c1a <UART_SetConfig+0x7ce>
      }
      else
      {
        tmpreg = (uint32_t)(UART_DIV_LPUART(tmpreg, huart->Init.BaudRate));
 80058ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d0:	613b      	str	r3, [r7, #16]
 80058d2:	2300      	movs	r3, #0
 80058d4:	617b      	str	r3, [r7, #20]
 80058d6:	6939      	ldr	r1, [r7, #16]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	000b      	movs	r3, r1
 80058dc:	0e1b      	lsrs	r3, r3, #24
 80058de:	0010      	movs	r0, r2
 80058e0:	0205      	lsls	r5, r0, #8
 80058e2:	431d      	orrs	r5, r3
 80058e4:	000b      	movs	r3, r1
 80058e6:	021c      	lsls	r4, r3, #8
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	085b      	lsrs	r3, r3, #1
 80058ee:	60bb      	str	r3, [r7, #8]
 80058f0:	2300      	movs	r3, #0
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	68b8      	ldr	r0, [r7, #8]
 80058f6:	68f9      	ldr	r1, [r7, #12]
 80058f8:	1900      	adds	r0, r0, r4
 80058fa:	4169      	adcs	r1, r5
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	603b      	str	r3, [r7, #0]
 8005902:	2300      	movs	r3, #0
 8005904:	607b      	str	r3, [r7, #4]
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f7fa fc89 	bl	8000220 <__aeabi_uldivmod>
 800590e:	0003      	movs	r3, r0
 8005910:	000c      	movs	r4, r1
 8005912:	62fb      	str	r3, [r7, #44]	; 0x2c
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8005914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005916:	4aa4      	ldr	r2, [pc, #656]	; (8005ba8 <UART_SetConfig+0x75c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d908      	bls.n	800592e <UART_SetConfig+0x4e2>
 800591c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591e:	4aa3      	ldr	r2, [pc, #652]	; (8005bac <UART_SetConfig+0x760>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d804      	bhi.n	800592e <UART_SetConfig+0x4e2>
        {
           huart->Instance->BRR = tmpreg;
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800592a:	60da      	str	r2, [r3, #12]
 800592c:	e175      	b.n	8005c1a <UART_SetConfig+0x7ce>
        }
        else
        {
          ret = HAL_ERROR;
 800592e:	230f      	movs	r3, #15
 8005930:	2218      	movs	r2, #24
 8005932:	4694      	mov	ip, r2
 8005934:	44bc      	add	ip, r7
 8005936:	4463      	add	r3, ip
 8005938:	2201      	movs	r2, #1
 800593a:	701a      	strb	r2, [r3, #0]
 800593c:	e16d      	b.n	8005c1a <UART_SetConfig+0x7ce>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	69da      	ldr	r2, [r3, #28]
 8005942:	2380      	movs	r3, #128	; 0x80
 8005944:	021b      	lsls	r3, r3, #8
 8005946:	429a      	cmp	r2, r3
 8005948:	d000      	beq.n	800594c <UART_SetConfig+0x500>
 800594a:	e0ca      	b.n	8005ae2 <UART_SetConfig+0x696>
  {
    switch (clocksource)
 800594c:	2313      	movs	r3, #19
 800594e:	2218      	movs	r2, #24
 8005950:	4694      	mov	ip, r2
 8005952:	44bc      	add	ip, r7
 8005954:	4463      	add	r3, ip
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	2b08      	cmp	r3, #8
 800595a:	d900      	bls.n	800595e <UART_SetConfig+0x512>
 800595c:	e089      	b.n	8005a72 <UART_SetConfig+0x626>
 800595e:	009a      	lsls	r2, r3, #2
 8005960:	4b93      	ldr	r3, [pc, #588]	; (8005bb0 <UART_SetConfig+0x764>)
 8005962:	18d3      	adds	r3, r2, r3
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	469f      	mov	pc, r3
    {
    case UART_CLOCKSOURCE_PCLK1:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(frequency, huart->Init.BaudRate));
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	005a      	lsls	r2, r3, #1
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	085b      	lsrs	r3, r3, #1
 8005972:	18d2      	adds	r2, r2, r3
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	0019      	movs	r1, r3
 800597a:	0010      	movs	r0, r2
 800597c:	f7fa fbc4 	bl	8000108 <__udivsi3>
 8005980:	0003      	movs	r3, r0
 8005982:	001a      	movs	r2, r3
 8005984:	2310      	movs	r3, #16
 8005986:	2118      	movs	r1, #24
 8005988:	468c      	mov	ip, r1
 800598a:	44bc      	add	ip, r7
 800598c:	4463      	add	r3, ip
 800598e:	801a      	strh	r2, [r3, #0]
      break;
 8005990:	e077      	b.n	8005a82 <UART_SetConfig+0x636>
    case UART_CLOCKSOURCE_PCLK2:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005992:	f7fd fe15 	bl	80035c0 <HAL_RCC_GetPCLK2Freq>
 8005996:	0003      	movs	r3, r0
 8005998:	005a      	lsls	r2, r3, #1
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	085b      	lsrs	r3, r3, #1
 80059a0:	18d2      	adds	r2, r2, r3
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	0019      	movs	r1, r3
 80059a8:	0010      	movs	r0, r2
 80059aa:	f7fa fbad 	bl	8000108 <__udivsi3>
 80059ae:	0003      	movs	r3, r0
 80059b0:	001a      	movs	r2, r3
 80059b2:	2310      	movs	r3, #16
 80059b4:	2118      	movs	r1, #24
 80059b6:	468c      	mov	ip, r1
 80059b8:	44bc      	add	ip, r7
 80059ba:	4463      	add	r3, ip
 80059bc:	801a      	strh	r2, [r3, #0]
      break;
 80059be:	e060      	b.n	8005a82 <UART_SetConfig+0x636>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059c0:	4b76      	ldr	r3, [pc, #472]	; (8005b9c <UART_SetConfig+0x750>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2210      	movs	r2, #16
 80059c6:	4013      	ands	r3, r2
 80059c8:	d013      	beq.n	80059f2 <UART_SetConfig+0x5a6>
      {
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	085b      	lsrs	r3, r3, #1
 80059d0:	4a78      	ldr	r2, [pc, #480]	; (8005bb4 <UART_SetConfig+0x768>)
 80059d2:	189a      	adds	r2, r3, r2
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	0019      	movs	r1, r3
 80059da:	0010      	movs	r0, r2
 80059dc:	f7fa fb94 	bl	8000108 <__udivsi3>
 80059e0:	0003      	movs	r3, r0
 80059e2:	001a      	movs	r2, r3
 80059e4:	2310      	movs	r3, #16
 80059e6:	2118      	movs	r1, #24
 80059e8:	468c      	mov	ip, r1
 80059ea:	44bc      	add	ip, r7
 80059ec:	4463      	add	r3, ip
 80059ee:	801a      	strh	r2, [r3, #0]
      }
      else
      {
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
      }
      break;
 80059f0:	e047      	b.n	8005a82 <UART_SetConfig+0x636>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	085b      	lsrs	r3, r3, #1
 80059f8:	4a6f      	ldr	r2, [pc, #444]	; (8005bb8 <UART_SetConfig+0x76c>)
 80059fa:	189a      	adds	r2, r3, r2
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	0019      	movs	r1, r3
 8005a02:	0010      	movs	r0, r2
 8005a04:	f7fa fb80 	bl	8000108 <__udivsi3>
 8005a08:	0003      	movs	r3, r0
 8005a0a:	001a      	movs	r2, r3
 8005a0c:	2310      	movs	r3, #16
 8005a0e:	2118      	movs	r1, #24
 8005a10:	468c      	mov	ip, r1
 8005a12:	44bc      	add	ip, r7
 8005a14:	4463      	add	r3, ip
 8005a16:	801a      	strh	r2, [r3, #0]
      break;
 8005a18:	e033      	b.n	8005a82 <UART_SetConfig+0x636>
    case UART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005a1a:	f7fd fd33 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8005a1e:	0003      	movs	r3, r0
 8005a20:	005a      	lsls	r2, r3, #1
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	085b      	lsrs	r3, r3, #1
 8005a28:	18d2      	adds	r2, r2, r3
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	0019      	movs	r1, r3
 8005a30:	0010      	movs	r0, r2
 8005a32:	f7fa fb69 	bl	8000108 <__udivsi3>
 8005a36:	0003      	movs	r3, r0
 8005a38:	001a      	movs	r2, r3
 8005a3a:	2310      	movs	r3, #16
 8005a3c:	2118      	movs	r1, #24
 8005a3e:	468c      	mov	ip, r1
 8005a40:	44bc      	add	ip, r7
 8005a42:	4463      	add	r3, ip
 8005a44:	801a      	strh	r2, [r3, #0]
      break;
 8005a46:	e01c      	b.n	8005a82 <UART_SetConfig+0x636>
    case UART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	085b      	lsrs	r3, r3, #1
 8005a4e:	2280      	movs	r2, #128	; 0x80
 8005a50:	0252      	lsls	r2, r2, #9
 8005a52:	189a      	adds	r2, r3, r2
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	0019      	movs	r1, r3
 8005a5a:	0010      	movs	r0, r2
 8005a5c:	f7fa fb54 	bl	8000108 <__udivsi3>
 8005a60:	0003      	movs	r3, r0
 8005a62:	001a      	movs	r2, r3
 8005a64:	2310      	movs	r3, #16
 8005a66:	2118      	movs	r1, #24
 8005a68:	468c      	mov	ip, r1
 8005a6a:	44bc      	add	ip, r7
 8005a6c:	4463      	add	r3, ip
 8005a6e:	801a      	strh	r2, [r3, #0]
      break;
 8005a70:	e007      	b.n	8005a82 <UART_SetConfig+0x636>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8005a72:	230f      	movs	r3, #15
 8005a74:	2218      	movs	r2, #24
 8005a76:	4694      	mov	ip, r2
 8005a78:	44bc      	add	ip, r7
 8005a7a:	4463      	add	r3, ip
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	701a      	strb	r2, [r3, #0]
      break;
 8005a80:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8005a82:	230c      	movs	r3, #12
 8005a84:	2218      	movs	r2, #24
 8005a86:	4694      	mov	ip, r2
 8005a88:	44bc      	add	ip, r7
 8005a8a:	4463      	add	r3, ip
 8005a8c:	2210      	movs	r2, #16
 8005a8e:	2118      	movs	r1, #24
 8005a90:	468c      	mov	ip, r1
 8005a92:	44bc      	add	ip, r7
 8005a94:	4462      	add	r2, ip
 8005a96:	8812      	ldrh	r2, [r2, #0]
 8005a98:	210f      	movs	r1, #15
 8005a9a:	438a      	bics	r2, r1
 8005a9c:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 8005a9e:	2310      	movs	r3, #16
 8005aa0:	2218      	movs	r2, #24
 8005aa2:	4694      	mov	ip, r2
 8005aa4:	44bc      	add	ip, r7
 8005aa6:	4463      	add	r3, ip
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	105b      	asrs	r3, r3, #1
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	2207      	movs	r2, #7
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	b299      	uxth	r1, r3
 8005ab4:	230c      	movs	r3, #12
 8005ab6:	2218      	movs	r2, #24
 8005ab8:	4694      	mov	ip, r2
 8005aba:	44bc      	add	ip, r7
 8005abc:	4463      	add	r3, ip
 8005abe:	220c      	movs	r2, #12
 8005ac0:	2018      	movs	r0, #24
 8005ac2:	4684      	mov	ip, r0
 8005ac4:	44bc      	add	ip, r7
 8005ac6:	4462      	add	r2, ip
 8005ac8:	8812      	ldrh	r2, [r2, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	220c      	movs	r2, #12
 8005ad4:	2118      	movs	r1, #24
 8005ad6:	468c      	mov	ip, r1
 8005ad8:	44bc      	add	ip, r7
 8005ada:	4462      	add	r2, ip
 8005adc:	8812      	ldrh	r2, [r2, #0]
 8005ade:	60da      	str	r2, [r3, #12]
 8005ae0:	e09b      	b.n	8005c1a <UART_SetConfig+0x7ce>
  }
  else
  {
    switch (clocksource)
 8005ae2:	2313      	movs	r3, #19
 8005ae4:	2218      	movs	r2, #24
 8005ae6:	4694      	mov	ip, r2
 8005ae8:	44bc      	add	ip, r7
 8005aea:	4463      	add	r3, ip
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	2b08      	cmp	r3, #8
 8005af0:	d900      	bls.n	8005af4 <UART_SetConfig+0x6a8>
 8005af2:	e08a      	b.n	8005c0a <UART_SetConfig+0x7be>
 8005af4:	009a      	lsls	r2, r3, #2
 8005af6:	4b31      	ldr	r3, [pc, #196]	; (8005bbc <UART_SetConfig+0x770>)
 8005af8:	18d3      	adds	r3, r2, r3
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	469f      	mov	pc, r3
    {
    case UART_CLOCKSOURCE_PCLK1:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	681c      	ldr	r4, [r3, #0]
 8005b02:	f7fd fd47 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 8005b06:	0002      	movs	r2, r0
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	085b      	lsrs	r3, r3, #1
 8005b0e:	18d2      	adds	r2, r2, r3
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	0019      	movs	r1, r3
 8005b16:	0010      	movs	r0, r2
 8005b18:	f7fa faf6 	bl	8000108 <__udivsi3>
 8005b1c:	0003      	movs	r3, r0
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	60e3      	str	r3, [r4, #12]
      break;
 8005b22:	e07a      	b.n	8005c1a <UART_SetConfig+0x7ce>
    case UART_CLOCKSOURCE_PCLK2:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	681c      	ldr	r4, [r3, #0]
 8005b28:	f7fd fd4a 	bl	80035c0 <HAL_RCC_GetPCLK2Freq>
 8005b2c:	0002      	movs	r2, r0
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	085b      	lsrs	r3, r3, #1
 8005b34:	18d2      	adds	r2, r2, r3
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	0019      	movs	r1, r3
 8005b3c:	0010      	movs	r0, r2
 8005b3e:	f7fa fae3 	bl	8000108 <__udivsi3>
 8005b42:	0003      	movs	r3, r0
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	60e3      	str	r3, [r4, #12]
      break;
 8005b48:	e067      	b.n	8005c1a <UART_SetConfig+0x7ce>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b4a:	4b14      	ldr	r3, [pc, #80]	; (8005b9c <UART_SetConfig+0x750>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2210      	movs	r2, #16
 8005b50:	4013      	ands	r3, r2
 8005b52:	d010      	beq.n	8005b76 <UART_SetConfig+0x72a>
      {
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	681c      	ldr	r4, [r3, #0]
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	085b      	lsrs	r3, r3, #1
 8005b5e:	4a10      	ldr	r2, [pc, #64]	; (8005ba0 <UART_SetConfig+0x754>)
 8005b60:	189a      	adds	r2, r3, r2
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	0019      	movs	r1, r3
 8005b68:	0010      	movs	r0, r2
 8005b6a:	f7fa facd 	bl	8000108 <__udivsi3>
 8005b6e:	0003      	movs	r3, r0
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	60e3      	str	r3, [r4, #12]
      }
      else
      {
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
      }
      break;
 8005b74:	e051      	b.n	8005c1a <UART_SetConfig+0x7ce>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	681c      	ldr	r4, [r3, #0]
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	085b      	lsrs	r3, r3, #1
 8005b80:	4a08      	ldr	r2, [pc, #32]	; (8005ba4 <UART_SetConfig+0x758>)
 8005b82:	189a      	adds	r2, r3, r2
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	0019      	movs	r1, r3
 8005b8a:	0010      	movs	r0, r2
 8005b8c:	f7fa fabc 	bl	8000108 <__udivsi3>
 8005b90:	0003      	movs	r3, r0
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	60e3      	str	r3, [r4, #12]
      break;
 8005b96:	e040      	b.n	8005c1a <UART_SetConfig+0x7ce>
 8005b98:	40004800 	.word	0x40004800
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	003d0900 	.word	0x003d0900
 8005ba4:	00f42400 	.word	0x00f42400
 8005ba8:	000002ff 	.word	0x000002ff
 8005bac:	000fffff 	.word	0x000fffff
 8005bb0:	0800c424 	.word	0x0800c424
 8005bb4:	007a1200 	.word	0x007a1200
 8005bb8:	01e84800 	.word	0x01e84800
 8005bbc:	0800c448 	.word	0x0800c448
    case UART_CLOCKSOURCE_SYSCLK:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	681c      	ldr	r4, [r3, #0]
 8005bc4:	f7fd fc5e 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8005bc8:	0002      	movs	r2, r0
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	085b      	lsrs	r3, r3, #1
 8005bd0:	18d2      	adds	r2, r2, r3
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	0019      	movs	r1, r3
 8005bd8:	0010      	movs	r0, r2
 8005bda:	f7fa fa95 	bl	8000108 <__udivsi3>
 8005bde:	0003      	movs	r3, r0
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	60e3      	str	r3, [r4, #12]
      break;
 8005be4:	e019      	b.n	8005c1a <UART_SetConfig+0x7ce>
    case UART_CLOCKSOURCE_LSE:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	681c      	ldr	r4, [r3, #0]
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	085b      	lsrs	r3, r3, #1
 8005bf0:	2280      	movs	r2, #128	; 0x80
 8005bf2:	0212      	lsls	r2, r2, #8
 8005bf4:	189a      	adds	r2, r3, r2
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	0019      	movs	r1, r3
 8005bfc:	0010      	movs	r0, r2
 8005bfe:	f7fa fa83 	bl	8000108 <__udivsi3>
 8005c02:	0003      	movs	r3, r0
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	60e3      	str	r3, [r4, #12]
      break;
 8005c08:	e007      	b.n	8005c1a <UART_SetConfig+0x7ce>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8005c0a:	230f      	movs	r3, #15
 8005c0c:	2218      	movs	r2, #24
 8005c0e:	4694      	mov	ip, r2
 8005c10:	44bc      	add	ip, r7
 8005c12:	4463      	add	r3, ip
 8005c14:	2201      	movs	r2, #1
 8005c16:	701a      	strb	r2, [r3, #0]
      break;
 8005c18:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8005c1a:	230f      	movs	r3, #15
 8005c1c:	2218      	movs	r2, #24
 8005c1e:	4694      	mov	ip, r2
 8005c20:	44bc      	add	ip, r7
 8005c22:	4463      	add	r3, ip
 8005c24:	781b      	ldrb	r3, [r3, #0]

}
 8005c26:	0018      	movs	r0, r3
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	b00c      	add	sp, #48	; 0x30
 8005c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8005c2e:	46c0      	nop			; (mov r8, r8)

08005c30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	2bff      	cmp	r3, #255	; 0xff
 8005c3e:	d905      	bls.n	8005c4c <UART_AdvFeatureConfig+0x1c>
 8005c40:	4aa3      	ldr	r2, [pc, #652]	; (8005ed0 <UART_AdvFeatureConfig+0x2a0>)
 8005c42:	4ba4      	ldr	r3, [pc, #656]	; (8005ed4 <UART_AdvFeatureConfig+0x2a4>)
 8005c44:	0011      	movs	r1, r2
 8005c46:	0018      	movs	r0, r3
 8005c48:	f004 fd26 	bl	800a698 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	2201      	movs	r2, #1
 8005c52:	4013      	ands	r3, r2
 8005c54:	d01a      	beq.n	8005c8c <UART_AdvFeatureConfig+0x5c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00b      	beq.n	8005c76 <UART_AdvFeatureConfig+0x46>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c62:	2380      	movs	r3, #128	; 0x80
 8005c64:	029b      	lsls	r3, r3, #10
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d005      	beq.n	8005c76 <UART_AdvFeatureConfig+0x46>
 8005c6a:	4a9b      	ldr	r2, [pc, #620]	; (8005ed8 <UART_AdvFeatureConfig+0x2a8>)
 8005c6c:	4b99      	ldr	r3, [pc, #612]	; (8005ed4 <UART_AdvFeatureConfig+0x2a4>)
 8005c6e:	0011      	movs	r1, r2
 8005c70:	0018      	movs	r0, r3
 8005c72:	f004 fd11 	bl	800a698 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6812      	ldr	r2, [r2, #0]
 8005c7e:	6852      	ldr	r2, [r2, #4]
 8005c80:	4996      	ldr	r1, [pc, #600]	; (8005edc <UART_AdvFeatureConfig+0x2ac>)
 8005c82:	4011      	ands	r1, r2
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	2202      	movs	r2, #2
 8005c92:	4013      	ands	r3, r2
 8005c94:	d01a      	beq.n	8005ccc <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00b      	beq.n	8005cb6 <UART_AdvFeatureConfig+0x86>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca2:	2380      	movs	r3, #128	; 0x80
 8005ca4:	025b      	lsls	r3, r3, #9
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d005      	beq.n	8005cb6 <UART_AdvFeatureConfig+0x86>
 8005caa:	4a8d      	ldr	r2, [pc, #564]	; (8005ee0 <UART_AdvFeatureConfig+0x2b0>)
 8005cac:	4b89      	ldr	r3, [pc, #548]	; (8005ed4 <UART_AdvFeatureConfig+0x2a4>)
 8005cae:	0011      	movs	r1, r2
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	f004 fcf1 	bl	800a698 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6812      	ldr	r2, [r2, #0]
 8005cbe:	6852      	ldr	r2, [r2, #4]
 8005cc0:	4988      	ldr	r1, [pc, #544]	; (8005ee4 <UART_AdvFeatureConfig+0x2b4>)
 8005cc2:	4011      	ands	r1, r2
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	2204      	movs	r2, #4
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	d01a      	beq.n	8005d0c <UART_AdvFeatureConfig+0xdc>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00b      	beq.n	8005cf6 <UART_AdvFeatureConfig+0xc6>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ce2:	2380      	movs	r3, #128	; 0x80
 8005ce4:	02db      	lsls	r3, r3, #11
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d005      	beq.n	8005cf6 <UART_AdvFeatureConfig+0xc6>
 8005cea:	4a7f      	ldr	r2, [pc, #508]	; (8005ee8 <UART_AdvFeatureConfig+0x2b8>)
 8005cec:	4b79      	ldr	r3, [pc, #484]	; (8005ed4 <UART_AdvFeatureConfig+0x2a4>)
 8005cee:	0011      	movs	r1, r2
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	f004 fcd1 	bl	800a698 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	6812      	ldr	r2, [r2, #0]
 8005cfe:	6852      	ldr	r2, [r2, #4]
 8005d00:	497a      	ldr	r1, [pc, #488]	; (8005eec <UART_AdvFeatureConfig+0x2bc>)
 8005d02:	4011      	ands	r1, r2
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	2208      	movs	r2, #8
 8005d12:	4013      	ands	r3, r2
 8005d14:	d01a      	beq.n	8005d4c <UART_AdvFeatureConfig+0x11c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00b      	beq.n	8005d36 <UART_AdvFeatureConfig+0x106>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d22:	2380      	movs	r3, #128	; 0x80
 8005d24:	021b      	lsls	r3, r3, #8
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d005      	beq.n	8005d36 <UART_AdvFeatureConfig+0x106>
 8005d2a:	4a71      	ldr	r2, [pc, #452]	; (8005ef0 <UART_AdvFeatureConfig+0x2c0>)
 8005d2c:	4b69      	ldr	r3, [pc, #420]	; (8005ed4 <UART_AdvFeatureConfig+0x2a4>)
 8005d2e:	0011      	movs	r1, r2
 8005d30:	0018      	movs	r0, r3
 8005d32:	f004 fcb1 	bl	800a698 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	6812      	ldr	r2, [r2, #0]
 8005d3e:	6852      	ldr	r2, [r2, #4]
 8005d40:	496c      	ldr	r1, [pc, #432]	; (8005ef4 <UART_AdvFeatureConfig+0x2c4>)
 8005d42:	4011      	ands	r1, r2
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	2210      	movs	r2, #16
 8005d52:	4013      	ands	r3, r2
 8005d54:	d01a      	beq.n	8005d8c <UART_AdvFeatureConfig+0x15c>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00b      	beq.n	8005d76 <UART_AdvFeatureConfig+0x146>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d62:	2380      	movs	r3, #128	; 0x80
 8005d64:	015b      	lsls	r3, r3, #5
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d005      	beq.n	8005d76 <UART_AdvFeatureConfig+0x146>
 8005d6a:	4a63      	ldr	r2, [pc, #396]	; (8005ef8 <UART_AdvFeatureConfig+0x2c8>)
 8005d6c:	4b59      	ldr	r3, [pc, #356]	; (8005ed4 <UART_AdvFeatureConfig+0x2a4>)
 8005d6e:	0011      	movs	r1, r2
 8005d70:	0018      	movs	r0, r3
 8005d72:	f004 fc91 	bl	800a698 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6812      	ldr	r2, [r2, #0]
 8005d7e:	6892      	ldr	r2, [r2, #8]
 8005d80:	495e      	ldr	r1, [pc, #376]	; (8005efc <UART_AdvFeatureConfig+0x2cc>)
 8005d82:	4011      	ands	r1, r2
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	2220      	movs	r2, #32
 8005d92:	4013      	ands	r3, r2
 8005d94:	d01a      	beq.n	8005dcc <UART_AdvFeatureConfig+0x19c>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00b      	beq.n	8005db6 <UART_AdvFeatureConfig+0x186>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005da2:	2380      	movs	r3, #128	; 0x80
 8005da4:	019b      	lsls	r3, r3, #6
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d005      	beq.n	8005db6 <UART_AdvFeatureConfig+0x186>
 8005daa:	4a55      	ldr	r2, [pc, #340]	; (8005f00 <UART_AdvFeatureConfig+0x2d0>)
 8005dac:	4b49      	ldr	r3, [pc, #292]	; (8005ed4 <UART_AdvFeatureConfig+0x2a4>)
 8005dae:	0011      	movs	r1, r2
 8005db0:	0018      	movs	r0, r3
 8005db2:	f004 fc71 	bl	800a698 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6812      	ldr	r2, [r2, #0]
 8005dbe:	6892      	ldr	r2, [r2, #8]
 8005dc0:	4950      	ldr	r1, [pc, #320]	; (8005f04 <UART_AdvFeatureConfig+0x2d4>)
 8005dc2:	4011      	ands	r1, r2
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	2240      	movs	r2, #64	; 0x40
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	d058      	beq.n	8005e88 <UART_AdvFeatureConfig+0x258>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a4b      	ldr	r2, [pc, #300]	; (8005f08 <UART_AdvFeatureConfig+0x2d8>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d00b      	beq.n	8005df8 <UART_AdvFeatureConfig+0x1c8>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a49      	ldr	r2, [pc, #292]	; (8005f0c <UART_AdvFeatureConfig+0x2dc>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d006      	beq.n	8005df8 <UART_AdvFeatureConfig+0x1c8>
 8005dea:	2393      	movs	r3, #147	; 0x93
 8005dec:	011a      	lsls	r2, r3, #4
 8005dee:	4b39      	ldr	r3, [pc, #228]	; (8005ed4 <UART_AdvFeatureConfig+0x2a4>)
 8005df0:	0011      	movs	r1, r2
 8005df2:	0018      	movs	r0, r3
 8005df4:	f004 fc50 	bl	800a698 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00b      	beq.n	8005e18 <UART_AdvFeatureConfig+0x1e8>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e04:	2380      	movs	r3, #128	; 0x80
 8005e06:	035b      	lsls	r3, r3, #13
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d005      	beq.n	8005e18 <UART_AdvFeatureConfig+0x1e8>
 8005e0c:	4a40      	ldr	r2, [pc, #256]	; (8005f10 <UART_AdvFeatureConfig+0x2e0>)
 8005e0e:	4b31      	ldr	r3, [pc, #196]	; (8005ed4 <UART_AdvFeatureConfig+0x2a4>)
 8005e10:	0011      	movs	r1, r2
 8005e12:	0018      	movs	r0, r3
 8005e14:	f004 fc40 	bl	800a698 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6812      	ldr	r2, [r2, #0]
 8005e20:	6852      	ldr	r2, [r2, #4]
 8005e22:	493c      	ldr	r1, [pc, #240]	; (8005f14 <UART_AdvFeatureConfig+0x2e4>)
 8005e24:	4011      	ands	r1, r2
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e32:	2380      	movs	r3, #128	; 0x80
 8005e34:	035b      	lsls	r3, r3, #13
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d126      	bne.n	8005e88 <UART_AdvFeatureConfig+0x258>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d017      	beq.n	8005e72 <UART_AdvFeatureConfig+0x242>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e46:	2380      	movs	r3, #128	; 0x80
 8005e48:	039b      	lsls	r3, r3, #14
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d011      	beq.n	8005e72 <UART_AdvFeatureConfig+0x242>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e52:	2380      	movs	r3, #128	; 0x80
 8005e54:	03db      	lsls	r3, r3, #15
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d00b      	beq.n	8005e72 <UART_AdvFeatureConfig+0x242>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e5e:	23c0      	movs	r3, #192	; 0xc0
 8005e60:	03db      	lsls	r3, r3, #15
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d005      	beq.n	8005e72 <UART_AdvFeatureConfig+0x242>
 8005e66:	4a2c      	ldr	r2, [pc, #176]	; (8005f18 <UART_AdvFeatureConfig+0x2e8>)
 8005e68:	4b1a      	ldr	r3, [pc, #104]	; (8005ed4 <UART_AdvFeatureConfig+0x2a4>)
 8005e6a:	0011      	movs	r1, r2
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	f004 fc13 	bl	800a698 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6812      	ldr	r2, [r2, #0]
 8005e7a:	6852      	ldr	r2, [r2, #4]
 8005e7c:	4927      	ldr	r1, [pc, #156]	; (8005f1c <UART_AdvFeatureConfig+0x2ec>)
 8005e7e:	4011      	ands	r1, r2
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005e84:	430a      	orrs	r2, r1
 8005e86:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	2280      	movs	r2, #128	; 0x80
 8005e8e:	4013      	ands	r3, r2
 8005e90:	d01a      	beq.n	8005ec8 <UART_AdvFeatureConfig+0x298>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00b      	beq.n	8005eb2 <UART_AdvFeatureConfig+0x282>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e9e:	2380      	movs	r3, #128	; 0x80
 8005ea0:	031b      	lsls	r3, r3, #12
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d005      	beq.n	8005eb2 <UART_AdvFeatureConfig+0x282>
 8005ea6:	4a1e      	ldr	r2, [pc, #120]	; (8005f20 <UART_AdvFeatureConfig+0x2f0>)
 8005ea8:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <UART_AdvFeatureConfig+0x2a4>)
 8005eaa:	0011      	movs	r1, r2
 8005eac:	0018      	movs	r0, r3
 8005eae:	f004 fbf3 	bl	800a698 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6812      	ldr	r2, [r2, #0]
 8005eba:	6852      	ldr	r2, [r2, #4]
 8005ebc:	4919      	ldr	r1, [pc, #100]	; (8005f24 <UART_AdvFeatureConfig+0x2f4>)
 8005ebe:	4011      	ands	r1, r2
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	605a      	str	r2, [r3, #4]
  }
}
 8005ec8:	46c0      	nop			; (mov r8, r8)
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	b002      	add	sp, #8
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	00000901 	.word	0x00000901
 8005ed4:	0800c1ec 	.word	0x0800c1ec
 8005ed8:	00000906 	.word	0x00000906
 8005edc:	fffdffff 	.word	0xfffdffff
 8005ee0:	0000090d 	.word	0x0000090d
 8005ee4:	fffeffff 	.word	0xfffeffff
 8005ee8:	00000914 	.word	0x00000914
 8005eec:	fffbffff 	.word	0xfffbffff
 8005ef0:	0000091b 	.word	0x0000091b
 8005ef4:	ffff7fff 	.word	0xffff7fff
 8005ef8:	00000922 	.word	0x00000922
 8005efc:	ffffefff 	.word	0xffffefff
 8005f00:	00000929 	.word	0x00000929
 8005f04:	ffffdfff 	.word	0xffffdfff
 8005f08:	40013800 	.word	0x40013800
 8005f0c:	40004400 	.word	0x40004400
 8005f10:	00000931 	.word	0x00000931
 8005f14:	ffefffff 	.word	0xffefffff
 8005f18:	00000936 	.word	0x00000936
 8005f1c:	ff9fffff 	.word	0xff9fffff
 8005f20:	0000093e 	.word	0x0000093e
 8005f24:	fff7ffff 	.word	0xfff7ffff

08005f28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af02      	add	r7, sp, #8
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005f30:	2300      	movs	r3, #0
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005f3a:	f7fb fb51 	bl	80015e0 <HAL_GetTick>
 8005f3e:	0003      	movs	r3, r0
 8005f40:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2208      	movs	r2, #8
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	d10d      	bne.n	8005f6c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	2380      	movs	r3, #128	; 0x80
 8005f54:	0399      	lsls	r1, r3, #14
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	4b17      	ldr	r3, [pc, #92]	; (8005fb8 <UART_CheckIdleState+0x90>)
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	0013      	movs	r3, r2
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f000 f82c 	bl	8005fbc <UART_WaitOnFlagUntilTimeout>
 8005f64:	1e03      	subs	r3, r0, #0
 8005f66:	d001      	beq.n	8005f6c <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e021      	b.n	8005fb0 <UART_CheckIdleState+0x88>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2204      	movs	r2, #4
 8005f74:	4013      	ands	r3, r2
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	d10d      	bne.n	8005f96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	2380      	movs	r3, #128	; 0x80
 8005f7e:	03d9      	lsls	r1, r3, #15
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	4b0d      	ldr	r3, [pc, #52]	; (8005fb8 <UART_CheckIdleState+0x90>)
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	0013      	movs	r3, r2
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f000 f817 	bl	8005fbc <UART_WaitOnFlagUntilTimeout>
 8005f8e:	1e03      	subs	r3, r0, #0
 8005f90:	d001      	beq.n	8005f96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e00c      	b.n	8005fb0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2269      	movs	r2, #105	; 0x69
 8005f9a:	2120      	movs	r1, #32
 8005f9c:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	226a      	movs	r2, #106	; 0x6a
 8005fa2:	2120      	movs	r1, #32
 8005fa4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2268      	movs	r2, #104	; 0x68
 8005faa:	2100      	movs	r1, #0
 8005fac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b004      	add	sp, #16
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	01ffffff 	.word	0x01ffffff

08005fbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	1dfb      	adds	r3, r7, #7
 8005fca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fcc:	e02b      	b.n	8006026 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	d028      	beq.n	8006026 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d007      	beq.n	8005fea <UART_WaitOnFlagUntilTimeout+0x2e>
 8005fda:	f7fb fb01 	bl	80015e0 <HAL_GetTick>
 8005fde:	0002      	movs	r2, r0
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	1ad2      	subs	r2, r2, r3
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d91d      	bls.n	8006026 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	6812      	ldr	r2, [r2, #0]
 8005ff2:	6812      	ldr	r2, [r2, #0]
 8005ff4:	4916      	ldr	r1, [pc, #88]	; (8006050 <UART_WaitOnFlagUntilTimeout+0x94>)
 8005ff6:	400a      	ands	r2, r1
 8005ff8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	6812      	ldr	r2, [r2, #0]
 8006002:	6892      	ldr	r2, [r2, #8]
 8006004:	2101      	movs	r1, #1
 8006006:	438a      	bics	r2, r1
 8006008:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2269      	movs	r2, #105	; 0x69
 800600e:	2120      	movs	r1, #32
 8006010:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	226a      	movs	r2, #106	; 0x6a
 8006016:	2120      	movs	r1, #32
 8006018:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2268      	movs	r2, #104	; 0x68
 800601e:	2100      	movs	r1, #0
 8006020:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e00f      	b.n	8006046 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	401a      	ands	r2, r3
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	425a      	negs	r2, r3
 8006036:	4153      	adcs	r3, r2
 8006038:	b2db      	uxtb	r3, r3
 800603a:	001a      	movs	r2, r3
 800603c:	1dfb      	adds	r3, r7, #7
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	d0c4      	beq.n	8005fce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	0018      	movs	r0, r3
 8006048:	46bd      	mov	sp, r7
 800604a:	b004      	add	sp, #16
 800604c:	bd80      	pop	{r7, pc}
 800604e:	46c0      	nop			; (mov r8, r8)
 8006050:	fffffe5f 	.word	0xfffffe5f

08006054 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	6812      	ldr	r2, [r2, #0]
 8006064:	6812      	ldr	r2, [r2, #0]
 8006066:	21c0      	movs	r1, #192	; 0xc0
 8006068:	438a      	bics	r2, r1
 800606a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2269      	movs	r2, #105	; 0x69
 8006070:	2120      	movs	r1, #32
 8006072:	5499      	strb	r1, [r3, r2]
}
 8006074:	46c0      	nop			; (mov r8, r8)
 8006076:	46bd      	mov	sp, r7
 8006078:	b002      	add	sp, #8
 800607a:	bd80      	pop	{r7, pc}

0800607c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	6812      	ldr	r2, [r2, #0]
 800608c:	6812      	ldr	r2, [r2, #0]
 800608e:	4909      	ldr	r1, [pc, #36]	; (80060b4 <UART_EndRxTransfer+0x38>)
 8006090:	400a      	ands	r2, r1
 8006092:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	6812      	ldr	r2, [r2, #0]
 800609c:	6892      	ldr	r2, [r2, #8]
 800609e:	2101      	movs	r1, #1
 80060a0:	438a      	bics	r2, r1
 80060a2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	226a      	movs	r2, #106	; 0x6a
 80060a8:	2120      	movs	r1, #32
 80060aa:	5499      	strb	r1, [r3, r2]
}
 80060ac:	46c0      	nop			; (mov r8, r8)
 80060ae:	46bd      	mov	sp, r7
 80060b0:	b002      	add	sp, #8
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	fffffedf 	.word	0xfffffedf

080060b8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2220      	movs	r2, #32
 80060ce:	4013      	ands	r3, r2
 80060d0:	d11f      	bne.n	8006112 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	225a      	movs	r2, #90	; 0x5a
 80060d6:	2100      	movs	r1, #0
 80060d8:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	6812      	ldr	r2, [r2, #0]
 80060e2:	6812      	ldr	r2, [r2, #0]
 80060e4:	490f      	ldr	r1, [pc, #60]	; (8006124 <UART_DMAReceiveCplt+0x6c>)
 80060e6:	400a      	ands	r2, r1
 80060e8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	6812      	ldr	r2, [r2, #0]
 80060f2:	6892      	ldr	r2, [r2, #8]
 80060f4:	2101      	movs	r1, #1
 80060f6:	438a      	bics	r2, r1
 80060f8:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	6812      	ldr	r2, [r2, #0]
 8006102:	6892      	ldr	r2, [r2, #8]
 8006104:	2140      	movs	r1, #64	; 0x40
 8006106:	438a      	bics	r2, r1
 8006108:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	226a      	movs	r2, #106	; 0x6a
 800610e:	2120      	movs	r1, #32
 8006110:	5499      	strb	r1, [r3, r2]
  }

  HAL_UART_RxCpltCallback(huart);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	0018      	movs	r0, r3
 8006116:	f003 ff8f 	bl	800a038 <HAL_UART_RxCpltCallback>
}
 800611a:	46c0      	nop			; (mov r8, r8)
 800611c:	46bd      	mov	sp, r7
 800611e:	b004      	add	sp, #16
 8006120:	bd80      	pop	{r7, pc}
 8006122:	46c0      	nop			; (mov r8, r8)
 8006124:	fffffeff 	.word	0xfffffeff

08006128 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006134:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	0018      	movs	r0, r3
 800613a:	f7ff f977 	bl	800542c <HAL_UART_RxHalfCpltCallback>
}
 800613e:	46c0      	nop			; (mov r8, r8)
 8006140:	46bd      	mov	sp, r7
 8006142:	b004      	add	sp, #16
 8006144:	bd80      	pop	{r7, pc}

08006146 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b084      	sub	sp, #16
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006152:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2269      	movs	r2, #105	; 0x69
 8006158:	5c9b      	ldrb	r3, [r3, r2]
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b21      	cmp	r3, #33	; 0x21
 800615e:	d10d      	bne.n	800617c <UART_DMAError+0x36>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	2280      	movs	r2, #128	; 0x80
 8006168:	4013      	ands	r3, r2
 800616a:	d007      	beq.n	800617c <UART_DMAError+0x36>
  {
    huart->TxXferCount = 0;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2252      	movs	r2, #82	; 0x52
 8006170:	2100      	movs	r1, #0
 8006172:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	0018      	movs	r0, r3
 8006178:	f7ff ff6c 	bl	8006054 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	226a      	movs	r2, #106	; 0x6a
 8006180:	5c9b      	ldrb	r3, [r3, r2]
 8006182:	b2db      	uxtb	r3, r3
 8006184:	2b22      	cmp	r3, #34	; 0x22
 8006186:	d10d      	bne.n	80061a4 <UART_DMAError+0x5e>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	2240      	movs	r2, #64	; 0x40
 8006190:	4013      	ands	r3, r2
 8006192:	d007      	beq.n	80061a4 <UART_DMAError+0x5e>
  {
    huart->RxXferCount = 0;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	225a      	movs	r2, #90	; 0x5a
 8006198:	2100      	movs	r1, #0
 800619a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	0018      	movs	r0, r3
 80061a0:	f7ff ff6c 	bl	800607c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061a8:	2210      	movs	r2, #16
 80061aa:	431a      	orrs	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	66da      	str	r2, [r3, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	0018      	movs	r0, r3
 80061b4:	f7ff f942 	bl	800543c <HAL_UART_ErrorCallback>
}
 80061b8:	46c0      	nop			; (mov r8, r8)
 80061ba:	46bd      	mov	sp, r7
 80061bc:	b004      	add	sp, #16
 80061be:	bd80      	pop	{r7, pc}

080061c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80061c0:	b590      	push	{r4, r7, lr}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	0002      	movs	r2, r0
 80061c8:	1dfb      	adds	r3, r7, #7
 80061ca:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80061cc:	1dfb      	adds	r3, r7, #7
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	4a0b      	ldr	r2, [pc, #44]	; (8006200 <disk_status+0x40>)
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	18d3      	adds	r3, r2, r3
 80061d6:	3304      	adds	r3, #4
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	1dfa      	adds	r2, r7, #7
 80061de:	7812      	ldrb	r2, [r2, #0]
 80061e0:	4907      	ldr	r1, [pc, #28]	; (8006200 <disk_status+0x40>)
 80061e2:	188a      	adds	r2, r1, r2
 80061e4:	7a12      	ldrb	r2, [r2, #8]
 80061e6:	210f      	movs	r1, #15
 80061e8:	187c      	adds	r4, r7, r1
 80061ea:	0010      	movs	r0, r2
 80061ec:	4798      	blx	r3
 80061ee:	0003      	movs	r3, r0
 80061f0:	7023      	strb	r3, [r4, #0]
  return stat;
 80061f2:	230f      	movs	r3, #15
 80061f4:	18fb      	adds	r3, r7, r3
 80061f6:	781b      	ldrb	r3, [r3, #0]
}
 80061f8:	0018      	movs	r0, r3
 80061fa:	46bd      	mov	sp, r7
 80061fc:	b005      	add	sp, #20
 80061fe:	bd90      	pop	{r4, r7, pc}
 8006200:	200000c0 	.word	0x200000c0

08006204 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006204:	b590      	push	{r4, r7, lr}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	0002      	movs	r2, r0
 800620c:	1dfb      	adds	r3, r7, #7
 800620e:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 8006210:	230f      	movs	r3, #15
 8006212:	18fb      	adds	r3, r7, r3
 8006214:	2200      	movs	r2, #0
 8006216:	701a      	strb	r2, [r3, #0]
  
  if(disk.is_initialized[pdrv] == 0)
 8006218:	1dfb      	adds	r3, r7, #7
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	4a11      	ldr	r2, [pc, #68]	; (8006264 <disk_initialize+0x60>)
 800621e:	5cd3      	ldrb	r3, [r2, r3]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d117      	bne.n	8006254 <disk_initialize+0x50>
  { 
    disk.is_initialized[pdrv] = 1;
 8006224:	1dfb      	adds	r3, r7, #7
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	4a0e      	ldr	r2, [pc, #56]	; (8006264 <disk_initialize+0x60>)
 800622a:	2101      	movs	r1, #1
 800622c:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800622e:	1dfb      	adds	r3, r7, #7
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	4a0c      	ldr	r2, [pc, #48]	; (8006264 <disk_initialize+0x60>)
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	18d3      	adds	r3, r2, r3
 8006238:	3304      	adds	r3, #4
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	1dfa      	adds	r2, r7, #7
 8006240:	7812      	ldrb	r2, [r2, #0]
 8006242:	4908      	ldr	r1, [pc, #32]	; (8006264 <disk_initialize+0x60>)
 8006244:	188a      	adds	r2, r1, r2
 8006246:	7a12      	ldrb	r2, [r2, #8]
 8006248:	210f      	movs	r1, #15
 800624a:	187c      	adds	r4, r7, r1
 800624c:	0010      	movs	r0, r2
 800624e:	4798      	blx	r3
 8006250:	0003      	movs	r3, r0
 8006252:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 8006254:	230f      	movs	r3, #15
 8006256:	18fb      	adds	r3, r7, r3
 8006258:	781b      	ldrb	r3, [r3, #0]
}
 800625a:	0018      	movs	r0, r3
 800625c:	46bd      	mov	sp, r7
 800625e:	b005      	add	sp, #20
 8006260:	bd90      	pop	{r4, r7, pc}
 8006262:	46c0      	nop			; (mov r8, r8)
 8006264:	200000c0 	.word	0x200000c0

08006268 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006268:	b5b0      	push	{r4, r5, r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	60b9      	str	r1, [r7, #8]
 8006270:	607a      	str	r2, [r7, #4]
 8006272:	603b      	str	r3, [r7, #0]
 8006274:	230f      	movs	r3, #15
 8006276:	18fb      	adds	r3, r7, r3
 8006278:	1c02      	adds	r2, r0, #0
 800627a:	701a      	strb	r2, [r3, #0]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800627c:	230f      	movs	r3, #15
 800627e:	18fb      	adds	r3, r7, r3
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	4a0d      	ldr	r2, [pc, #52]	; (80062b8 <disk_read+0x50>)
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	18d3      	adds	r3, r2, r3
 8006288:	3304      	adds	r3, #4
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689d      	ldr	r5, [r3, #8]
 800628e:	230f      	movs	r3, #15
 8006290:	18fb      	adds	r3, r7, r3
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	4a08      	ldr	r2, [pc, #32]	; (80062b8 <disk_read+0x50>)
 8006296:	18d3      	adds	r3, r2, r3
 8006298:	7a18      	ldrb	r0, [r3, #8]
 800629a:	2317      	movs	r3, #23
 800629c:	18fc      	adds	r4, r7, r3
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	68b9      	ldr	r1, [r7, #8]
 80062a4:	47a8      	blx	r5
 80062a6:	0003      	movs	r3, r0
 80062a8:	7023      	strb	r3, [r4, #0]
  return res;
 80062aa:	2317      	movs	r3, #23
 80062ac:	18fb      	adds	r3, r7, r3
 80062ae:	781b      	ldrb	r3, [r3, #0]
}
 80062b0:	0018      	movs	r0, r3
 80062b2:	46bd      	mov	sp, r7
 80062b4:	b006      	add	sp, #24
 80062b6:	bdb0      	pop	{r4, r5, r7, pc}
 80062b8:	200000c0 	.word	0x200000c0

080062bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80062bc:	b5b0      	push	{r4, r5, r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	607a      	str	r2, [r7, #4]
 80062c6:	603b      	str	r3, [r7, #0]
 80062c8:	230f      	movs	r3, #15
 80062ca:	18fb      	adds	r3, r7, r3
 80062cc:	1c02      	adds	r2, r0, #0
 80062ce:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80062d0:	230f      	movs	r3, #15
 80062d2:	18fb      	adds	r3, r7, r3
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	4a0d      	ldr	r2, [pc, #52]	; (800630c <disk_write+0x50>)
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	18d3      	adds	r3, r2, r3
 80062dc:	3304      	adds	r3, #4
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68dd      	ldr	r5, [r3, #12]
 80062e2:	230f      	movs	r3, #15
 80062e4:	18fb      	adds	r3, r7, r3
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	4a08      	ldr	r2, [pc, #32]	; (800630c <disk_write+0x50>)
 80062ea:	18d3      	adds	r3, r2, r3
 80062ec:	7a18      	ldrb	r0, [r3, #8]
 80062ee:	2317      	movs	r3, #23
 80062f0:	18fc      	adds	r4, r7, r3
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	68b9      	ldr	r1, [r7, #8]
 80062f8:	47a8      	blx	r5
 80062fa:	0003      	movs	r3, r0
 80062fc:	7023      	strb	r3, [r4, #0]
  return res;
 80062fe:	2317      	movs	r3, #23
 8006300:	18fb      	adds	r3, r7, r3
 8006302:	781b      	ldrb	r3, [r3, #0]
}
 8006304:	0018      	movs	r0, r3
 8006306:	46bd      	mov	sp, r7
 8006308:	b006      	add	sp, #24
 800630a:	bdb0      	pop	{r4, r5, r7, pc}
 800630c:	200000c0 	.word	0x200000c0

08006310 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006310:	b5b0      	push	{r4, r5, r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	603a      	str	r2, [r7, #0]
 8006318:	1dfb      	adds	r3, r7, #7
 800631a:	1c02      	adds	r2, r0, #0
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	1dbb      	adds	r3, r7, #6
 8006320:	1c0a      	adds	r2, r1, #0
 8006322:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006324:	1dfb      	adds	r3, r7, #7
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	4a0d      	ldr	r2, [pc, #52]	; (8006360 <disk_ioctl+0x50>)
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	18d3      	adds	r3, r2, r3
 800632e:	3304      	adds	r3, #4
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	1dfa      	adds	r2, r7, #7
 8006336:	7812      	ldrb	r2, [r2, #0]
 8006338:	4909      	ldr	r1, [pc, #36]	; (8006360 <disk_ioctl+0x50>)
 800633a:	188a      	adds	r2, r1, r2
 800633c:	7a10      	ldrb	r0, [r2, #8]
 800633e:	220f      	movs	r2, #15
 8006340:	18bc      	adds	r4, r7, r2
 8006342:	683d      	ldr	r5, [r7, #0]
 8006344:	1dba      	adds	r2, r7, #6
 8006346:	7811      	ldrb	r1, [r2, #0]
 8006348:	002a      	movs	r2, r5
 800634a:	4798      	blx	r3
 800634c:	0003      	movs	r3, r0
 800634e:	7023      	strb	r3, [r4, #0]
  return res;
 8006350:	230f      	movs	r3, #15
 8006352:	18fb      	adds	r3, r7, r3
 8006354:	781b      	ldrb	r3, [r3, #0]
}
 8006356:	0018      	movs	r0, r3
 8006358:	46bd      	mov	sp, r7
 800635a:	b004      	add	sp, #16
 800635c:	bdb0      	pop	{r4, r5, r7, pc}
 800635e:	46c0      	nop			; (mov r8, r8)
 8006360:	200000c0 	.word	0x200000c0

08006364 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8006378:	e007      	b.n	800638a <mem_cpy+0x26>
		*d++ = *s++;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	617a      	str	r2, [r7, #20]
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	1c51      	adds	r1, r2, #1
 8006384:	6139      	str	r1, [r7, #16]
 8006386:	7812      	ldrb	r2, [r2, #0]
 8006388:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	1e5a      	subs	r2, r3, #1
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1f2      	bne.n	800637a <mem_cpy+0x16>
}
 8006394:	46c0      	nop			; (mov r8, r8)
 8006396:	46bd      	mov	sp, r7
 8006398:	b006      	add	sp, #24
 800639a:	bd80      	pop	{r7, pc}

0800639c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80063ac:	e005      	b.n	80063ba <mem_set+0x1e>
		*d++ = (BYTE)val;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	617a      	str	r2, [r7, #20]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	b2d2      	uxtb	r2, r2
 80063b8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	1e5a      	subs	r2, r3, #1
 80063be:	607a      	str	r2, [r7, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1f4      	bne.n	80063ae <mem_set+0x12>
}
 80063c4:	46c0      	nop			; (mov r8, r8)
 80063c6:	46bd      	mov	sp, r7
 80063c8:	b006      	add	sp, #24
 80063ca:	bd80      	pop	{r7, pc}

080063cc <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b088      	sub	sp, #32
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	61fb      	str	r3, [r7, #28]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80063e0:	2300      	movs	r3, #0
 80063e2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80063e4:	46c0      	nop			; (mov r8, r8)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	1e5a      	subs	r2, r3, #1
 80063ea:	607a      	str	r2, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00d      	beq.n	800640c <mem_cmp+0x40>
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	1c5a      	adds	r2, r3, #1
 80063f4:	61fa      	str	r2, [r7, #28]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	0019      	movs	r1, r3
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	61ba      	str	r2, [r7, #24]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	1acb      	subs	r3, r1, r3
 8006404:	617b      	str	r3, [r7, #20]
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d0ec      	beq.n	80063e6 <mem_cmp+0x1a>
	return r;
 800640c:	697b      	ldr	r3, [r7, #20]
}
 800640e:	0018      	movs	r0, r3
 8006410:	46bd      	mov	sp, r7
 8006412:	b008      	add	sp, #32
 8006414:	bd80      	pop	{r7, pc}

08006416 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8006416:	b580      	push	{r7, lr}
 8006418:	b082      	sub	sp, #8
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006420:	e002      	b.n	8006428 <chk_chr+0x12>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	3301      	adds	r3, #1
 8006426:	607b      	str	r3, [r7, #4]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <chk_chr+0x26>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	001a      	movs	r2, r3
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d1f2      	bne.n	8006422 <chk_chr+0xc>
	return *str;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	781b      	ldrb	r3, [r3, #0]
}
 8006440:	0018      	movs	r0, r3
 8006442:	46bd      	mov	sp, r7
 8006444:	b002      	add	sp, #8
 8006446:	bd80      	pop	{r7, pc}

08006448 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006452:	2300      	movs	r3, #0
 8006454:	60bb      	str	r3, [r7, #8]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	60fb      	str	r3, [r7, #12]
 800645a:	e038      	b.n	80064ce <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800645c:	492f      	ldr	r1, [pc, #188]	; (800651c <chk_lock+0xd4>)
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	0013      	movs	r3, r2
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	189b      	adds	r3, r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	585b      	ldr	r3, [r3, r1]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d02a      	beq.n	80064c4 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800646e:	492b      	ldr	r1, [pc, #172]	; (800651c <chk_lock+0xd4>)
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	0013      	movs	r3, r2
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	189b      	adds	r3, r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	585a      	ldr	r2, [r3, r1]
 800647c:	6879      	ldr	r1, [r7, #4]
 800647e:	2380      	movs	r3, #128	; 0x80
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	58cb      	ldr	r3, [r1, r3]
 8006484:	429a      	cmp	r2, r3
 8006486:	d11f      	bne.n	80064c8 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8006488:	4924      	ldr	r1, [pc, #144]	; (800651c <chk_lock+0xd4>)
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	0013      	movs	r3, r2
 800648e:	005b      	lsls	r3, r3, #1
 8006490:	189b      	adds	r3, r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	18cb      	adds	r3, r1, r3
 8006496:	3304      	adds	r3, #4
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	6879      	ldr	r1, [r7, #4]
 800649c:	2382      	movs	r3, #130	; 0x82
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	58cb      	ldr	r3, [r1, r3]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d110      	bne.n	80064c8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80064a6:	491d      	ldr	r1, [pc, #116]	; (800651c <chk_lock+0xd4>)
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	0013      	movs	r3, r2
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	189b      	adds	r3, r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	18cb      	adds	r3, r1, r3
 80064b4:	3308      	adds	r3, #8
 80064b6:	881a      	ldrh	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4919      	ldr	r1, [pc, #100]	; (8006520 <chk_lock+0xd8>)
 80064bc:	5a5b      	ldrh	r3, [r3, r1]
				Files[i].clu == dp->sclust &&
 80064be:	429a      	cmp	r2, r3
 80064c0:	d102      	bne.n	80064c8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80064c2:	e007      	b.n	80064d4 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80064c4:	2301      	movs	r3, #1
 80064c6:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	3301      	adds	r3, #1
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d9c3      	bls.n	800645c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d109      	bne.n	80064ee <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d102      	bne.n	80064e6 <chk_lock+0x9e>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d101      	bne.n	80064ea <chk_lock+0xa2>
 80064e6:	2300      	movs	r3, #0
 80064e8:	e014      	b.n	8006514 <chk_lock+0xcc>
 80064ea:	2312      	movs	r3, #18
 80064ec:	e012      	b.n	8006514 <chk_lock+0xcc>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10c      	bne.n	800650e <chk_lock+0xc6>
 80064f4:	4909      	ldr	r1, [pc, #36]	; (800651c <chk_lock+0xd4>)
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	0013      	movs	r3, r2
 80064fa:	005b      	lsls	r3, r3, #1
 80064fc:	189b      	adds	r3, r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	18cb      	adds	r3, r1, r3
 8006502:	330a      	adds	r3, #10
 8006504:	881a      	ldrh	r2, [r3, #0]
 8006506:	2380      	movs	r3, #128	; 0x80
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	429a      	cmp	r2, r3
 800650c:	d101      	bne.n	8006512 <chk_lock+0xca>
 800650e:	2310      	movs	r3, #16
 8006510:	e000      	b.n	8006514 <chk_lock+0xcc>
 8006512:	2300      	movs	r3, #0
}
 8006514:	0018      	movs	r0, r3
 8006516:	46bd      	mov	sp, r7
 8006518:	b004      	add	sp, #16
 800651a:	bd80      	pop	{r7, pc}
 800651c:	200000a8 	.word	0x200000a8
 8006520:	00000206 	.word	0x00000206

08006524 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800652a:	2300      	movs	r3, #0
 800652c:	607b      	str	r3, [r7, #4]
 800652e:	e002      	b.n	8006536 <enq_lock+0x12>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3301      	adds	r3, #1
 8006534:	607b      	str	r3, [r7, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d808      	bhi.n	800654e <enq_lock+0x2a>
 800653c:	4908      	ldr	r1, [pc, #32]	; (8006560 <enq_lock+0x3c>)
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	0013      	movs	r3, r2
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	189b      	adds	r3, r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	585b      	ldr	r3, [r3, r1]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1f0      	bne.n	8006530 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3b02      	subs	r3, #2
 8006552:	1e5a      	subs	r2, r3, #1
 8006554:	4193      	sbcs	r3, r2
 8006556:	b2db      	uxtb	r3, r3
}
 8006558:	0018      	movs	r0, r3
 800655a:	46bd      	mov	sp, r7
 800655c:	b002      	add	sp, #8
 800655e:	bd80      	pop	{r7, pc}
 8006560:	200000a8 	.word	0x200000a8

08006564 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800656e:	2300      	movs	r3, #0
 8006570:	60fb      	str	r3, [r7, #12]
 8006572:	e02c      	b.n	80065ce <inc_lock+0x6a>
		if (Files[i].fs == dp->fs &&
 8006574:	4955      	ldr	r1, [pc, #340]	; (80066cc <inc_lock+0x168>)
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	0013      	movs	r3, r2
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	189b      	adds	r3, r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	585a      	ldr	r2, [r3, r1]
 8006582:	6879      	ldr	r1, [r7, #4]
 8006584:	2380      	movs	r3, #128	; 0x80
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	58cb      	ldr	r3, [r1, r3]
 800658a:	429a      	cmp	r2, r3
 800658c:	d11c      	bne.n	80065c8 <inc_lock+0x64>
			Files[i].clu == dp->sclust &&
 800658e:	494f      	ldr	r1, [pc, #316]	; (80066cc <inc_lock+0x168>)
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	0013      	movs	r3, r2
 8006594:	005b      	lsls	r3, r3, #1
 8006596:	189b      	adds	r3, r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	18cb      	adds	r3, r1, r3
 800659c:	3304      	adds	r3, #4
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	6879      	ldr	r1, [r7, #4]
 80065a2:	2382      	movs	r3, #130	; 0x82
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	58cb      	ldr	r3, [r1, r3]
		if (Files[i].fs == dp->fs &&
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d10d      	bne.n	80065c8 <inc_lock+0x64>
			Files[i].idx == dp->index) break;
 80065ac:	4947      	ldr	r1, [pc, #284]	; (80066cc <inc_lock+0x168>)
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	0013      	movs	r3, r2
 80065b2:	005b      	lsls	r3, r3, #1
 80065b4:	189b      	adds	r3, r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	18cb      	adds	r3, r1, r3
 80065ba:	3308      	adds	r3, #8
 80065bc:	881a      	ldrh	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4943      	ldr	r1, [pc, #268]	; (80066d0 <inc_lock+0x16c>)
 80065c2:	5a5b      	ldrh	r3, [r3, r1]
			Files[i].clu == dp->sclust &&
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d006      	beq.n	80065d6 <inc_lock+0x72>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	3301      	adds	r3, #1
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d9cf      	bls.n	8006574 <inc_lock+0x10>
 80065d4:	e000      	b.n	80065d8 <inc_lock+0x74>
			Files[i].idx == dp->index) break;
 80065d6:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d145      	bne.n	800666a <inc_lock+0x106>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80065de:	2300      	movs	r3, #0
 80065e0:	60fb      	str	r3, [r7, #12]
 80065e2:	e002      	b.n	80065ea <inc_lock+0x86>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	3301      	adds	r3, #1
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d808      	bhi.n	8006602 <inc_lock+0x9e>
 80065f0:	4936      	ldr	r1, [pc, #216]	; (80066cc <inc_lock+0x168>)
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	0013      	movs	r3, r2
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	189b      	adds	r3, r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	585b      	ldr	r3, [r3, r1]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1f0      	bne.n	80065e4 <inc_lock+0x80>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b02      	cmp	r3, #2
 8006606:	d101      	bne.n	800660c <inc_lock+0xa8>
 8006608:	2300      	movs	r3, #0
 800660a:	e05a      	b.n	80066c2 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	2380      	movs	r3, #128	; 0x80
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	58d0      	ldr	r0, [r2, r3]
 8006614:	492d      	ldr	r1, [pc, #180]	; (80066cc <inc_lock+0x168>)
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	0013      	movs	r3, r2
 800661a:	005b      	lsls	r3, r3, #1
 800661c:	189b      	adds	r3, r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	5058      	str	r0, [r3, r1]
		Files[i].clu = dp->sclust;
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	2382      	movs	r3, #130	; 0x82
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	58d1      	ldr	r1, [r2, r3]
 800662a:	4828      	ldr	r0, [pc, #160]	; (80066cc <inc_lock+0x168>)
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	0013      	movs	r3, r2
 8006630:	005b      	lsls	r3, r3, #1
 8006632:	189b      	adds	r3, r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	18c3      	adds	r3, r0, r3
 8006638:	3304      	adds	r3, #4
 800663a:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a24      	ldr	r2, [pc, #144]	; (80066d0 <inc_lock+0x16c>)
 8006640:	5a98      	ldrh	r0, [r3, r2]
 8006642:	4922      	ldr	r1, [pc, #136]	; (80066cc <inc_lock+0x168>)
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	0013      	movs	r3, r2
 8006648:	005b      	lsls	r3, r3, #1
 800664a:	189b      	adds	r3, r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	18cb      	adds	r3, r1, r3
 8006650:	3308      	adds	r3, #8
 8006652:	1c02      	adds	r2, r0, #0
 8006654:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8006656:	491d      	ldr	r1, [pc, #116]	; (80066cc <inc_lock+0x168>)
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	0013      	movs	r3, r2
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	189b      	adds	r3, r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	18cb      	adds	r3, r1, r3
 8006664:	330a      	adds	r3, #10
 8006666:	2200      	movs	r2, #0
 8006668:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00c      	beq.n	800668a <inc_lock+0x126>
 8006670:	4916      	ldr	r1, [pc, #88]	; (80066cc <inc_lock+0x168>)
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	0013      	movs	r3, r2
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	189b      	adds	r3, r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	18cb      	adds	r3, r1, r3
 800667e:	330a      	adds	r3, #10
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <inc_lock+0x126>
 8006686:	2300      	movs	r3, #0
 8006688:	e01b      	b.n	80066c2 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10b      	bne.n	80066a8 <inc_lock+0x144>
 8006690:	490e      	ldr	r1, [pc, #56]	; (80066cc <inc_lock+0x168>)
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	0013      	movs	r3, r2
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	189b      	adds	r3, r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	18cb      	adds	r3, r1, r3
 800669e:	330a      	adds	r3, #10
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	3301      	adds	r3, #1
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	e001      	b.n	80066ac <inc_lock+0x148>
 80066a8:	2380      	movs	r3, #128	; 0x80
 80066aa:	005a      	lsls	r2, r3, #1
 80066ac:	4807      	ldr	r0, [pc, #28]	; (80066cc <inc_lock+0x168>)
 80066ae:	68f9      	ldr	r1, [r7, #12]
 80066b0:	000b      	movs	r3, r1
 80066b2:	005b      	lsls	r3, r3, #1
 80066b4:	185b      	adds	r3, r3, r1
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	18c3      	adds	r3, r0, r3
 80066ba:	330a      	adds	r3, #10
 80066bc:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3301      	adds	r3, #1
}
 80066c2:	0018      	movs	r0, r3
 80066c4:	46bd      	mov	sp, r7
 80066c6:	b004      	add	sp, #16
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	46c0      	nop			; (mov r8, r8)
 80066cc:	200000a8 	.word	0x200000a8
 80066d0:	00000206 	.word	0x00000206

080066d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	3b01      	subs	r3, #1
 80066e0:	607b      	str	r3, [r7, #4]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d840      	bhi.n	800676a <dec_lock+0x96>
		n = Files[i].ctr;
 80066e8:	230e      	movs	r3, #14
 80066ea:	18f9      	adds	r1, r7, r3
 80066ec:	4824      	ldr	r0, [pc, #144]	; (8006780 <dec_lock+0xac>)
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	0013      	movs	r3, r2
 80066f2:	005b      	lsls	r3, r3, #1
 80066f4:	189b      	adds	r3, r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	18c3      	adds	r3, r0, r3
 80066fa:	330a      	adds	r3, #10
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	800b      	strh	r3, [r1, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006700:	230e      	movs	r3, #14
 8006702:	18fb      	adds	r3, r7, r3
 8006704:	881a      	ldrh	r2, [r3, #0]
 8006706:	2380      	movs	r3, #128	; 0x80
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	429a      	cmp	r2, r3
 800670c:	d103      	bne.n	8006716 <dec_lock+0x42>
 800670e:	230e      	movs	r3, #14
 8006710:	18fb      	adds	r3, r7, r3
 8006712:	2200      	movs	r2, #0
 8006714:	801a      	strh	r2, [r3, #0]
		if (n) n--;					/* Decrement read mode open count */
 8006716:	230e      	movs	r3, #14
 8006718:	18fb      	adds	r3, r7, r3
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d006      	beq.n	800672e <dec_lock+0x5a>
 8006720:	230e      	movs	r3, #14
 8006722:	18fb      	adds	r3, r7, r3
 8006724:	881a      	ldrh	r2, [r3, #0]
 8006726:	230e      	movs	r3, #14
 8006728:	18fb      	adds	r3, r7, r3
 800672a:	3a01      	subs	r2, #1
 800672c:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 800672e:	4914      	ldr	r1, [pc, #80]	; (8006780 <dec_lock+0xac>)
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	0013      	movs	r3, r2
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	189b      	adds	r3, r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	18cb      	adds	r3, r1, r3
 800673c:	330a      	adds	r3, #10
 800673e:	220e      	movs	r2, #14
 8006740:	18ba      	adds	r2, r7, r2
 8006742:	8812      	ldrh	r2, [r2, #0]
 8006744:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006746:	230e      	movs	r3, #14
 8006748:	18fb      	adds	r3, r7, r3
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d107      	bne.n	8006760 <dec_lock+0x8c>
 8006750:	490b      	ldr	r1, [pc, #44]	; (8006780 <dec_lock+0xac>)
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	0013      	movs	r3, r2
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	189b      	adds	r3, r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	2200      	movs	r2, #0
 800675e:	505a      	str	r2, [r3, r1]
		res = FR_OK;
 8006760:	230d      	movs	r3, #13
 8006762:	18fb      	adds	r3, r7, r3
 8006764:	2200      	movs	r2, #0
 8006766:	701a      	strb	r2, [r3, #0]
 8006768:	e003      	b.n	8006772 <dec_lock+0x9e>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800676a:	230d      	movs	r3, #13
 800676c:	18fb      	adds	r3, r7, r3
 800676e:	2202      	movs	r2, #2
 8006770:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8006772:	230d      	movs	r3, #13
 8006774:	18fb      	adds	r3, r7, r3
 8006776:	781b      	ldrb	r3, [r3, #0]
}
 8006778:	0018      	movs	r0, r3
 800677a:	46bd      	mov	sp, r7
 800677c:	b004      	add	sp, #16
 800677e:	bd80      	pop	{r7, pc}
 8006780:	200000a8 	.word	0x200000a8

08006784 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800678c:	2300      	movs	r3, #0
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	e014      	b.n	80067bc <clear_lock+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006792:	490e      	ldr	r1, [pc, #56]	; (80067cc <clear_lock+0x48>)
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	0013      	movs	r3, r2
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	189b      	adds	r3, r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	585a      	ldr	r2, [r3, r1]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d107      	bne.n	80067b6 <clear_lock+0x32>
 80067a6:	4909      	ldr	r1, [pc, #36]	; (80067cc <clear_lock+0x48>)
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	0013      	movs	r3, r2
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	189b      	adds	r3, r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	2200      	movs	r2, #0
 80067b4:	505a      	str	r2, [r3, r1]
	for (i = 0; i < _FS_LOCK; i++) {
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	3301      	adds	r3, #1
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d9e7      	bls.n	8006792 <clear_lock+0xe>
	}
}
 80067c2:	46c0      	nop			; (mov r8, r8)
 80067c4:	46bd      	mov	sp, r7
 80067c6:	b004      	add	sp, #16
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	46c0      	nop			; (mov r8, r8)
 80067cc:	200000a8 	.word	0x200000a8

080067d0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80067d8:	230f      	movs	r3, #15
 80067da:	18fb      	adds	r3, r7, r3
 80067dc:	2200      	movs	r2, #0
 80067de:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	2381      	movs	r3, #129	; 0x81
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	5cd3      	ldrb	r3, [r2, r3]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d03e      	beq.n	800686a <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	238b      	movs	r3, #139	; 0x8b
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	58d3      	ldr	r3, [r2, r3]
 80067f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a1f      	ldr	r2, [pc, #124]	; (8006878 <sync_window+0xa8>)
 80067fa:	5c98      	ldrb	r0, [r3, r2]
 80067fc:	6879      	ldr	r1, [r7, #4]
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	2301      	movs	r3, #1
 8006802:	f7ff fd5b 	bl	80062bc <disk_write>
 8006806:	1e03      	subs	r3, r0, #0
 8006808:	d004      	beq.n	8006814 <sync_window+0x44>
			res = FR_DISK_ERR;
 800680a:	230f      	movs	r3, #15
 800680c:	18fb      	adds	r3, r7, r3
 800680e:	2201      	movs	r2, #1
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	e02a      	b.n	800686a <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	2381      	movs	r3, #129	; 0x81
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	2100      	movs	r1, #0
 800681c:	54d1      	strb	r1, [r2, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	2388      	movs	r3, #136	; 0x88
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	58d3      	ldr	r3, [r2, r3]
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	1ad2      	subs	r2, r2, r3
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	2386      	movs	r3, #134	; 0x86
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	58cb      	ldr	r3, [r1, r3]
 8006832:	429a      	cmp	r2, r3
 8006834:	d219      	bcs.n	800686a <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a10      	ldr	r2, [pc, #64]	; (800687c <sync_window+0xac>)
 800683a:	5c9b      	ldrb	r3, [r3, r2]
 800683c:	613b      	str	r3, [r7, #16]
 800683e:	e011      	b.n	8006864 <sync_window+0x94>
					wsect += fs->fsize;
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	2386      	movs	r3, #134	; 0x86
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	58d3      	ldr	r3, [r2, r3]
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	18d3      	adds	r3, r2, r3
 800684c:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a09      	ldr	r2, [pc, #36]	; (8006878 <sync_window+0xa8>)
 8006852:	5c98      	ldrb	r0, [r3, r2]
 8006854:	6879      	ldr	r1, [r7, #4]
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	2301      	movs	r3, #1
 800685a:	f7ff fd2f 	bl	80062bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	3b01      	subs	r3, #1
 8006862:	613b      	str	r3, [r7, #16]
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d8ea      	bhi.n	8006840 <sync_window+0x70>
				}
			}
		}
	}
	return res;
 800686a:	230f      	movs	r3, #15
 800686c:	18fb      	adds	r3, r7, r3
 800686e:	781b      	ldrb	r3, [r3, #0]
}
 8006870:	0018      	movs	r0, r3
 8006872:	46bd      	mov	sp, r7
 8006874:	b006      	add	sp, #24
 8006876:	bd80      	pop	{r7, pc}
 8006878:	00000201 	.word	0x00000201
 800687c:	00000203 	.word	0x00000203

08006880 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8006880:	b590      	push	{r4, r7, lr}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800688a:	230f      	movs	r3, #15
 800688c:	18fb      	adds	r3, r7, r3
 800688e:	2200      	movs	r2, #0
 8006890:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	238b      	movs	r3, #139	; 0x8b
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	58d2      	ldr	r2, [r2, r3]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	429a      	cmp	r2, r3
 800689e:	d022      	beq.n	80068e6 <move_window+0x66>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80068a0:	230f      	movs	r3, #15
 80068a2:	18fc      	adds	r4, r7, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	0018      	movs	r0, r3
 80068a8:	f7ff ff92 	bl	80067d0 <sync_window>
 80068ac:	0003      	movs	r3, r0
 80068ae:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80068b0:	230f      	movs	r3, #15
 80068b2:	18fb      	adds	r3, r7, r3
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d115      	bne.n	80068e6 <move_window+0x66>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a0d      	ldr	r2, [pc, #52]	; (80068f4 <move_window+0x74>)
 80068be:	5c98      	ldrb	r0, [r3, r2]
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	2301      	movs	r3, #1
 80068c6:	f7ff fccf 	bl	8006268 <disk_read>
 80068ca:	1e03      	subs	r3, r0, #0
 80068cc:	d006      	beq.n	80068dc <move_window+0x5c>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80068ce:	2301      	movs	r3, #1
 80068d0:	425b      	negs	r3, r3
 80068d2:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80068d4:	230f      	movs	r3, #15
 80068d6:	18fb      	adds	r3, r7, r3
 80068d8:	2201      	movs	r2, #1
 80068da:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	238b      	movs	r3, #139	; 0x8b
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	50d1      	str	r1, [r2, r3]
		}
	}
	return res;
 80068e6:	230f      	movs	r3, #15
 80068e8:	18fb      	adds	r3, r7, r3
 80068ea:	781b      	ldrb	r3, [r3, #0]
}
 80068ec:	0018      	movs	r0, r3
 80068ee:	46bd      	mov	sp, r7
 80068f0:	b005      	add	sp, #20
 80068f2:	bd90      	pop	{r4, r7, pc}
 80068f4:	00000201 	.word	0x00000201

080068f8 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80068f8:	b590      	push	{r4, r7, lr}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006900:	230f      	movs	r3, #15
 8006902:	18fc      	adds	r4, r7, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	0018      	movs	r0, r3
 8006908:	f7ff ff62 	bl	80067d0 <sync_window>
 800690c:	0003      	movs	r3, r0
 800690e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8006910:	230f      	movs	r3, #15
 8006912:	18fb      	adds	r3, r7, r3
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d000      	beq.n	800691c <sync_fs+0x24>
 800691a:	e0b4      	b.n	8006a86 <sync_fs+0x18e>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	2380      	movs	r3, #128	; 0x80
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	5cd3      	ldrb	r3, [r2, r3]
 8006924:	2b03      	cmp	r3, #3
 8006926:	d000      	beq.n	800692a <sync_fs+0x32>
 8006928:	e09f      	b.n	8006a6a <sync_fs+0x172>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a59      	ldr	r2, [pc, #356]	; (8006a94 <sync_fs+0x19c>)
 800692e:	5c9b      	ldrb	r3, [r3, r2]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d000      	beq.n	8006936 <sync_fs+0x3e>
 8006934:	e099      	b.n	8006a6a <sync_fs+0x172>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	2380      	movs	r3, #128	; 0x80
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	001a      	movs	r2, r3
 800693e:	2100      	movs	r1, #0
 8006940:	f7ff fd2c 	bl	800639c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	23ff      	movs	r3, #255	; 0xff
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	2155      	movs	r1, #85	; 0x55
 800694c:	54d1      	strb	r1, [r2, r3]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a51      	ldr	r2, [pc, #324]	; (8006a98 <sync_fs+0x1a0>)
 8006952:	21aa      	movs	r1, #170	; 0xaa
 8006954:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2252      	movs	r2, #82	; 0x52
 800695a:	701a      	strb	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2252      	movs	r2, #82	; 0x52
 8006960:	705a      	strb	r2, [r3, #1]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2261      	movs	r2, #97	; 0x61
 8006966:	709a      	strb	r2, [r3, #2]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2241      	movs	r2, #65	; 0x41
 800696c:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	23f2      	movs	r3, #242	; 0xf2
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	2172      	movs	r1, #114	; 0x72
 8006976:	54d1      	strb	r1, [r2, r3]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	23e6      	movs	r3, #230	; 0xe6
 800697c:	33ff      	adds	r3, #255	; 0xff
 800697e:	2172      	movs	r1, #114	; 0x72
 8006980:	54d1      	strb	r1, [r2, r3]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	23f3      	movs	r3, #243	; 0xf3
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	2141      	movs	r1, #65	; 0x41
 800698a:	54d1      	strb	r1, [r2, r3]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	23e8      	movs	r3, #232	; 0xe8
 8006990:	33ff      	adds	r3, #255	; 0xff
 8006992:	2161      	movs	r1, #97	; 0x61
 8006994:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	2384      	movs	r3, #132	; 0x84
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	58d3      	ldr	r3, [r2, r3]
 800699e:	b2d9      	uxtb	r1, r3
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	23f4      	movs	r3, #244	; 0xf4
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	54d1      	strb	r1, [r2, r3]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	2384      	movs	r3, #132	; 0x84
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	58d3      	ldr	r3, [r2, r3]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	0a1b      	lsrs	r3, r3, #8
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	b2d9      	uxtb	r1, r3
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	23ea      	movs	r3, #234	; 0xea
 80069bc:	33ff      	adds	r3, #255	; 0xff
 80069be:	54d1      	strb	r1, [r2, r3]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	2384      	movs	r3, #132	; 0x84
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	58d3      	ldr	r3, [r2, r3]
 80069c8:	0c1b      	lsrs	r3, r3, #16
 80069ca:	b2d9      	uxtb	r1, r3
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	23f5      	movs	r3, #245	; 0xf5
 80069d0:	005b      	lsls	r3, r3, #1
 80069d2:	54d1      	strb	r1, [r2, r3]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	2384      	movs	r3, #132	; 0x84
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	58d3      	ldr	r3, [r2, r3]
 80069dc:	0e1b      	lsrs	r3, r3, #24
 80069de:	b2d9      	uxtb	r1, r3
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	23ec      	movs	r3, #236	; 0xec
 80069e4:	33ff      	adds	r3, #255	; 0xff
 80069e6:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	2383      	movs	r3, #131	; 0x83
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	58d3      	ldr	r3, [r2, r3]
 80069f0:	b2d9      	uxtb	r1, r3
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	23f6      	movs	r3, #246	; 0xf6
 80069f6:	005b      	lsls	r3, r3, #1
 80069f8:	54d1      	strb	r1, [r2, r3]
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	2383      	movs	r3, #131	; 0x83
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	58d3      	ldr	r3, [r2, r3]
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	0a1b      	lsrs	r3, r3, #8
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	b2d9      	uxtb	r1, r3
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	23ee      	movs	r3, #238	; 0xee
 8006a0e:	33ff      	adds	r3, #255	; 0xff
 8006a10:	54d1      	strb	r1, [r2, r3]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	2383      	movs	r3, #131	; 0x83
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	58d3      	ldr	r3, [r2, r3]
 8006a1a:	0c1b      	lsrs	r3, r3, #16
 8006a1c:	b2d9      	uxtb	r1, r3
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	23f7      	movs	r3, #247	; 0xf7
 8006a22:	005b      	lsls	r3, r3, #1
 8006a24:	54d1      	strb	r1, [r2, r3]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	2383      	movs	r3, #131	; 0x83
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	58d3      	ldr	r3, [r2, r3]
 8006a2e:	0e1b      	lsrs	r3, r3, #24
 8006a30:	b2d9      	uxtb	r1, r3
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	23f0      	movs	r3, #240	; 0xf0
 8006a36:	33ff      	adds	r3, #255	; 0xff
 8006a38:	54d1      	strb	r1, [r2, r3]
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	2387      	movs	r3, #135	; 0x87
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	58d3      	ldr	r3, [r2, r3]
 8006a42:	1c59      	adds	r1, r3, #1
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	238b      	movs	r3, #139	; 0x8b
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	50d1      	str	r1, [r2, r3]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a13      	ldr	r2, [pc, #76]	; (8006a9c <sync_fs+0x1a4>)
 8006a50:	5c98      	ldrb	r0, [r3, r2]
 8006a52:	6879      	ldr	r1, [r7, #4]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	238b      	movs	r3, #139	; 0x8b
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	58d2      	ldr	r2, [r2, r3]
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	f7ff fc2d 	bl	80062bc <disk_write>
			fs->fsi_flag = 0;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a0b      	ldr	r2, [pc, #44]	; (8006a94 <sync_fs+0x19c>)
 8006a66:	2100      	movs	r1, #0
 8006a68:	5499      	strb	r1, [r3, r2]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a0b      	ldr	r2, [pc, #44]	; (8006a9c <sync_fs+0x1a4>)
 8006a6e:	5c9b      	ldrb	r3, [r3, r2]
 8006a70:	2200      	movs	r2, #0
 8006a72:	2100      	movs	r1, #0
 8006a74:	0018      	movs	r0, r3
 8006a76:	f7ff fc4b 	bl	8006310 <disk_ioctl>
 8006a7a:	1e03      	subs	r3, r0, #0
 8006a7c:	d003      	beq.n	8006a86 <sync_fs+0x18e>
			res = FR_DISK_ERR;
 8006a7e:	230f      	movs	r3, #15
 8006a80:	18fb      	adds	r3, r7, r3
 8006a82:	2201      	movs	r2, #1
 8006a84:	701a      	strb	r2, [r3, #0]
	}

	return res;
 8006a86:	230f      	movs	r3, #15
 8006a88:	18fb      	adds	r3, r7, r3
 8006a8a:	781b      	ldrb	r3, [r3, #0]
}
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	b005      	add	sp, #20
 8006a92:	bd90      	pop	{r4, r7, pc}
 8006a94:	00000205 	.word	0x00000205
 8006a98:	000001ff 	.word	0x000001ff
 8006a9c:	00000201 	.word	0x00000201

08006aa0 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	3b02      	subs	r3, #2
 8006aae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	2385      	movs	r3, #133	; 0x85
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	58d3      	ldr	r3, [r2, r3]
 8006ab8:	1e9a      	subs	r2, r3, #2
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d801      	bhi.n	8006ac4 <clust2sect+0x24>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	e00a      	b.n	8006ada <clust2sect+0x3a>
	return clst * fs->csize + fs->database;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a07      	ldr	r2, [pc, #28]	; (8006ae4 <clust2sect+0x44>)
 8006ac8:	5c9b      	ldrb	r3, [r3, r2]
 8006aca:	001a      	movs	r2, r3
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	435a      	muls	r2, r3
 8006ad0:	6879      	ldr	r1, [r7, #4]
 8006ad2:	238a      	movs	r3, #138	; 0x8a
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	58cb      	ldr	r3, [r1, r3]
 8006ad8:	18d3      	adds	r3, r2, r3
}
 8006ada:	0018      	movs	r0, r3
 8006adc:	46bd      	mov	sp, r7
 8006ade:	b002      	add	sp, #8
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	46c0      	nop			; (mov r8, r8)
 8006ae4:	00000202 	.word	0x00000202

08006ae8 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d906      	bls.n	8006b06 <get_fat+0x1e>
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	2385      	movs	r3, #133	; 0x85
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	58d2      	ldr	r2, [r2, r3]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d802      	bhi.n	8006b0c <get_fat+0x24>
		val = 1;	/* Internal error */
 8006b06:	2301      	movs	r3, #1
 8006b08:	617b      	str	r3, [r7, #20]
 8006b0a:	e0a7      	b.n	8006c5c <get_fat+0x174>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	425b      	negs	r3, r3
 8006b10:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	2380      	movs	r3, #128	; 0x80
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	5cd3      	ldrb	r3, [r2, r3]
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d046      	beq.n	8006bac <get_fat+0xc4>
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	d067      	beq.n	8006bf2 <get_fat+0x10a>
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d000      	beq.n	8006b28 <get_fat+0x40>
 8006b26:	e08f      	b.n	8006c48 <get_fat+0x160>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	613b      	str	r3, [r7, #16]
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	085b      	lsrs	r3, r3, #1
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	18d3      	adds	r3, r2, r3
 8006b34:	613b      	str	r3, [r7, #16]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	2388      	movs	r3, #136	; 0x88
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	58d2      	ldr	r2, [r2, r3]
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	0a5b      	lsrs	r3, r3, #9
 8006b42:	18d2      	adds	r2, r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	0011      	movs	r1, r2
 8006b48:	0018      	movs	r0, r3
 8006b4a:	f7ff fe99 	bl	8006880 <move_window>
 8006b4e:	1e03      	subs	r3, r0, #0
 8006b50:	d000      	beq.n	8006b54 <get_fat+0x6c>
 8006b52:	e07c      	b.n	8006c4e <get_fat+0x166>
			wc = fs->win.d8[bc++ % SS(fs)];
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	1c5a      	adds	r2, r3, #1
 8006b58:	613a      	str	r2, [r7, #16]
 8006b5a:	05db      	lsls	r3, r3, #23
 8006b5c:	0ddb      	lsrs	r3, r3, #23
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	5cd3      	ldrb	r3, [r2, r3]
 8006b62:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	2388      	movs	r3, #136	; 0x88
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	58d2      	ldr	r2, [r2, r3]
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	0a5b      	lsrs	r3, r3, #9
 8006b70:	18d2      	adds	r2, r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	0011      	movs	r1, r2
 8006b76:	0018      	movs	r0, r3
 8006b78:	f7ff fe82 	bl	8006880 <move_window>
 8006b7c:	1e03      	subs	r3, r0, #0
 8006b7e:	d168      	bne.n	8006c52 <get_fat+0x16a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	05db      	lsls	r3, r3, #23
 8006b84:	0ddb      	lsrs	r3, r3, #23
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	5cd3      	ldrb	r3, [r2, r3]
 8006b8a:	021b      	lsls	r3, r3, #8
 8006b8c:	001a      	movs	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2201      	movs	r2, #1
 8006b98:	4013      	ands	r3, r2
 8006b9a:	d002      	beq.n	8006ba2 <get_fat+0xba>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	091b      	lsrs	r3, r3, #4
 8006ba0:	e002      	b.n	8006ba8 <get_fat+0xc0>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	051b      	lsls	r3, r3, #20
 8006ba6:	0d1b      	lsrs	r3, r3, #20
 8006ba8:	617b      	str	r3, [r7, #20]
			break;
 8006baa:	e057      	b.n	8006c5c <get_fat+0x174>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	2388      	movs	r3, #136	; 0x88
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	58d2      	ldr	r2, [r2, r3]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	0a1b      	lsrs	r3, r3, #8
 8006bb8:	18d2      	adds	r2, r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	0011      	movs	r1, r2
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	f7ff fe5e 	bl	8006880 <move_window>
 8006bc4:	1e03      	subs	r3, r0, #0
 8006bc6:	d146      	bne.n	8006c56 <get_fat+0x16e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	005a      	lsls	r2, r3, #1
 8006bcc:	23ff      	movs	r3, #255	; 0xff
 8006bce:	005b      	lsls	r3, r3, #1
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	18d3      	adds	r3, r2, r3
 8006bd6:	60bb      	str	r3, [r7, #8]
			val = LD_WORD(p);
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	021b      	lsls	r3, r3, #8
 8006be0:	b21a      	sxth	r2, r3
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	b21b      	sxth	r3, r3
 8006be8:	4313      	orrs	r3, r2
 8006bea:	b21b      	sxth	r3, r3
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	617b      	str	r3, [r7, #20]
			break;
 8006bf0:	e034      	b.n	8006c5c <get_fat+0x174>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	2388      	movs	r3, #136	; 0x88
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	58d2      	ldr	r2, [r2, r3]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	09db      	lsrs	r3, r3, #7
 8006bfe:	18d2      	adds	r2, r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	0011      	movs	r1, r2
 8006c04:	0018      	movs	r0, r3
 8006c06:	f7ff fe3b 	bl	8006880 <move_window>
 8006c0a:	1e03      	subs	r3, r0, #0
 8006c0c:	d125      	bne.n	8006c5a <get_fat+0x172>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	009a      	lsls	r2, r3, #2
 8006c12:	23fe      	movs	r3, #254	; 0xfe
 8006c14:	005b      	lsls	r3, r3, #1
 8006c16:	4013      	ands	r3, r2
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	18d3      	adds	r3, r2, r3
 8006c1c:	60bb      	str	r3, [r7, #8]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	3303      	adds	r3, #3
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	061a      	lsls	r2, r3, #24
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	3302      	adds	r3, #2
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	041b      	lsls	r3, r3, #16
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	3201      	adds	r2, #1
 8006c34:	7812      	ldrb	r2, [r2, #0]
 8006c36:	0212      	lsls	r2, r2, #8
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	7812      	ldrb	r2, [r2, #0]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	011b      	lsls	r3, r3, #4
 8006c42:	091b      	lsrs	r3, r3, #4
 8006c44:	617b      	str	r3, [r7, #20]
			break;
 8006c46:	e009      	b.n	8006c5c <get_fat+0x174>

		default:
			val = 1;	/* Internal error */
 8006c48:	2301      	movs	r3, #1
 8006c4a:	617b      	str	r3, [r7, #20]
 8006c4c:	e006      	b.n	8006c5c <get_fat+0x174>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c4e:	46c0      	nop			; (mov r8, r8)
 8006c50:	e004      	b.n	8006c5c <get_fat+0x174>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c52:	46c0      	nop			; (mov r8, r8)
 8006c54:	e002      	b.n	8006c5c <get_fat+0x174>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006c56:	46c0      	nop			; (mov r8, r8)
 8006c58:	e000      	b.n	8006c5c <get_fat+0x174>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c5a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 8006c5c:	697b      	ldr	r3, [r7, #20]
}
 8006c5e:	0018      	movs	r0, r3
 8006c60:	46bd      	mov	sp, r7
 8006c62:	b006      	add	sp, #24
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8006c66:	b590      	push	{r4, r7, lr}
 8006c68:	b089      	sub	sp, #36	; 0x24
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	60f8      	str	r0, [r7, #12]
 8006c6e:	60b9      	str	r1, [r7, #8]
 8006c70:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d906      	bls.n	8006c86 <put_fat+0x20>
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	2385      	movs	r3, #133	; 0x85
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	58d2      	ldr	r2, [r2, r3]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d804      	bhi.n	8006c90 <put_fat+0x2a>
		res = FR_INT_ERR;
 8006c86:	231f      	movs	r3, #31
 8006c88:	18fb      	adds	r3, r7, r3
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	701a      	strb	r2, [r3, #0]
 8006c8e:	e113      	b.n	8006eb8 <put_fat+0x252>

	} else {
		switch (fs->fs_type) {
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	2380      	movs	r3, #128	; 0x80
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	5cd3      	ldrb	r3, [r2, r3]
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d100      	bne.n	8006c9e <put_fat+0x38>
 8006c9c:	e080      	b.n	8006da0 <put_fat+0x13a>
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d100      	bne.n	8006ca4 <put_fat+0x3e>
 8006ca2:	e0ac      	b.n	8006dfe <put_fat+0x198>
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d000      	beq.n	8006caa <put_fat+0x44>
 8006ca8:	e0fa      	b.n	8006ea0 <put_fat+0x23a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	61bb      	str	r3, [r7, #24]
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	085b      	lsrs	r3, r3, #1
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	18d3      	adds	r3, r2, r3
 8006cb6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	2388      	movs	r3, #136	; 0x88
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	58d2      	ldr	r2, [r2, r3]
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	0a5b      	lsrs	r3, r3, #9
 8006cc4:	18d2      	adds	r2, r2, r3
 8006cc6:	231f      	movs	r3, #31
 8006cc8:	18fc      	adds	r4, r7, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	0011      	movs	r1, r2
 8006cce:	0018      	movs	r0, r3
 8006cd0:	f7ff fdd6 	bl	8006880 <move_window>
 8006cd4:	0003      	movs	r3, r0
 8006cd6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006cd8:	231f      	movs	r3, #31
 8006cda:	18fb      	adds	r3, r7, r3
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d000      	beq.n	8006ce4 <put_fat+0x7e>
 8006ce2:	e0e2      	b.n	8006eaa <put_fat+0x244>
			p = &fs->win.d8[bc++ % SS(fs)];
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	61ba      	str	r2, [r7, #24]
 8006cea:	05db      	lsls	r3, r3, #23
 8006cec:	0ddb      	lsrs	r3, r3, #23
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	18d3      	adds	r3, r2, r3
 8006cf2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	d00d      	beq.n	8006d18 <put_fat+0xb2>
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	b25b      	sxtb	r3, r3
 8006d02:	220f      	movs	r2, #15
 8006d04:	4013      	ands	r3, r2
 8006d06:	b25a      	sxtb	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	011b      	lsls	r3, r3, #4
 8006d0e:	b25b      	sxtb	r3, r3
 8006d10:	4313      	orrs	r3, r2
 8006d12:	b25b      	sxtb	r3, r3
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	e001      	b.n	8006d1c <put_fat+0xb6>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	2381      	movs	r3, #129	; 0x81
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	2101      	movs	r1, #1
 8006d28:	54d1      	strb	r1, [r2, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	2388      	movs	r3, #136	; 0x88
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	58d2      	ldr	r2, [r2, r3]
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	0a5b      	lsrs	r3, r3, #9
 8006d36:	18d2      	adds	r2, r2, r3
 8006d38:	231f      	movs	r3, #31
 8006d3a:	18fc      	adds	r4, r7, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	0011      	movs	r1, r2
 8006d40:	0018      	movs	r0, r3
 8006d42:	f7ff fd9d 	bl	8006880 <move_window>
 8006d46:	0003      	movs	r3, r0
 8006d48:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006d4a:	231f      	movs	r3, #31
 8006d4c:	18fb      	adds	r3, r7, r3
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d000      	beq.n	8006d56 <put_fat+0xf0>
 8006d54:	e0ab      	b.n	8006eae <put_fat+0x248>
			p = &fs->win.d8[bc % SS(fs)];
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	05db      	lsls	r3, r3, #23
 8006d5a:	0ddb      	lsrs	r3, r3, #23
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	18d3      	adds	r3, r2, r3
 8006d60:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2201      	movs	r2, #1
 8006d66:	4013      	ands	r3, r2
 8006d68:	d003      	beq.n	8006d72 <put_fat+0x10c>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	091b      	lsrs	r3, r3, #4
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	e00e      	b.n	8006d90 <put_fat+0x12a>
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	b25b      	sxtb	r3, r3
 8006d78:	220f      	movs	r2, #15
 8006d7a:	4393      	bics	r3, r2
 8006d7c:	b25a      	sxtb	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	0a1b      	lsrs	r3, r3, #8
 8006d82:	b25b      	sxtb	r3, r3
 8006d84:	210f      	movs	r1, #15
 8006d86:	400b      	ands	r3, r1
 8006d88:	b25b      	sxtb	r3, r3
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	b25b      	sxtb	r3, r3
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	2381      	movs	r3, #129	; 0x81
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	54d1      	strb	r1, [r2, r3]
			break;
 8006d9e:	e08b      	b.n	8006eb8 <put_fat+0x252>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	2388      	movs	r3, #136	; 0x88
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	58d2      	ldr	r2, [r2, r3]
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	0a1b      	lsrs	r3, r3, #8
 8006dac:	18d2      	adds	r2, r2, r3
 8006dae:	231f      	movs	r3, #31
 8006db0:	18fc      	adds	r4, r7, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	0011      	movs	r1, r2
 8006db6:	0018      	movs	r0, r3
 8006db8:	f7ff fd62 	bl	8006880 <move_window>
 8006dbc:	0003      	movs	r3, r0
 8006dbe:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006dc0:	231f      	movs	r3, #31
 8006dc2:	18fb      	adds	r3, r7, r3
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d173      	bne.n	8006eb2 <put_fat+0x24c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	005a      	lsls	r2, r3, #1
 8006dce:	23ff      	movs	r3, #255	; 0xff
 8006dd0:	005b      	lsls	r3, r3, #1
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	18d3      	adds	r3, r2, r3
 8006dd8:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	701a      	strb	r2, [r3, #0]
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	3301      	adds	r3, #1
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	b292      	uxth	r2, r2
 8006dea:	0a12      	lsrs	r2, r2, #8
 8006dec:	b292      	uxth	r2, r2
 8006dee:	b2d2      	uxtb	r2, r2
 8006df0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	2381      	movs	r3, #129	; 0x81
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	2101      	movs	r1, #1
 8006dfa:	54d1      	strb	r1, [r2, r3]
			break;
 8006dfc:	e05c      	b.n	8006eb8 <put_fat+0x252>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	2388      	movs	r3, #136	; 0x88
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	58d2      	ldr	r2, [r2, r3]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	09db      	lsrs	r3, r3, #7
 8006e0a:	18d2      	adds	r2, r2, r3
 8006e0c:	231f      	movs	r3, #31
 8006e0e:	18fc      	adds	r4, r7, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	0011      	movs	r1, r2
 8006e14:	0018      	movs	r0, r3
 8006e16:	f7ff fd33 	bl	8006880 <move_window>
 8006e1a:	0003      	movs	r3, r0
 8006e1c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006e1e:	231f      	movs	r3, #31
 8006e20:	18fb      	adds	r3, r7, r3
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d146      	bne.n	8006eb6 <put_fat+0x250>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	009a      	lsls	r2, r3, #2
 8006e2c:	23fe      	movs	r3, #254	; 0xfe
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	4013      	ands	r3, r2
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	18d3      	adds	r3, r2, r3
 8006e36:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	3303      	adds	r3, #3
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	061a      	lsls	r2, r3, #24
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	3302      	adds	r3, #2
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	041b      	lsls	r3, r3, #16
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	3201      	adds	r2, #1
 8006e4e:	7812      	ldrb	r2, [r2, #0]
 8006e50:	0212      	lsls	r2, r2, #8
 8006e52:	4313      	orrs	r3, r2
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	7812      	ldrb	r2, [r2, #0]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	0f1b      	lsrs	r3, r3, #28
 8006e5c:	071b      	lsls	r3, r3, #28
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	701a      	strb	r2, [r3, #0]
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	b292      	uxth	r2, r2
 8006e74:	0a12      	lsrs	r2, r2, #8
 8006e76:	b292      	uxth	r2, r2
 8006e78:	b2d2      	uxtb	r2, r2
 8006e7a:	701a      	strb	r2, [r3, #0]
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	3302      	adds	r3, #2
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	0c12      	lsrs	r2, r2, #16
 8006e84:	b2d2      	uxtb	r2, r2
 8006e86:	701a      	strb	r2, [r3, #0]
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	3303      	adds	r3, #3
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	0e12      	lsrs	r2, r2, #24
 8006e90:	b2d2      	uxtb	r2, r2
 8006e92:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	2381      	movs	r3, #129	; 0x81
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	54d1      	strb	r1, [r2, r3]
			break;
 8006e9e:	e00b      	b.n	8006eb8 <put_fat+0x252>

		default :
			res = FR_INT_ERR;
 8006ea0:	231f      	movs	r3, #31
 8006ea2:	18fb      	adds	r3, r7, r3
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	701a      	strb	r2, [r3, #0]
 8006ea8:	e006      	b.n	8006eb8 <put_fat+0x252>
			if (res != FR_OK) break;
 8006eaa:	46c0      	nop			; (mov r8, r8)
 8006eac:	e004      	b.n	8006eb8 <put_fat+0x252>
			if (res != FR_OK) break;
 8006eae:	46c0      	nop			; (mov r8, r8)
 8006eb0:	e002      	b.n	8006eb8 <put_fat+0x252>
			if (res != FR_OK) break;
 8006eb2:	46c0      	nop			; (mov r8, r8)
 8006eb4:	e000      	b.n	8006eb8 <put_fat+0x252>
			if (res != FR_OK) break;
 8006eb6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 8006eb8:	231f      	movs	r3, #31
 8006eba:	18fb      	adds	r3, r7, r3
 8006ebc:	781b      	ldrb	r3, [r3, #0]
}
 8006ebe:	0018      	movs	r0, r3
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	b009      	add	sp, #36	; 0x24
 8006ec4:	bd90      	pop	{r4, r7, pc}
	...

08006ec8 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8006ec8:	b590      	push	{r4, r7, lr}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d906      	bls.n	8006ee6 <remove_chain+0x1e>
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	2385      	movs	r3, #133	; 0x85
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	58d2      	ldr	r2, [r2, r3]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d804      	bhi.n	8006ef0 <remove_chain+0x28>
		res = FR_INT_ERR;
 8006ee6:	230f      	movs	r3, #15
 8006ee8:	18fb      	adds	r3, r7, r3
 8006eea:	2202      	movs	r2, #2
 8006eec:	701a      	strb	r2, [r3, #0]
 8006eee:	e053      	b.n	8006f98 <remove_chain+0xd0>

	} else {
		res = FR_OK;
 8006ef0:	230f      	movs	r3, #15
 8006ef2:	18fb      	adds	r3, r7, r3
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006ef8:	e043      	b.n	8006f82 <remove_chain+0xba>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	0011      	movs	r1, r2
 8006f00:	0018      	movs	r0, r3
 8006f02:	f7ff fdf1 	bl	8006ae8 <get_fat>
 8006f06:	0003      	movs	r3, r0
 8006f08:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d040      	beq.n	8006f92 <remove_chain+0xca>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d104      	bne.n	8006f20 <remove_chain+0x58>
 8006f16:	230f      	movs	r3, #15
 8006f18:	18fb      	adds	r3, r7, r3
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	e03b      	b.n	8006f98 <remove_chain+0xd0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	3301      	adds	r3, #1
 8006f24:	d104      	bne.n	8006f30 <remove_chain+0x68>
 8006f26:	230f      	movs	r3, #15
 8006f28:	18fb      	adds	r3, r7, r3
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	701a      	strb	r2, [r3, #0]
 8006f2e:	e033      	b.n	8006f98 <remove_chain+0xd0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006f30:	230f      	movs	r3, #15
 8006f32:	18fc      	adds	r4, r7, r3
 8006f34:	6839      	ldr	r1, [r7, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	f7ff fe93 	bl	8006c66 <put_fat>
 8006f40:	0003      	movs	r3, r0
 8006f42:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006f44:	230f      	movs	r3, #15
 8006f46:	18fb      	adds	r3, r7, r3
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d123      	bne.n	8006f96 <remove_chain+0xce>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	2384      	movs	r3, #132	; 0x84
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	58d3      	ldr	r3, [r2, r3]
 8006f56:	3301      	adds	r3, #1
 8006f58:	d011      	beq.n	8006f7e <remove_chain+0xb6>
				fs->free_clust++;
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	2384      	movs	r3, #132	; 0x84
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	58d3      	ldr	r3, [r2, r3]
 8006f62:	1c59      	adds	r1, r3, #1
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	2384      	movs	r3, #132	; 0x84
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	50d1      	str	r1, [r2, r3]
				fs->fsi_flag |= 1;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a0e      	ldr	r2, [pc, #56]	; (8006fa8 <remove_chain+0xe0>)
 8006f70:	5c9b      	ldrb	r3, [r3, r2]
 8006f72:	2201      	movs	r2, #1
 8006f74:	4313      	orrs	r3, r2
 8006f76:	b2d9      	uxtb	r1, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a0b      	ldr	r2, [pc, #44]	; (8006fa8 <remove_chain+0xe0>)
 8006f7c:	5499      	strb	r1, [r3, r2]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	2385      	movs	r3, #133	; 0x85
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	58d2      	ldr	r2, [r2, r3]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d8b4      	bhi.n	8006efa <remove_chain+0x32>
 8006f90:	e002      	b.n	8006f98 <remove_chain+0xd0>
			if (nxt == 0) break;				/* Empty cluster? */
 8006f92:	46c0      	nop			; (mov r8, r8)
 8006f94:	e000      	b.n	8006f98 <remove_chain+0xd0>
			if (res != FR_OK) break;
 8006f96:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 8006f98:	230f      	movs	r3, #15
 8006f9a:	18fb      	adds	r3, r7, r3
 8006f9c:	781b      	ldrb	r3, [r3, #0]
}
 8006f9e:	0018      	movs	r0, r3
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	b005      	add	sp, #20
 8006fa4:	bd90      	pop	{r4, r7, pc}
 8006fa6:	46c0      	nop			; (mov r8, r8)
 8006fa8:	00000205 	.word	0x00000205

08006fac <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8006fac:	b590      	push	{r4, r7, lr}
 8006fae:	b087      	sub	sp, #28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d111      	bne.n	8006fe0 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	2383      	movs	r3, #131	; 0x83
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	58d3      	ldr	r3, [r2, r3]
 8006fc4:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d006      	beq.n	8006fda <create_chain+0x2e>
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	2385      	movs	r3, #133	; 0x85
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	58d2      	ldr	r2, [r2, r3]
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d81f      	bhi.n	800701a <create_chain+0x6e>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	613b      	str	r3, [r7, #16]
 8006fde:	e01c      	b.n	800701a <create_chain+0x6e>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	0011      	movs	r1, r2
 8006fe6:	0018      	movs	r0, r3
 8006fe8:	f7ff fd7e 	bl	8006ae8 <get_fat>
 8006fec:	0003      	movs	r3, r0
 8006fee:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d801      	bhi.n	8006ffa <create_chain+0x4e>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e087      	b.n	800710a <create_chain+0x15e>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	d101      	bne.n	8007004 <create_chain+0x58>
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	e082      	b.n	800710a <create_chain+0x15e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	2385      	movs	r3, #133	; 0x85
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	58d2      	ldr	r2, [r2, r3]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	429a      	cmp	r2, r3
 8007010:	d901      	bls.n	8007016 <create_chain+0x6a>
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	e079      	b.n	800710a <create_chain+0x15e>
		scl = clst;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	3301      	adds	r3, #1
 8007022:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	2385      	movs	r3, #133	; 0x85
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	58d2      	ldr	r2, [r2, r3]
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	429a      	cmp	r2, r3
 8007030:	d807      	bhi.n	8007042 <create_chain+0x96>
			ncl = 2;
 8007032:	2302      	movs	r3, #2
 8007034:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	429a      	cmp	r2, r3
 800703c:	d901      	bls.n	8007042 <create_chain+0x96>
 800703e:	2300      	movs	r3, #0
 8007040:	e063      	b.n	800710a <create_chain+0x15e>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	0011      	movs	r1, r2
 8007048:	0018      	movs	r0, r3
 800704a:	f7ff fd4d 	bl	8006ae8 <get_fat>
 800704e:	0003      	movs	r3, r0
 8007050:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00d      	beq.n	8007074 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	3301      	adds	r3, #1
 800705c:	d002      	beq.n	8007064 <create_chain+0xb8>
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d101      	bne.n	8007068 <create_chain+0xbc>
			return cs;
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	e050      	b.n	800710a <create_chain+0x15e>
		if (ncl == scl) return 0;		/* No free cluster */
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	429a      	cmp	r2, r3
 800706e:	d1d6      	bne.n	800701e <create_chain+0x72>
 8007070:	2300      	movs	r3, #0
 8007072:	e04a      	b.n	800710a <create_chain+0x15e>
		if (cs == 0) break;				/* Found a free cluster */
 8007074:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8007076:	230f      	movs	r3, #15
 8007078:	18fc      	adds	r4, r7, r3
 800707a:	4a26      	ldr	r2, [pc, #152]	; (8007114 <create_chain+0x168>)
 800707c:	6979      	ldr	r1, [r7, #20]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	0018      	movs	r0, r3
 8007082:	f7ff fdf0 	bl	8006c66 <put_fat>
 8007086:	0003      	movs	r3, r0
 8007088:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
 800708a:	230f      	movs	r3, #15
 800708c:	18fb      	adds	r3, r7, r3
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10c      	bne.n	80070ae <create_chain+0x102>
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d009      	beq.n	80070ae <create_chain+0x102>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800709a:	230f      	movs	r3, #15
 800709c:	18fc      	adds	r4, r7, r3
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	0018      	movs	r0, r3
 80070a6:	f7ff fdde 	bl	8006c66 <put_fat>
 80070aa:	0003      	movs	r3, r0
 80070ac:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
 80070ae:	230f      	movs	r3, #15
 80070b0:	18fb      	adds	r3, r7, r3
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d11d      	bne.n	80070f4 <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	2383      	movs	r3, #131	; 0x83
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	6979      	ldr	r1, [r7, #20]
 80070c0:	50d1      	str	r1, [r2, r3]
		if (fs->free_clust != 0xFFFFFFFF) {
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	2384      	movs	r3, #132	; 0x84
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	58d3      	ldr	r3, [r2, r3]
 80070ca:	3301      	adds	r3, #1
 80070cc:	d01c      	beq.n	8007108 <create_chain+0x15c>
			fs->free_clust--;
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	2384      	movs	r3, #132	; 0x84
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	58d3      	ldr	r3, [r2, r3]
 80070d6:	1e59      	subs	r1, r3, #1
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	2384      	movs	r3, #132	; 0x84
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	50d1      	str	r1, [r2, r3]
			fs->fsi_flag |= 1;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a0d      	ldr	r2, [pc, #52]	; (8007118 <create_chain+0x16c>)
 80070e4:	5c9b      	ldrb	r3, [r3, r2]
 80070e6:	2201      	movs	r2, #1
 80070e8:	4313      	orrs	r3, r2
 80070ea:	b2d9      	uxtb	r1, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a0a      	ldr	r2, [pc, #40]	; (8007118 <create_chain+0x16c>)
 80070f0:	5499      	strb	r1, [r3, r2]
 80070f2:	e009      	b.n	8007108 <create_chain+0x15c>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80070f4:	230f      	movs	r3, #15
 80070f6:	18fb      	adds	r3, r7, r3
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d102      	bne.n	8007104 <create_chain+0x158>
 80070fe:	2301      	movs	r3, #1
 8007100:	425b      	negs	r3, r3
 8007102:	e000      	b.n	8007106 <create_chain+0x15a>
 8007104:	2301      	movs	r3, #1
 8007106:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8007108:	697b      	ldr	r3, [r7, #20]
}
 800710a:	0018      	movs	r0, r3
 800710c:	46bd      	mov	sp, r7
 800710e:	b007      	add	sp, #28
 8007110:	bd90      	pop	{r4, r7, pc}
 8007112:	46c0      	nop			; (mov r8, r8)
 8007114:	0fffffff 	.word	0x0fffffff
 8007118:	00000205 	.word	0x00000205

0800711c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	2389      	movs	r3, #137	; 0x89
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	58d3      	ldr	r3, [r2, r3]
 800712e:	3304      	adds	r3, #4
 8007130:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	0a58      	lsrs	r0, r3, #9
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	2380      	movs	r3, #128	; 0x80
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	58d3      	ldr	r3, [r2, r3]
 800713e:	4a13      	ldr	r2, [pc, #76]	; (800718c <clmt_clust+0x70>)
 8007140:	5c9b      	ldrb	r3, [r3, r2]
 8007142:	0019      	movs	r1, r3
 8007144:	f7f8 ffe0 	bl	8000108 <__udivsi3>
 8007148:	0003      	movs	r3, r0
 800714a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	1d1a      	adds	r2, r3, #4
 8007150:	613a      	str	r2, [r7, #16]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <clmt_clust+0x44>
 800715c:	2300      	movs	r3, #0
 800715e:	e010      	b.n	8007182 <clmt_clust+0x66>
		if (cl < ncl) break;	/* In this fragment? */
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	429a      	cmp	r2, r3
 8007166:	d307      	bcc.n	8007178 <clmt_clust+0x5c>
		cl -= ncl; tbl++;		/* Next fragment */
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	617b      	str	r3, [r7, #20]
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	3304      	adds	r3, #4
 8007174:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007176:	e7e9      	b.n	800714c <clmt_clust+0x30>
		if (cl < ncl) break;	/* In this fragment? */
 8007178:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	18d3      	adds	r3, r2, r3
}
 8007182:	0018      	movs	r0, r3
 8007184:	46bd      	mov	sp, r7
 8007186:	b006      	add	sp, #24
 8007188:	bd80      	pop	{r7, pc}
 800718a:	46c0      	nop			; (mov r8, r8)
 800718c:	00000202 	.word	0x00000202

08007190 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	b299      	uxth	r1, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a51      	ldr	r2, [pc, #324]	; (80072e8 <dir_sdi+0x158>)
 80071a2:	5299      	strh	r1, [r3, r2]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	2382      	movs	r3, #130	; 0x82
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	58d3      	ldr	r3, [r2, r3]
 80071ac:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d009      	beq.n	80071c8 <dir_sdi+0x38>
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	2380      	movs	r3, #128	; 0x80
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	58d2      	ldr	r2, [r2, r3]
 80071bc:	2385      	movs	r3, #133	; 0x85
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	58d2      	ldr	r2, [r2, r3]
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d801      	bhi.n	80071cc <dir_sdi+0x3c>
		return FR_INT_ERR;
 80071c8:	2302      	movs	r3, #2
 80071ca:	e088      	b.n	80072de <dir_sdi+0x14e>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d110      	bne.n	80071f4 <dir_sdi+0x64>
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	2380      	movs	r3, #128	; 0x80
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	58d2      	ldr	r2, [r2, r3]
 80071da:	2380      	movs	r3, #128	; 0x80
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	5cd3      	ldrb	r3, [r2, r3]
 80071e0:	2b03      	cmp	r3, #3
 80071e2:	d107      	bne.n	80071f4 <dir_sdi+0x64>
		clst = dp->fs->dirbase;
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	2380      	movs	r3, #128	; 0x80
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	58d2      	ldr	r2, [r2, r3]
 80071ec:	2389      	movs	r3, #137	; 0x89
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	58d3      	ldr	r3, [r2, r3]
 80071f2:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d115      	bne.n	8007226 <dir_sdi+0x96>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	2380      	movs	r3, #128	; 0x80
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	58d2      	ldr	r2, [r2, r3]
 8007202:	2382      	movs	r3, #130	; 0x82
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	5ad3      	ldrh	r3, [r2, r3]
 8007208:	001a      	movs	r2, r3
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	429a      	cmp	r2, r3
 800720e:	d801      	bhi.n	8007214 <dir_sdi+0x84>
			return FR_INT_ERR;
 8007210:	2302      	movs	r3, #2
 8007212:	e064      	b.n	80072de <dir_sdi+0x14e>
		sect = dp->fs->dirbase;
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	2380      	movs	r3, #128	; 0x80
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	58d2      	ldr	r2, [r2, r3]
 800721c:	2389      	movs	r3, #137	; 0x89
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	58d3      	ldr	r3, [r2, r3]
 8007222:	613b      	str	r3, [r7, #16]
 8007224:	e03a      	b.n	800729c <dir_sdi+0x10c>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	2380      	movs	r3, #128	; 0x80
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	58d3      	ldr	r3, [r2, r3]
 800722e:	4a2f      	ldr	r2, [pc, #188]	; (80072ec <dir_sdi+0x15c>)
 8007230:	5c9b      	ldrb	r3, [r3, r2]
 8007232:	011b      	lsls	r3, r3, #4
 8007234:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8007236:	e022      	b.n	800727e <dir_sdi+0xee>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	2380      	movs	r3, #128	; 0x80
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	58d3      	ldr	r3, [r2, r3]
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	0011      	movs	r1, r2
 8007244:	0018      	movs	r0, r3
 8007246:	f7ff fc4f 	bl	8006ae8 <get_fat>
 800724a:	0003      	movs	r3, r0
 800724c:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	3301      	adds	r3, #1
 8007252:	d101      	bne.n	8007258 <dir_sdi+0xc8>
 8007254:	2301      	movs	r3, #1
 8007256:	e042      	b.n	80072de <dir_sdi+0x14e>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d909      	bls.n	8007272 <dir_sdi+0xe2>
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	2380      	movs	r3, #128	; 0x80
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	58d2      	ldr	r2, [r2, r3]
 8007266:	2385      	movs	r3, #133	; 0x85
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	58d2      	ldr	r2, [r2, r3]
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	429a      	cmp	r2, r3
 8007270:	d801      	bhi.n	8007276 <dir_sdi+0xe6>
				return FR_INT_ERR;
 8007272:	2302      	movs	r3, #2
 8007274:	e033      	b.n	80072de <dir_sdi+0x14e>
			idx -= ic;
 8007276:	683a      	ldr	r2, [r7, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	429a      	cmp	r2, r3
 8007284:	d2d8      	bcs.n	8007238 <dir_sdi+0xa8>
		}
		sect = clust2sect(dp->fs, clst);
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	2380      	movs	r3, #128	; 0x80
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	58d3      	ldr	r3, [r2, r3]
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	0011      	movs	r1, r2
 8007292:	0018      	movs	r0, r3
 8007294:	f7ff fc04 	bl	8006aa0 <clust2sect>
 8007298:	0003      	movs	r3, r0
 800729a:	613b      	str	r3, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	2383      	movs	r3, #131	; 0x83
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	6979      	ldr	r1, [r7, #20]
 80072a4:	50d1      	str	r1, [r2, r3]
	if (!sect) return FR_INT_ERR;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <dir_sdi+0x120>
 80072ac:	2302      	movs	r3, #2
 80072ae:	e016      	b.n	80072de <dir_sdi+0x14e>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	091a      	lsrs	r2, r3, #4
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	18d1      	adds	r1, r2, r3
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	2384      	movs	r3, #132	; 0x84
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	50d1      	str	r1, [r2, r3]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	2380      	movs	r3, #128	; 0x80
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	58d3      	ldr	r3, [r2, r3]
 80072c8:	0019      	movs	r1, r3
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	220f      	movs	r2, #15
 80072ce:	4013      	ands	r3, r2
 80072d0:	015b      	lsls	r3, r3, #5
 80072d2:	18c9      	adds	r1, r1, r3
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	2385      	movs	r3, #133	; 0x85
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	50d1      	str	r1, [r2, r3]

	return FR_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	0018      	movs	r0, r3
 80072e0:	46bd      	mov	sp, r7
 80072e2:	b006      	add	sp, #24
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	46c0      	nop			; (mov r8, r8)
 80072e8:	00000206 	.word	0x00000206
 80072ec:	00000202 	.word	0x00000202

080072f0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80072f0:	b590      	push	{r4, r7, lr}
 80072f2:	b087      	sub	sp, #28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a88      	ldr	r2, [pc, #544]	; (8007520 <dir_next+0x230>)
 80072fe:	5a9b      	ldrh	r3, [r3, r2]
 8007300:	3301      	adds	r3, #1
 8007302:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	041b      	lsls	r3, r3, #16
 8007308:	0c1b      	lsrs	r3, r3, #16
 800730a:	d005      	beq.n	8007318 <dir_next+0x28>
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	2384      	movs	r3, #132	; 0x84
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	58d3      	ldr	r3, [r2, r3]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d101      	bne.n	800731c <dir_next+0x2c>
		return FR_NO_FILE;
 8007318:	2304      	movs	r3, #4
 800731a:	e0fc      	b.n	8007516 <dir_next+0x226>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	220f      	movs	r2, #15
 8007320:	4013      	ands	r3, r2
 8007322:	d000      	beq.n	8007326 <dir_next+0x36>
 8007324:	e0e3      	b.n	80074ee <dir_next+0x1fe>
		dp->sect++;					/* Next sector */
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	2384      	movs	r3, #132	; 0x84
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	58d3      	ldr	r3, [r2, r3]
 800732e:	1c59      	adds	r1, r3, #1
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	2384      	movs	r3, #132	; 0x84
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	50d1      	str	r1, [r2, r3]

		if (!dp->clust) {		/* Static table */
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	2383      	movs	r3, #131	; 0x83
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	58d3      	ldr	r3, [r2, r3]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10d      	bne.n	8007360 <dir_next+0x70>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	2380      	movs	r3, #128	; 0x80
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	58d2      	ldr	r2, [r2, r3]
 800734c:	2382      	movs	r3, #130	; 0x82
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	5ad3      	ldrh	r3, [r2, r3]
 8007352:	001a      	movs	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	429a      	cmp	r2, r3
 8007358:	d900      	bls.n	800735c <dir_next+0x6c>
 800735a:	e0c8      	b.n	80074ee <dir_next+0x1fe>
				return FR_NO_FILE;
 800735c:	2304      	movs	r3, #4
 800735e:	e0da      	b.n	8007516 <dir_next+0x226>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	091b      	lsrs	r3, r3, #4
 8007364:	6879      	ldr	r1, [r7, #4]
 8007366:	2280      	movs	r2, #128	; 0x80
 8007368:	0092      	lsls	r2, r2, #2
 800736a:	588a      	ldr	r2, [r1, r2]
 800736c:	496d      	ldr	r1, [pc, #436]	; (8007524 <dir_next+0x234>)
 800736e:	5c52      	ldrb	r2, [r2, r1]
 8007370:	3a01      	subs	r2, #1
 8007372:	4013      	ands	r3, r2
 8007374:	d000      	beq.n	8007378 <dir_next+0x88>
 8007376:	e0ba      	b.n	80074ee <dir_next+0x1fe>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	2380      	movs	r3, #128	; 0x80
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	58d0      	ldr	r0, [r2, r3]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	2383      	movs	r3, #131	; 0x83
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	58d3      	ldr	r3, [r2, r3]
 8007388:	0019      	movs	r1, r3
 800738a:	f7ff fbad 	bl	8006ae8 <get_fat>
 800738e:	0003      	movs	r3, r0
 8007390:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d801      	bhi.n	800739c <dir_next+0xac>
 8007398:	2302      	movs	r3, #2
 800739a:	e0bc      	b.n	8007516 <dir_next+0x226>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	3301      	adds	r3, #1
 80073a0:	d101      	bne.n	80073a6 <dir_next+0xb6>
 80073a2:	2301      	movs	r3, #1
 80073a4:	e0b7      	b.n	8007516 <dir_next+0x226>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	2380      	movs	r3, #128	; 0x80
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	58d2      	ldr	r2, [r2, r3]
 80073ae:	2385      	movs	r3, #133	; 0x85
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	58d2      	ldr	r2, [r2, r3]
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d900      	bls.n	80073bc <dir_next+0xcc>
 80073ba:	e085      	b.n	80074c8 <dir_next+0x1d8>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <dir_next+0xd6>
 80073c2:	2304      	movs	r3, #4
 80073c4:	e0a7      	b.n	8007516 <dir_next+0x226>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	2380      	movs	r3, #128	; 0x80
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	58d0      	ldr	r0, [r2, r3]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	2383      	movs	r3, #131	; 0x83
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	58d3      	ldr	r3, [r2, r3]
 80073d6:	0019      	movs	r1, r3
 80073d8:	f7ff fde8 	bl	8006fac <create_chain>
 80073dc:	0003      	movs	r3, r0
 80073de:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <dir_next+0xfa>
 80073e6:	2307      	movs	r3, #7
 80073e8:	e095      	b.n	8007516 <dir_next+0x226>
					if (clst == 1) return FR_INT_ERR;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d101      	bne.n	80073f4 <dir_next+0x104>
 80073f0:	2302      	movs	r3, #2
 80073f2:	e090      	b.n	8007516 <dir_next+0x226>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	3301      	adds	r3, #1
 80073f8:	d101      	bne.n	80073fe <dir_next+0x10e>
 80073fa:	2301      	movs	r3, #1
 80073fc:	e08b      	b.n	8007516 <dir_next+0x226>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	2380      	movs	r3, #128	; 0x80
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	58d3      	ldr	r3, [r2, r3]
 8007406:	0018      	movs	r0, r3
 8007408:	f7ff f9e2 	bl	80067d0 <sync_window>
 800740c:	1e03      	subs	r3, r0, #0
 800740e:	d001      	beq.n	8007414 <dir_next+0x124>
 8007410:	2301      	movs	r3, #1
 8007412:	e080      	b.n	8007516 <dir_next+0x226>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	2380      	movs	r3, #128	; 0x80
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	58d3      	ldr	r3, [r2, r3]
 800741c:	0018      	movs	r0, r3
 800741e:	2380      	movs	r3, #128	; 0x80
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	001a      	movs	r2, r3
 8007424:	2100      	movs	r1, #0
 8007426:	f7fe ffb9 	bl	800639c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	2380      	movs	r3, #128	; 0x80
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	58d4      	ldr	r4, [r2, r3]
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	2380      	movs	r3, #128	; 0x80
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	58d3      	ldr	r3, [r2, r3]
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	0011      	movs	r1, r2
 800743e:	0018      	movs	r0, r3
 8007440:	f7ff fb2e 	bl	8006aa0 <clust2sect>
 8007444:	0002      	movs	r2, r0
 8007446:	238b      	movs	r3, #139	; 0x8b
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	50e2      	str	r2, [r4, r3]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800744c:	2300      	movs	r3, #0
 800744e:	613b      	str	r3, [r7, #16]
 8007450:	e020      	b.n	8007494 <dir_next+0x1a4>
						dp->fs->wflag = 1;
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	2380      	movs	r3, #128	; 0x80
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	58d2      	ldr	r2, [r2, r3]
 800745a:	2381      	movs	r3, #129	; 0x81
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	2101      	movs	r1, #1
 8007460:	54d1      	strb	r1, [r2, r3]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	2380      	movs	r3, #128	; 0x80
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	58d3      	ldr	r3, [r2, r3]
 800746a:	0018      	movs	r0, r3
 800746c:	f7ff f9b0 	bl	80067d0 <sync_window>
 8007470:	1e03      	subs	r3, r0, #0
 8007472:	d001      	beq.n	8007478 <dir_next+0x188>
 8007474:	2301      	movs	r3, #1
 8007476:	e04e      	b.n	8007516 <dir_next+0x226>
						dp->fs->winsect++;
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	2380      	movs	r3, #128	; 0x80
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	58d3      	ldr	r3, [r2, r3]
 8007480:	228b      	movs	r2, #139	; 0x8b
 8007482:	0092      	lsls	r2, r2, #2
 8007484:	589a      	ldr	r2, [r3, r2]
 8007486:	1c51      	adds	r1, r2, #1
 8007488:	228b      	movs	r2, #139	; 0x8b
 800748a:	0092      	lsls	r2, r2, #2
 800748c:	5099      	str	r1, [r3, r2]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	3301      	adds	r3, #1
 8007492:	613b      	str	r3, [r7, #16]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	2380      	movs	r3, #128	; 0x80
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	58d3      	ldr	r3, [r2, r3]
 800749c:	4a21      	ldr	r2, [pc, #132]	; (8007524 <dir_next+0x234>)
 800749e:	5c9b      	ldrb	r3, [r3, r2]
 80074a0:	001a      	movs	r2, r3
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d8d4      	bhi.n	8007452 <dir_next+0x162>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	2380      	movs	r3, #128	; 0x80
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	58d2      	ldr	r2, [r2, r3]
 80074b0:	6879      	ldr	r1, [r7, #4]
 80074b2:	2380      	movs	r3, #128	; 0x80
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	58c9      	ldr	r1, [r1, r3]
 80074b8:	238b      	movs	r3, #139	; 0x8b
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	58c9      	ldr	r1, [r1, r3]
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	1ac9      	subs	r1, r1, r3
 80074c2:	238b      	movs	r3, #139	; 0x8b
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	50d1      	str	r1, [r2, r3]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	2383      	movs	r3, #131	; 0x83
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	6979      	ldr	r1, [r7, #20]
 80074d0:	50d1      	str	r1, [r2, r3]
				dp->sect = clust2sect(dp->fs, clst);
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	2380      	movs	r3, #128	; 0x80
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	58d3      	ldr	r3, [r2, r3]
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	0011      	movs	r1, r2
 80074de:	0018      	movs	r0, r3
 80074e0:	f7ff fade 	bl	8006aa0 <clust2sect>
 80074e4:	0001      	movs	r1, r0
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	2384      	movs	r3, #132	; 0x84
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	50d1      	str	r1, [r2, r3]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	b299      	uxth	r1, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a0a      	ldr	r2, [pc, #40]	; (8007520 <dir_next+0x230>)
 80074f6:	5299      	strh	r1, [r3, r2]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	2380      	movs	r3, #128	; 0x80
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	58d3      	ldr	r3, [r2, r3]
 8007500:	0019      	movs	r1, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	220f      	movs	r2, #15
 8007506:	4013      	ands	r3, r2
 8007508:	015b      	lsls	r3, r3, #5
 800750a:	18c9      	adds	r1, r1, r3
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	2385      	movs	r3, #133	; 0x85
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	50d1      	str	r1, [r2, r3]

	return FR_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	0018      	movs	r0, r3
 8007518:	46bd      	mov	sp, r7
 800751a:	b007      	add	sp, #28
 800751c:	bd90      	pop	{r4, r7, pc}
 800751e:	46c0      	nop			; (mov r8, r8)
 8007520:	00000206 	.word	0x00000206
 8007524:	00000202 	.word	0x00000202

08007528 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8007528:	b590      	push	{r4, r7, lr}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8007532:	230f      	movs	r3, #15
 8007534:	18fc      	adds	r4, r7, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2100      	movs	r1, #0
 800753a:	0018      	movs	r0, r3
 800753c:	f7ff fe28 	bl	8007190 <dir_sdi>
 8007540:	0003      	movs	r3, r0
 8007542:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8007544:	230f      	movs	r3, #15
 8007546:	18fb      	adds	r3, r7, r3
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d13d      	bne.n	80075ca <dir_alloc+0xa2>
		n = 0;
 800754e:	2300      	movs	r3, #0
 8007550:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	2380      	movs	r3, #128	; 0x80
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	58d0      	ldr	r0, [r2, r3]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	2384      	movs	r3, #132	; 0x84
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	58d3      	ldr	r3, [r2, r3]
 8007562:	220f      	movs	r2, #15
 8007564:	18bc      	adds	r4, r7, r2
 8007566:	0019      	movs	r1, r3
 8007568:	f7ff f98a 	bl	8006880 <move_window>
 800756c:	0003      	movs	r3, r0
 800756e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007570:	230f      	movs	r3, #15
 8007572:	18fb      	adds	r3, r7, r3
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d126      	bne.n	80075c8 <dir_alloc+0xa0>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	2385      	movs	r3, #133	; 0x85
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	58d3      	ldr	r3, [r2, r3]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2be5      	cmp	r3, #229	; 0xe5
 8007586:	d006      	beq.n	8007596 <dir_alloc+0x6e>
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	2385      	movs	r3, #133	; 0x85
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	58d3      	ldr	r3, [r2, r3]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d107      	bne.n	80075a6 <dir_alloc+0x7e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	3301      	adds	r3, #1
 800759a:	60bb      	str	r3, [r7, #8]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d102      	bne.n	80075aa <dir_alloc+0x82>
 80075a4:	e011      	b.n	80075ca <dir_alloc+0xa2>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80075a6:	2300      	movs	r3, #0
 80075a8:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80075aa:	230f      	movs	r3, #15
 80075ac:	18fc      	adds	r4, r7, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2101      	movs	r1, #1
 80075b2:	0018      	movs	r0, r3
 80075b4:	f7ff fe9c 	bl	80072f0 <dir_next>
 80075b8:	0003      	movs	r3, r0
 80075ba:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
 80075bc:	230f      	movs	r3, #15
 80075be:	18fb      	adds	r3, r7, r3
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d0c5      	beq.n	8007552 <dir_alloc+0x2a>
 80075c6:	e000      	b.n	80075ca <dir_alloc+0xa2>
			if (res != FR_OK) break;
 80075c8:	46c0      	nop			; (mov r8, r8)
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80075ca:	230f      	movs	r3, #15
 80075cc:	18fb      	adds	r3, r7, r3
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	2b04      	cmp	r3, #4
 80075d2:	d103      	bne.n	80075dc <dir_alloc+0xb4>
 80075d4:	230f      	movs	r3, #15
 80075d6:	18fb      	adds	r3, r7, r3
 80075d8:	2207      	movs	r2, #7
 80075da:	701a      	strb	r2, [r3, #0]
	return res;
 80075dc:	230f      	movs	r3, #15
 80075de:	18fb      	adds	r3, r7, r3
 80075e0:	781b      	ldrb	r3, [r3, #0]
}
 80075e2:	0018      	movs	r0, r3
 80075e4:	46bd      	mov	sp, r7
 80075e6:	b005      	add	sp, #20
 80075e8:	bd90      	pop	{r4, r7, pc}

080075ea <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b084      	sub	sp, #16
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	331b      	adds	r3, #27
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	021b      	lsls	r3, r3, #8
 80075fc:	b21a      	sxth	r2, r3
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	331a      	adds	r3, #26
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	b21b      	sxth	r3, r3
 8007606:	4313      	orrs	r3, r2
 8007608:	b21b      	sxth	r3, r3
 800760a:	b29b      	uxth	r3, r3
 800760c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	2380      	movs	r3, #128	; 0x80
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	5cd3      	ldrb	r3, [r2, r3]
 8007616:	2b03      	cmp	r3, #3
 8007618:	d10f      	bne.n	800763a <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	3315      	adds	r3, #21
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	021b      	lsls	r3, r3, #8
 8007622:	b21a      	sxth	r2, r3
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	3314      	adds	r3, #20
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	b21b      	sxth	r3, r3
 800762c:	4313      	orrs	r3, r2
 800762e:	b21b      	sxth	r3, r3
 8007630:	b29b      	uxth	r3, r3
 8007632:	041b      	lsls	r3, r3, #16
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	4313      	orrs	r3, r2
 8007638:	60fb      	str	r3, [r7, #12]

	return cl;
 800763a:	68fb      	ldr	r3, [r7, #12]
}
 800763c:	0018      	movs	r0, r3
 800763e:	46bd      	mov	sp, r7
 8007640:	b004      	add	sp, #16
 8007642:	bd80      	pop	{r7, pc}

08007644 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	331a      	adds	r3, #26
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	b2d2      	uxtb	r2, r2
 8007656:	701a      	strb	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	331b      	adds	r3, #27
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	b292      	uxth	r2, r2
 8007660:	0a12      	lsrs	r2, r2, #8
 8007662:	b292      	uxth	r2, r2
 8007664:	b2d2      	uxtb	r2, r2
 8007666:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3314      	adds	r3, #20
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	0c12      	lsrs	r2, r2, #16
 8007670:	b2d2      	uxtb	r2, r2
 8007672:	701a      	strb	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3315      	adds	r3, #21
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	0c12      	lsrs	r2, r2, #16
 800767c:	b292      	uxth	r2, r2
 800767e:	0a12      	lsrs	r2, r2, #8
 8007680:	b292      	uxth	r2, r2
 8007682:	b2d2      	uxtb	r2, r2
 8007684:	701a      	strb	r2, [r3, #0]
}
 8007686:	46c0      	nop			; (mov r8, r8)
 8007688:	46bd      	mov	sp, r7
 800768a:	b002      	add	sp, #8
 800768c:	bd80      	pop	{r7, pc}

0800768e <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800768e:	b590      	push	{r4, r7, lr}
 8007690:	b087      	sub	sp, #28
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007696:	2317      	movs	r3, #23
 8007698:	18fc      	adds	r4, r7, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2100      	movs	r1, #0
 800769e:	0018      	movs	r0, r3
 80076a0:	f7ff fd76 	bl	8007190 <dir_sdi>
 80076a4:	0003      	movs	r3, r0
 80076a6:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 80076a8:	2317      	movs	r3, #23
 80076aa:	18fb      	adds	r3, r7, r3
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <dir_find+0x2c>
 80076b2:	2317      	movs	r3, #23
 80076b4:	18fb      	adds	r3, r7, r3
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	e04e      	b.n	8007758 <dir_find+0xca>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	2380      	movs	r3, #128	; 0x80
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	58d0      	ldr	r0, [r2, r3]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	2384      	movs	r3, #132	; 0x84
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	58d3      	ldr	r3, [r2, r3]
 80076ca:	2217      	movs	r2, #23
 80076cc:	18bc      	adds	r4, r7, r2
 80076ce:	0019      	movs	r1, r3
 80076d0:	f7ff f8d6 	bl	8006880 <move_window>
 80076d4:	0003      	movs	r3, r0
 80076d6:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 80076d8:	2317      	movs	r3, #23
 80076da:	18fb      	adds	r3, r7, r3
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d134      	bne.n	800774c <dir_find+0xbe>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	2385      	movs	r3, #133	; 0x85
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	58d3      	ldr	r3, [r2, r3]
 80076ea:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80076ec:	230f      	movs	r3, #15
 80076ee:	18fb      	adds	r3, r7, r3
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	7812      	ldrb	r2, [r2, #0]
 80076f4:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80076f6:	230f      	movs	r3, #15
 80076f8:	18fb      	adds	r3, r7, r3
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d104      	bne.n	800770a <dir_find+0x7c>
 8007700:	2317      	movs	r3, #23
 8007702:	18fb      	adds	r3, r7, r3
 8007704:	2204      	movs	r2, #4
 8007706:	701a      	strb	r2, [r3, #0]
 8007708:	e023      	b.n	8007752 <dir_find+0xc4>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	330b      	adds	r3, #11
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	001a      	movs	r2, r3
 8007712:	2308      	movs	r3, #8
 8007714:	4013      	ands	r3, r2
 8007716:	d10a      	bne.n	800772e <dir_find+0xa0>
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	2386      	movs	r3, #134	; 0x86
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	58d1      	ldr	r1, [r2, r3]
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	220b      	movs	r2, #11
 8007724:	0018      	movs	r0, r3
 8007726:	f7fe fe51 	bl	80063cc <mem_cmp>
 800772a:	1e03      	subs	r3, r0, #0
 800772c:	d010      	beq.n	8007750 <dir_find+0xc2>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800772e:	2317      	movs	r3, #23
 8007730:	18fc      	adds	r4, r7, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2100      	movs	r1, #0
 8007736:	0018      	movs	r0, r3
 8007738:	f7ff fdda 	bl	80072f0 <dir_next>
 800773c:	0003      	movs	r3, r0
 800773e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 8007740:	2317      	movs	r3, #23
 8007742:	18fb      	adds	r3, r7, r3
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d0b7      	beq.n	80076ba <dir_find+0x2c>
 800774a:	e002      	b.n	8007752 <dir_find+0xc4>
		if (res != FR_OK) break;
 800774c:	46c0      	nop			; (mov r8, r8)
 800774e:	e000      	b.n	8007752 <dir_find+0xc4>
			break;
 8007750:	46c0      	nop			; (mov r8, r8)

	return res;
 8007752:	2317      	movs	r3, #23
 8007754:	18fb      	adds	r3, r7, r3
 8007756:	781b      	ldrb	r3, [r3, #0]
}
 8007758:	0018      	movs	r0, r3
 800775a:	46bd      	mov	sp, r7
 800775c:	b007      	add	sp, #28
 800775e:	bd90      	pop	{r4, r7, pc}

08007760 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007760:	b590      	push	{r4, r7, lr}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007768:	230f      	movs	r3, #15
 800776a:	18fc      	adds	r4, r7, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2101      	movs	r1, #1
 8007770:	0018      	movs	r0, r3
 8007772:	f7ff fed9 	bl	8007528 <dir_alloc>
 8007776:	0003      	movs	r3, r0
 8007778:	7023      	strb	r3, [r4, #0]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800777a:	230f      	movs	r3, #15
 800777c:	18fb      	adds	r3, r7, r3
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d130      	bne.n	80077e6 <dir_register+0x86>
		res = move_window(dp->fs, dp->sect);
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	2380      	movs	r3, #128	; 0x80
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	58d0      	ldr	r0, [r2, r3]
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	2384      	movs	r3, #132	; 0x84
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	58d3      	ldr	r3, [r2, r3]
 8007794:	220f      	movs	r2, #15
 8007796:	18bc      	adds	r4, r7, r2
 8007798:	0019      	movs	r1, r3
 800779a:	f7ff f871 	bl	8006880 <move_window>
 800779e:	0003      	movs	r3, r0
 80077a0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80077a2:	230f      	movs	r3, #15
 80077a4:	18fb      	adds	r3, r7, r3
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d11c      	bne.n	80077e6 <dir_register+0x86>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	2385      	movs	r3, #133	; 0x85
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	58d3      	ldr	r3, [r2, r3]
 80077b4:	2220      	movs	r2, #32
 80077b6:	2100      	movs	r1, #0
 80077b8:	0018      	movs	r0, r3
 80077ba:	f7fe fdef 	bl	800639c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	2385      	movs	r3, #133	; 0x85
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	58d0      	ldr	r0, [r2, r3]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	2386      	movs	r3, #134	; 0x86
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	58d3      	ldr	r3, [r2, r3]
 80077ce:	220b      	movs	r2, #11
 80077d0:	0019      	movs	r1, r3
 80077d2:	f7fe fdc7 	bl	8006364 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	2380      	movs	r3, #128	; 0x80
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	58d2      	ldr	r2, [r2, r3]
 80077de:	2381      	movs	r3, #129	; 0x81
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	2101      	movs	r1, #1
 80077e4:	54d1      	strb	r1, [r2, r3]
		}
	}

	return res;
 80077e6:	230f      	movs	r3, #15
 80077e8:	18fb      	adds	r3, r7, r3
 80077ea:	781b      	ldrb	r3, [r3, #0]
}
 80077ec:	0018      	movs	r0, r3
 80077ee:	46bd      	mov	sp, r7
 80077f0:	b005      	add	sp, #20
 80077f2:	bd90      	pop	{r4, r7, pc}

080077f4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	e002      	b.n	800780c <create_name+0x18>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3301      	adds	r3, #1
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	2b2f      	cmp	r3, #47	; 0x2f
 8007812:	d0f8      	beq.n	8007806 <create_name+0x12>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	2b5c      	cmp	r3, #92	; 0x5c
 800781a:	d0f4      	beq.n	8007806 <create_name+0x12>
	sfn = dp->fn;
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	2386      	movs	r3, #134	; 0x86
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	58d3      	ldr	r3, [r2, r3]
 8007824:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	220b      	movs	r2, #11
 800782a:	2120      	movs	r1, #32
 800782c:	0018      	movs	r0, r3
 800782e:	f7fe fdb5 	bl	800639c <mem_set>
	si = i = b = 0; ni = 8;
 8007832:	231f      	movs	r3, #31
 8007834:	18fb      	adds	r3, r7, r3
 8007836:	2200      	movs	r2, #0
 8007838:	701a      	strb	r2, [r3, #0]
 800783a:	2300      	movs	r3, #0
 800783c:	613b      	str	r3, [r7, #16]
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	617b      	str	r3, [r7, #20]
 8007842:	2308      	movs	r3, #8
 8007844:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	1c5a      	adds	r2, r3, #1
 800784a:	617a      	str	r2, [r7, #20]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	18d2      	adds	r2, r2, r3
 8007850:	231e      	movs	r3, #30
 8007852:	18fb      	adds	r3, r7, r3
 8007854:	7812      	ldrb	r2, [r2, #0]
 8007856:	701a      	strb	r2, [r3, #0]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8007858:	231e      	movs	r3, #30
 800785a:	18fb      	adds	r3, r7, r3
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	2b20      	cmp	r3, #32
 8007860:	d800      	bhi.n	8007864 <create_name+0x70>
 8007862:	e084      	b.n	800796e <create_name+0x17a>
 8007864:	231e      	movs	r3, #30
 8007866:	18fb      	adds	r3, r7, r3
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	2b2f      	cmp	r3, #47	; 0x2f
 800786c:	d100      	bne.n	8007870 <create_name+0x7c>
 800786e:	e07e      	b.n	800796e <create_name+0x17a>
 8007870:	231e      	movs	r3, #30
 8007872:	18fb      	adds	r3, r7, r3
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	2b5c      	cmp	r3, #92	; 0x5c
 8007878:	d100      	bne.n	800787c <create_name+0x88>
 800787a:	e078      	b.n	800796e <create_name+0x17a>
		if (c == '.' || i >= ni) {
 800787c:	231e      	movs	r3, #30
 800787e:	18fb      	adds	r3, r7, r3
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	2b2e      	cmp	r3, #46	; 0x2e
 8007884:	d003      	beq.n	800788e <create_name+0x9a>
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	429a      	cmp	r2, r3
 800788c:	d315      	bcc.n	80078ba <create_name+0xc6>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	2b08      	cmp	r3, #8
 8007892:	d104      	bne.n	800789e <create_name+0xaa>
 8007894:	231e      	movs	r3, #30
 8007896:	18fb      	adds	r3, r7, r3
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	2b2e      	cmp	r3, #46	; 0x2e
 800789c:	d001      	beq.n	80078a2 <create_name+0xae>
 800789e:	2306      	movs	r3, #6
 80078a0:	e0b0      	b.n	8007a04 <create_name+0x210>
			i = 8; ni = 11;
 80078a2:	2308      	movs	r3, #8
 80078a4:	613b      	str	r3, [r7, #16]
 80078a6:	230b      	movs	r3, #11
 80078a8:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 80078aa:	231f      	movs	r3, #31
 80078ac:	18fb      	adds	r3, r7, r3
 80078ae:	221f      	movs	r2, #31
 80078b0:	18ba      	adds	r2, r7, r2
 80078b2:	7812      	ldrb	r2, [r2, #0]
 80078b4:	0092      	lsls	r2, r2, #2
 80078b6:	701a      	strb	r2, [r3, #0]
 80078b8:	e058      	b.n	800796c <create_name+0x178>
		}
		if (c >= 0x80) {				/* Extended character? */
 80078ba:	231e      	movs	r3, #30
 80078bc:	18fb      	adds	r3, r7, r3
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	b25b      	sxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	da11      	bge.n	80078ea <create_name+0xf6>
			b |= 3;						/* Eliminate NT flag */
 80078c6:	231f      	movs	r3, #31
 80078c8:	18fb      	adds	r3, r7, r3
 80078ca:	221f      	movs	r2, #31
 80078cc:	18ba      	adds	r2, r7, r2
 80078ce:	7812      	ldrb	r2, [r2, #0]
 80078d0:	2103      	movs	r1, #3
 80078d2:	430a      	orrs	r2, r1
 80078d4:	701a      	strb	r2, [r3, #0]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80078d6:	231e      	movs	r3, #30
 80078d8:	18fb      	adds	r3, r7, r3
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	3b80      	subs	r3, #128	; 0x80
 80078de:	001a      	movs	r2, r3
 80078e0:	231e      	movs	r3, #30
 80078e2:	18fb      	adds	r3, r7, r3
 80078e4:	4949      	ldr	r1, [pc, #292]	; (8007a0c <create_name+0x218>)
 80078e6:	5c8a      	ldrb	r2, [r1, r2]
 80078e8:	701a      	strb	r2, [r3, #0]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 80078ea:	231e      	movs	r3, #30
 80078ec:	18fb      	adds	r3, r7, r3
 80078ee:	781a      	ldrb	r2, [r3, #0]
 80078f0:	4b47      	ldr	r3, [pc, #284]	; (8007a10 <create_name+0x21c>)
 80078f2:	0011      	movs	r1, r2
 80078f4:	0018      	movs	r0, r3
 80078f6:	f7fe fd8e 	bl	8006416 <chk_chr>
 80078fa:	1e03      	subs	r3, r0, #0
 80078fc:	d001      	beq.n	8007902 <create_name+0x10e>
				return FR_INVALID_NAME;
 80078fe:	2306      	movs	r3, #6
 8007900:	e080      	b.n	8007a04 <create_name+0x210>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8007902:	231e      	movs	r3, #30
 8007904:	18fb      	adds	r3, r7, r3
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b40      	cmp	r3, #64	; 0x40
 800790a:	d90d      	bls.n	8007928 <create_name+0x134>
 800790c:	231e      	movs	r3, #30
 800790e:	18fb      	adds	r3, r7, r3
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	2b5a      	cmp	r3, #90	; 0x5a
 8007914:	d808      	bhi.n	8007928 <create_name+0x134>
				b |= 2;
 8007916:	231f      	movs	r3, #31
 8007918:	18fb      	adds	r3, r7, r3
 800791a:	221f      	movs	r2, #31
 800791c:	18ba      	adds	r2, r7, r2
 800791e:	7812      	ldrb	r2, [r2, #0]
 8007920:	2102      	movs	r1, #2
 8007922:	430a      	orrs	r2, r1
 8007924:	701a      	strb	r2, [r3, #0]
 8007926:	e018      	b.n	800795a <create_name+0x166>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8007928:	231e      	movs	r3, #30
 800792a:	18fb      	adds	r3, r7, r3
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	2b60      	cmp	r3, #96	; 0x60
 8007930:	d913      	bls.n	800795a <create_name+0x166>
 8007932:	231e      	movs	r3, #30
 8007934:	18fb      	adds	r3, r7, r3
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	2b7a      	cmp	r3, #122	; 0x7a
 800793a:	d80e      	bhi.n	800795a <create_name+0x166>
					b |= 1; c -= 0x20;
 800793c:	231f      	movs	r3, #31
 800793e:	18fb      	adds	r3, r7, r3
 8007940:	221f      	movs	r2, #31
 8007942:	18ba      	adds	r2, r7, r2
 8007944:	7812      	ldrb	r2, [r2, #0]
 8007946:	2101      	movs	r1, #1
 8007948:	430a      	orrs	r2, r1
 800794a:	701a      	strb	r2, [r3, #0]
 800794c:	231e      	movs	r3, #30
 800794e:	18fb      	adds	r3, r7, r3
 8007950:	221e      	movs	r2, #30
 8007952:	18ba      	adds	r2, r7, r2
 8007954:	7812      	ldrb	r2, [r2, #0]
 8007956:	3a20      	subs	r2, #32
 8007958:	701a      	strb	r2, [r3, #0]
				}
			}
			sfn[i++] = c;
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	613a      	str	r2, [r7, #16]
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	18d3      	adds	r3, r2, r3
 8007964:	221e      	movs	r2, #30
 8007966:	18ba      	adds	r2, r7, r2
 8007968:	7812      	ldrb	r2, [r2, #0]
 800796a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800796c:	e76b      	b.n	8007846 <create_name+0x52>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	18d2      	adds	r2, r2, r3
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8007978:	231e      	movs	r3, #30
 800797a:	18fb      	adds	r3, r7, r3
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b20      	cmp	r3, #32
 8007980:	d801      	bhi.n	8007986 <create_name+0x192>
 8007982:	2204      	movs	r2, #4
 8007984:	e000      	b.n	8007988 <create_name+0x194>
 8007986:	2200      	movs	r2, #0
 8007988:	231e      	movs	r3, #30
 800798a:	18fb      	adds	r3, r7, r3
 800798c:	701a      	strb	r2, [r3, #0]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d101      	bne.n	8007998 <create_name+0x1a4>
 8007994:	2306      	movs	r3, #6
 8007996:	e035      	b.n	8007a04 <create_name+0x210>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	2be5      	cmp	r3, #229	; 0xe5
 800799e:	d102      	bne.n	80079a6 <create_name+0x1b2>
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	2205      	movs	r2, #5
 80079a4:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	d106      	bne.n	80079ba <create_name+0x1c6>
 80079ac:	231f      	movs	r3, #31
 80079ae:	18fb      	adds	r3, r7, r3
 80079b0:	221f      	movs	r2, #31
 80079b2:	18ba      	adds	r2, r7, r2
 80079b4:	7812      	ldrb	r2, [r2, #0]
 80079b6:	0092      	lsls	r2, r2, #2
 80079b8:	701a      	strb	r2, [r3, #0]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80079ba:	231f      	movs	r3, #31
 80079bc:	18fb      	adds	r3, r7, r3
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	2203      	movs	r2, #3
 80079c2:	4013      	ands	r3, r2
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d107      	bne.n	80079d8 <create_name+0x1e4>
 80079c8:	231e      	movs	r3, #30
 80079ca:	18fb      	adds	r3, r7, r3
 80079cc:	221e      	movs	r2, #30
 80079ce:	18ba      	adds	r2, r7, r2
 80079d0:	7812      	ldrb	r2, [r2, #0]
 80079d2:	2110      	movs	r1, #16
 80079d4:	430a      	orrs	r2, r1
 80079d6:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80079d8:	231f      	movs	r3, #31
 80079da:	18fb      	adds	r3, r7, r3
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	220c      	movs	r2, #12
 80079e0:	4013      	ands	r3, r2
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d107      	bne.n	80079f6 <create_name+0x202>
 80079e6:	231e      	movs	r3, #30
 80079e8:	18fb      	adds	r3, r7, r3
 80079ea:	221e      	movs	r2, #30
 80079ec:	18ba      	adds	r2, r7, r2
 80079ee:	7812      	ldrb	r2, [r2, #0]
 80079f0:	2108      	movs	r1, #8
 80079f2:	430a      	orrs	r2, r1
 80079f4:	701a      	strb	r2, [r3, #0]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	330b      	adds	r3, #11
 80079fa:	221e      	movs	r2, #30
 80079fc:	18ba      	adds	r2, r7, r2
 80079fe:	7812      	ldrb	r2, [r2, #0]
 8007a00:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007a02:	2300      	movs	r3, #0
#endif
}
 8007a04:	0018      	movs	r0, r3
 8007a06:	46bd      	mov	sp, r7
 8007a08:	b008      	add	sp, #32
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	0800c46c 	.word	0x0800c46c
 8007a10:	0800c228 	.word	0x0800c228

08007a14 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007a14:	b590      	push	{r4, r7, lr}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	2b2f      	cmp	r3, #47	; 0x2f
 8007a24:	d003      	beq.n	8007a2e <follow_path+0x1a>
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	2b5c      	cmp	r3, #92	; 0x5c
 8007a2c:	d102      	bne.n	8007a34 <follow_path+0x20>
		path++;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	3301      	adds	r3, #1
 8007a32:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	2382      	movs	r3, #130	; 0x82
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	50d1      	str	r1, [r2, r3]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	2b1f      	cmp	r3, #31
 8007a44:	d80e      	bhi.n	8007a64 <follow_path+0x50>
		res = dir_sdi(dp, 0);
 8007a46:	230f      	movs	r3, #15
 8007a48:	18fc      	adds	r4, r7, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	0018      	movs	r0, r3
 8007a50:	f7ff fb9e 	bl	8007190 <dir_sdi>
 8007a54:	0003      	movs	r3, r0
 8007a56:	7023      	strb	r3, [r4, #0]
		dp->dir = 0;
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	2385      	movs	r3, #133	; 0x85
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	2100      	movs	r1, #0
 8007a60:	50d1      	str	r1, [r2, r3]
 8007a62:	e05e      	b.n	8007b22 <follow_path+0x10e>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007a64:	230f      	movs	r3, #15
 8007a66:	18fc      	adds	r4, r7, r3
 8007a68:	003a      	movs	r2, r7
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	0011      	movs	r1, r2
 8007a6e:	0018      	movs	r0, r3
 8007a70:	f7ff fec0 	bl	80077f4 <create_name>
 8007a74:	0003      	movs	r3, r0
 8007a76:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007a78:	230f      	movs	r3, #15
 8007a7a:	18fb      	adds	r3, r7, r3
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d14a      	bne.n	8007b18 <follow_path+0x104>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8007a82:	230f      	movs	r3, #15
 8007a84:	18fc      	adds	r4, r7, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	0018      	movs	r0, r3
 8007a8a:	f7ff fe00 	bl	800768e <dir_find>
 8007a8e:	0003      	movs	r3, r0
 8007a90:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	2386      	movs	r3, #134	; 0x86
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	58d2      	ldr	r2, [r2, r3]
 8007a9a:	230e      	movs	r3, #14
 8007a9c:	18fb      	adds	r3, r7, r3
 8007a9e:	7ad2      	ldrb	r2, [r2, #11]
 8007aa0:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 8007aa2:	230f      	movs	r3, #15
 8007aa4:	18fb      	adds	r3, r7, r3
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00f      	beq.n	8007acc <follow_path+0xb8>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007aac:	230f      	movs	r3, #15
 8007aae:	18fb      	adds	r3, r7, r3
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	2b04      	cmp	r3, #4
 8007ab4:	d132      	bne.n	8007b1c <follow_path+0x108>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007ab6:	230e      	movs	r3, #14
 8007ab8:	18fb      	adds	r3, r7, r3
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	2204      	movs	r2, #4
 8007abe:	4013      	ands	r3, r2
 8007ac0:	d12c      	bne.n	8007b1c <follow_path+0x108>
 8007ac2:	230f      	movs	r3, #15
 8007ac4:	18fb      	adds	r3, r7, r3
 8007ac6:	2205      	movs	r2, #5
 8007ac8:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8007aca:	e027      	b.n	8007b1c <follow_path+0x108>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007acc:	230e      	movs	r3, #14
 8007ace:	18fb      	adds	r3, r7, r3
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	2204      	movs	r2, #4
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	d123      	bne.n	8007b20 <follow_path+0x10c>
			dir = dp->dir;						/* Follow the sub-directory */
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	2385      	movs	r3, #133	; 0x85
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	58d3      	ldr	r3, [r2, r3]
 8007ae0:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	330b      	adds	r3, #11
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	001a      	movs	r2, r3
 8007aea:	2310      	movs	r3, #16
 8007aec:	4013      	ands	r3, r2
 8007aee:	d104      	bne.n	8007afa <follow_path+0xe6>
				res = FR_NO_PATH; break;
 8007af0:	230f      	movs	r3, #15
 8007af2:	18fb      	adds	r3, r7, r3
 8007af4:	2205      	movs	r2, #5
 8007af6:	701a      	strb	r2, [r3, #0]
 8007af8:	e013      	b.n	8007b22 <follow_path+0x10e>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	2380      	movs	r3, #128	; 0x80
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	58d3      	ldr	r3, [r2, r3]
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	0011      	movs	r1, r2
 8007b06:	0018      	movs	r0, r3
 8007b08:	f7ff fd6f 	bl	80075ea <ld_clust>
 8007b0c:	0001      	movs	r1, r0
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	2382      	movs	r3, #130	; 0x82
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	50d1      	str	r1, [r2, r3]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007b16:	e7a5      	b.n	8007a64 <follow_path+0x50>
			if (res != FR_OK) break;
 8007b18:	46c0      	nop			; (mov r8, r8)
 8007b1a:	e002      	b.n	8007b22 <follow_path+0x10e>
				break;
 8007b1c:	46c0      	nop			; (mov r8, r8)
 8007b1e:	e000      	b.n	8007b22 <follow_path+0x10e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007b20:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 8007b22:	230f      	movs	r3, #15
 8007b24:	18fb      	adds	r3, r7, r3
 8007b26:	781b      	ldrb	r3, [r3, #0]
}
 8007b28:	0018      	movs	r0, r3
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	b005      	add	sp, #20
 8007b2e:	bd90      	pop	{r4, r7, pc}

08007b30 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	425b      	negs	r3, r3
 8007b3c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d031      	beq.n	8007baa <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	617b      	str	r3, [r7, #20]
 8007b4c:	e002      	b.n	8007b54 <get_ldnumber+0x24>
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	3301      	adds	r3, #1
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	2b20      	cmp	r3, #32
 8007b5a:	d903      	bls.n	8007b64 <get_ldnumber+0x34>
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	2b3a      	cmp	r3, #58	; 0x3a
 8007b62:	d1f4      	bne.n	8007b4e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	2b3a      	cmp	r3, #58	; 0x3a
 8007b6a:	d11c      	bne.n	8007ba6 <get_ldnumber+0x76>
			tp = *path;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	1c5a      	adds	r2, r3, #1
 8007b76:	60fa      	str	r2, [r7, #12]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	3b30      	subs	r3, #48	; 0x30
 8007b7c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2b09      	cmp	r3, #9
 8007b82:	d80e      	bhi.n	8007ba2 <get_ldnumber+0x72>
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d10a      	bne.n	8007ba2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d107      	bne.n	8007ba2 <get_ldnumber+0x72>
					vol = (int)i;
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	617b      	str	r3, [r7, #20]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	e002      	b.n	8007bac <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007baa:	693b      	ldr	r3, [r7, #16]
}
 8007bac:	0018      	movs	r0, r3
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	b006      	add	sp, #24
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	2381      	movs	r3, #129	; 0x81
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	54d1      	strb	r1, [r2, r3]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	238b      	movs	r3, #139	; 0x8b
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	2101      	movs	r1, #1
 8007bd0:	4249      	negs	r1, r1
 8007bd2:	50d1      	str	r1, [r2, r3]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	0011      	movs	r1, r2
 8007bda:	0018      	movs	r0, r3
 8007bdc:	f7fe fe50 	bl	8006880 <move_window>
 8007be0:	1e03      	subs	r3, r0, #0
 8007be2:	d001      	beq.n	8007be8 <check_fs+0x34>
		return 3;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e04b      	b.n	8007c80 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	33ff      	adds	r3, #255	; 0xff
 8007bec:	33ff      	adds	r3, #255	; 0xff
 8007bee:	3301      	adds	r3, #1
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	021b      	lsls	r3, r3, #8
 8007bf4:	b21a      	sxth	r2, r3
 8007bf6:	6879      	ldr	r1, [r7, #4]
 8007bf8:	23ff      	movs	r3, #255	; 0xff
 8007bfa:	005b      	lsls	r3, r3, #1
 8007bfc:	5ccb      	ldrb	r3, [r1, r3]
 8007bfe:	b21b      	sxth	r3, r3
 8007c00:	4313      	orrs	r3, r2
 8007c02:	b21b      	sxth	r3, r3
 8007c04:	4a20      	ldr	r2, [pc, #128]	; (8007c88 <check_fs+0xd4>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d001      	beq.n	8007c0e <check_fs+0x5a>
		return 2;
 8007c0a:	2302      	movs	r3, #2
 8007c0c:	e038      	b.n	8007c80 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	3336      	adds	r3, #54	; 0x36
 8007c12:	3303      	adds	r3, #3
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	061a      	lsls	r2, r3, #24
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	3336      	adds	r3, #54	; 0x36
 8007c1c:	3302      	adds	r3, #2
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	041b      	lsls	r3, r3, #16
 8007c22:	4313      	orrs	r3, r2
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	3236      	adds	r2, #54	; 0x36
 8007c28:	3201      	adds	r2, #1
 8007c2a:	7812      	ldrb	r2, [r2, #0]
 8007c2c:	0212      	lsls	r2, r2, #8
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	2136      	movs	r1, #54	; 0x36
 8007c34:	5c52      	ldrb	r2, [r2, r1]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	021b      	lsls	r3, r3, #8
 8007c3a:	0a1b      	lsrs	r3, r3, #8
 8007c3c:	4a13      	ldr	r2, [pc, #76]	; (8007c8c <check_fs+0xd8>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d101      	bne.n	8007c46 <check_fs+0x92>
		return 0;
 8007c42:	2300      	movs	r3, #0
 8007c44:	e01c      	b.n	8007c80 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	3352      	adds	r3, #82	; 0x52
 8007c4a:	3303      	adds	r3, #3
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	061a      	lsls	r2, r3, #24
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	3352      	adds	r3, #82	; 0x52
 8007c54:	3302      	adds	r3, #2
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	041b      	lsls	r3, r3, #16
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	3252      	adds	r2, #82	; 0x52
 8007c60:	3201      	adds	r2, #1
 8007c62:	7812      	ldrb	r2, [r2, #0]
 8007c64:	0212      	lsls	r2, r2, #8
 8007c66:	4313      	orrs	r3, r2
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	2152      	movs	r1, #82	; 0x52
 8007c6c:	5c52      	ldrb	r2, [r2, r1]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	021b      	lsls	r3, r3, #8
 8007c72:	0a1b      	lsrs	r3, r3, #8
 8007c74:	4a05      	ldr	r2, [pc, #20]	; (8007c8c <check_fs+0xd8>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d101      	bne.n	8007c7e <check_fs+0xca>
		return 0;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	e000      	b.n	8007c80 <check_fs+0xcc>

	return 1;
 8007c7e:	2301      	movs	r3, #1
}
 8007c80:	0018      	movs	r0, r3
 8007c82:	46bd      	mov	sp, r7
 8007c84:	b002      	add	sp, #8
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	ffffaa55 	.word	0xffffaa55
 8007c8c:	00544146 	.word	0x00544146

08007c90 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007c90:	b590      	push	{r4, r7, lr}
 8007c92:	b097      	sub	sp, #92	; 0x5c
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	1dfb      	adds	r3, r7, #7
 8007c9c:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	0018      	movs	r0, r3
 8007ca8:	f7ff ff42 	bl	8007b30 <get_ldnumber>
 8007cac:	0003      	movs	r3, r0
 8007cae:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	da01      	bge.n	8007cba <find_volume+0x2a>
 8007cb6:	230b      	movs	r3, #11
 8007cb8:	e2f7      	b.n	80082aa <find_volume+0x61a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007cba:	4bd1      	ldr	r3, [pc, #836]	; (8008000 <find_volume+0x370>)
 8007cbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007cbe:	0092      	lsls	r2, r2, #2
 8007cc0:	58d3      	ldr	r3, [r2, r3]
 8007cc2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <find_volume+0x3e>
 8007cca:	230c      	movs	r3, #12
 8007ccc:	e2ed      	b.n	80082aa <find_volume+0x61a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cd2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8007cd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cd6:	2380      	movs	r3, #128	; 0x80
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	5cd3      	ldrb	r3, [r2, r3]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d01d      	beq.n	8007d1c <find_volume+0x8c>
		stat = disk_status(fs->drv);
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce2:	4ac8      	ldr	r2, [pc, #800]	; (8008004 <find_volume+0x374>)
 8007ce4:	5c9b      	ldrb	r3, [r3, r2]
 8007ce6:	2237      	movs	r2, #55	; 0x37
 8007ce8:	18bc      	adds	r4, r7, r2
 8007cea:	0018      	movs	r0, r3
 8007cec:	f7fe fa68 	bl	80061c0 <disk_status>
 8007cf0:	0003      	movs	r3, r0
 8007cf2:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007cf4:	2337      	movs	r3, #55	; 0x37
 8007cf6:	18fb      	adds	r3, r7, r3
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	d10d      	bne.n	8007d1c <find_volume+0x8c>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8007d00:	1dfb      	adds	r3, r7, #7
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d007      	beq.n	8007d18 <find_volume+0x88>
 8007d08:	2337      	movs	r3, #55	; 0x37
 8007d0a:	18fb      	adds	r3, r7, r3
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	2204      	movs	r2, #4
 8007d10:	4013      	ands	r3, r2
 8007d12:	d001      	beq.n	8007d18 <find_volume+0x88>
				return FR_WRITE_PROTECTED;
 8007d14:	230a      	movs	r3, #10
 8007d16:	e2c8      	b.n	80082aa <find_volume+0x61a>
			return FR_OK;				/* The file system object is valid */
 8007d18:	2300      	movs	r3, #0
 8007d1a:	e2c6      	b.n	80082aa <find_volume+0x61a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007d1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d1e:	2380      	movs	r3, #128	; 0x80
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	2100      	movs	r1, #0
 8007d24:	54d1      	strb	r1, [r2, r3]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d28:	b2d9      	uxtb	r1, r3
 8007d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2c:	4ab5      	ldr	r2, [pc, #724]	; (8008004 <find_volume+0x374>)
 8007d2e:	5499      	strb	r1, [r3, r2]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d32:	4ab4      	ldr	r2, [pc, #720]	; (8008004 <find_volume+0x374>)
 8007d34:	5c9b      	ldrb	r3, [r3, r2]
 8007d36:	2237      	movs	r2, #55	; 0x37
 8007d38:	18bc      	adds	r4, r7, r2
 8007d3a:	0018      	movs	r0, r3
 8007d3c:	f7fe fa62 	bl	8006204 <disk_initialize>
 8007d40:	0003      	movs	r3, r0
 8007d42:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007d44:	2337      	movs	r3, #55	; 0x37
 8007d46:	18fb      	adds	r3, r7, r3
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	d001      	beq.n	8007d54 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007d50:	2303      	movs	r3, #3
 8007d52:	e2aa      	b.n	80082aa <find_volume+0x61a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007d54:	1dfb      	adds	r3, r7, #7
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d007      	beq.n	8007d6c <find_volume+0xdc>
 8007d5c:	2337      	movs	r3, #55	; 0x37
 8007d5e:	18fb      	adds	r3, r7, r3
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	2204      	movs	r2, #4
 8007d64:	4013      	ands	r3, r2
 8007d66:	d001      	beq.n	8007d6c <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8007d68:	230a      	movs	r3, #10
 8007d6a:	e29e      	b.n	80082aa <find_volume+0x61a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007d70:	2357      	movs	r3, #87	; 0x57
 8007d72:	18fc      	adds	r4, r7, r3
 8007d74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d78:	0011      	movs	r1, r2
 8007d7a:	0018      	movs	r0, r3
 8007d7c:	f7ff ff1a 	bl	8007bb4 <check_fs>
 8007d80:	0003      	movs	r3, r0
 8007d82:	7023      	strb	r3, [r4, #0]
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007d84:	2357      	movs	r3, #87	; 0x57
 8007d86:	18fb      	adds	r3, r7, r3
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d156      	bne.n	8007e3c <find_volume+0x1ac>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007d8e:	2300      	movs	r3, #0
 8007d90:	643b      	str	r3, [r7, #64]	; 0x40
 8007d92:	e027      	b.n	8007de4 <find_volume+0x154>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8007d94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d98:	011b      	lsls	r3, r3, #4
 8007d9a:	33bf      	adds	r3, #191	; 0xbf
 8007d9c:	33ff      	adds	r3, #255	; 0xff
 8007d9e:	18d3      	adds	r3, r2, r3
 8007da0:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	3304      	adds	r3, #4
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d012      	beq.n	8007dd2 <find_volume+0x142>
 8007dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dae:	330b      	adds	r3, #11
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	061a      	lsls	r2, r3, #24
 8007db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db6:	330a      	adds	r3, #10
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	041b      	lsls	r3, r3, #16
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dc0:	3209      	adds	r2, #9
 8007dc2:	7812      	ldrb	r2, [r2, #0]
 8007dc4:	0212      	lsls	r2, r2, #8
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dca:	3208      	adds	r2, #8
 8007dcc:	7812      	ldrb	r2, [r2, #0]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	e000      	b.n	8007dd4 <find_volume+0x144>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	2214      	movs	r2, #20
 8007dd6:	18ba      	adds	r2, r7, r2
 8007dd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dda:	0089      	lsls	r1, r1, #2
 8007ddc:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007de0:	3301      	adds	r3, #1
 8007de2:	643b      	str	r3, [r7, #64]	; 0x40
 8007de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d9d4      	bls.n	8007d94 <find_volume+0x104>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8007dea:	2300      	movs	r3, #0
 8007dec:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d002      	beq.n	8007dfa <find_volume+0x16a>
 8007df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007df6:	3b01      	subs	r3, #1
 8007df8:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8007dfa:	2314      	movs	r3, #20
 8007dfc:	18fb      	adds	r3, r7, r3
 8007dfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e00:	0092      	lsls	r2, r2, #2
 8007e02:	58d3      	ldr	r3, [r2, r3]
 8007e04:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8007e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d008      	beq.n	8007e1e <find_volume+0x18e>
 8007e0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e10:	0011      	movs	r1, r2
 8007e12:	0018      	movs	r0, r3
 8007e14:	f7ff fece 	bl	8007bb4 <check_fs>
 8007e18:	0003      	movs	r3, r0
 8007e1a:	001a      	movs	r2, r3
 8007e1c:	e000      	b.n	8007e20 <find_volume+0x190>
 8007e1e:	2202      	movs	r2, #2
 8007e20:	2357      	movs	r3, #87	; 0x57
 8007e22:	18fb      	adds	r3, r7, r3
 8007e24:	701a      	strb	r2, [r3, #0]
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007e26:	2357      	movs	r3, #87	; 0x57
 8007e28:	18fb      	adds	r3, r7, r3
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d005      	beq.n	8007e3c <find_volume+0x1ac>
 8007e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e32:	3301      	adds	r3, #1
 8007e34:	643b      	str	r3, [r7, #64]	; 0x40
 8007e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e38:	2b03      	cmp	r3, #3
 8007e3a:	d9de      	bls.n	8007dfa <find_volume+0x16a>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007e3c:	2357      	movs	r3, #87	; 0x57
 8007e3e:	18fb      	adds	r3, r7, r3
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	d101      	bne.n	8007e4a <find_volume+0x1ba>
 8007e46:	2301      	movs	r3, #1
 8007e48:	e22f      	b.n	80082aa <find_volume+0x61a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007e4a:	2357      	movs	r3, #87	; 0x57
 8007e4c:	18fb      	adds	r3, r7, r3
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <find_volume+0x1c8>
 8007e54:	230d      	movs	r3, #13
 8007e56:	e228      	b.n	80082aa <find_volume+0x61a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5a:	7b1b      	ldrb	r3, [r3, #12]
 8007e5c:	021b      	lsls	r3, r3, #8
 8007e5e:	b21a      	sxth	r2, r3
 8007e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e62:	7adb      	ldrb	r3, [r3, #11]
 8007e64:	b21b      	sxth	r3, r3
 8007e66:	4313      	orrs	r3, r2
 8007e68:	b21a      	sxth	r2, r3
 8007e6a:	2380      	movs	r3, #128	; 0x80
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d001      	beq.n	8007e76 <find_volume+0x1e6>
		return FR_NO_FILESYSTEM;
 8007e72:	230d      	movs	r3, #13
 8007e74:	e219      	b.n	80082aa <find_volume+0x61a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e78:	7ddb      	ldrb	r3, [r3, #23]
 8007e7a:	021b      	lsls	r3, r3, #8
 8007e7c:	b21a      	sxth	r2, r3
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e80:	7d9b      	ldrb	r3, [r3, #22]
 8007e82:	b21b      	sxth	r3, r3
 8007e84:	4313      	orrs	r3, r2
 8007e86:	b21b      	sxth	r3, r3
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d112      	bne.n	8007eb8 <find_volume+0x228>
 8007e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e94:	2227      	movs	r2, #39	; 0x27
 8007e96:	5c9b      	ldrb	r3, [r3, r2]
 8007e98:	061a      	lsls	r2, r3, #24
 8007e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9c:	2126      	movs	r1, #38	; 0x26
 8007e9e:	5c5b      	ldrb	r3, [r3, r1]
 8007ea0:	041b      	lsls	r3, r3, #16
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ea6:	2125      	movs	r1, #37	; 0x25
 8007ea8:	5c52      	ldrb	r2, [r2, r1]
 8007eaa:	0212      	lsls	r2, r2, #8
 8007eac:	4313      	orrs	r3, r2
 8007eae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eb0:	2124      	movs	r1, #36	; 0x24
 8007eb2:	5c52      	ldrb	r2, [r2, r1]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8007eb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eba:	2386      	movs	r3, #134	; 0x86
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007ec0:	50d1      	str	r1, [r2, r3]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec4:	7c19      	ldrb	r1, [r3, #16]
 8007ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec8:	4a4f      	ldr	r2, [pc, #316]	; (8008008 <find_volume+0x378>)
 8007eca:	5499      	strb	r1, [r3, r2]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ece:	4a4e      	ldr	r2, [pc, #312]	; (8008008 <find_volume+0x378>)
 8007ed0:	5c9b      	ldrb	r3, [r3, r2]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d006      	beq.n	8007ee4 <find_volume+0x254>
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed8:	4a4b      	ldr	r2, [pc, #300]	; (8008008 <find_volume+0x378>)
 8007eda:	5c9b      	ldrb	r3, [r3, r2]
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d001      	beq.n	8007ee4 <find_volume+0x254>
		return FR_NO_FILESYSTEM;
 8007ee0:	230d      	movs	r3, #13
 8007ee2:	e1e2      	b.n	80082aa <find_volume+0x61a>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee6:	4a48      	ldr	r2, [pc, #288]	; (8008008 <find_volume+0x378>)
 8007ee8:	5c9b      	ldrb	r3, [r3, r2]
 8007eea:	001a      	movs	r2, r3
 8007eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eee:	4353      	muls	r3, r2
 8007ef0:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef4:	7b59      	ldrb	r1, [r3, #13]
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef8:	4a44      	ldr	r2, [pc, #272]	; (800800c <find_volume+0x37c>)
 8007efa:	5499      	strb	r1, [r3, r2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efe:	4a43      	ldr	r2, [pc, #268]	; (800800c <find_volume+0x37c>)
 8007f00:	5c9b      	ldrb	r3, [r3, r2]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d009      	beq.n	8007f1a <find_volume+0x28a>
 8007f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f08:	4a40      	ldr	r2, [pc, #256]	; (800800c <find_volume+0x37c>)
 8007f0a:	5c9b      	ldrb	r3, [r3, r2]
 8007f0c:	0019      	movs	r1, r3
 8007f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f10:	4a3e      	ldr	r2, [pc, #248]	; (800800c <find_volume+0x37c>)
 8007f12:	5c9b      	ldrb	r3, [r3, r2]
 8007f14:	3b01      	subs	r3, #1
 8007f16:	400b      	ands	r3, r1
 8007f18:	d001      	beq.n	8007f1e <find_volume+0x28e>
		return FR_NO_FILESYSTEM;
 8007f1a:	230d      	movs	r3, #13
 8007f1c:	e1c5      	b.n	80082aa <find_volume+0x61a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f20:	7c9b      	ldrb	r3, [r3, #18]
 8007f22:	021b      	lsls	r3, r3, #8
 8007f24:	b21a      	sxth	r2, r3
 8007f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f28:	7c5b      	ldrb	r3, [r3, #17]
 8007f2a:	b21b      	sxth	r3, r3
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	b21b      	sxth	r3, r3
 8007f30:	b299      	uxth	r1, r3
 8007f32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f34:	2382      	movs	r3, #130	; 0x82
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	52d1      	strh	r1, [r2, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f3c:	2382      	movs	r3, #130	; 0x82
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	5ad3      	ldrh	r3, [r2, r3]
 8007f42:	220f      	movs	r2, #15
 8007f44:	4013      	ands	r3, r2
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <find_volume+0x2c0>
		return FR_NO_FILESYSTEM;
 8007f4c:	230d      	movs	r3, #13
 8007f4e:	e1ac      	b.n	80082aa <find_volume+0x61a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f52:	7d1b      	ldrb	r3, [r3, #20]
 8007f54:	021b      	lsls	r3, r3, #8
 8007f56:	b21a      	sxth	r2, r3
 8007f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5a:	7cdb      	ldrb	r3, [r3, #19]
 8007f5c:	b21b      	sxth	r3, r3
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	b21b      	sxth	r3, r3
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d112      	bne.n	8007f92 <find_volume+0x302>
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6e:	2223      	movs	r2, #35	; 0x23
 8007f70:	5c9b      	ldrb	r3, [r3, r2]
 8007f72:	061a      	lsls	r2, r3, #24
 8007f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f76:	2122      	movs	r1, #34	; 0x22
 8007f78:	5c5b      	ldrb	r3, [r3, r1]
 8007f7a:	041b      	lsls	r3, r3, #16
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f80:	2121      	movs	r1, #33	; 0x21
 8007f82:	5c52      	ldrb	r2, [r2, r1]
 8007f84:	0212      	lsls	r2, r2, #8
 8007f86:	4313      	orrs	r3, r2
 8007f88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f8a:	2120      	movs	r1, #32
 8007f8c:	5c52      	ldrb	r2, [r2, r1]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8007f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f94:	7bdb      	ldrb	r3, [r3, #15]
 8007f96:	021b      	lsls	r3, r3, #8
 8007f98:	b21a      	sxth	r2, r3
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9c:	7b9b      	ldrb	r3, [r3, #14]
 8007f9e:	b21b      	sxth	r3, r3
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	b21a      	sxth	r2, r3
 8007fa4:	232e      	movs	r3, #46	; 0x2e
 8007fa6:	18fb      	adds	r3, r7, r3
 8007fa8:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8007faa:	232e      	movs	r3, #46	; 0x2e
 8007fac:	18fb      	adds	r3, r7, r3
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d101      	bne.n	8007fb8 <find_volume+0x328>
 8007fb4:	230d      	movs	r3, #13
 8007fb6:	e178      	b.n	80082aa <find_volume+0x61a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007fb8:	232e      	movs	r3, #46	; 0x2e
 8007fba:	18fb      	adds	r3, r7, r3
 8007fbc:	881a      	ldrh	r2, [r3, #0]
 8007fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fc0:	18d3      	adds	r3, r2, r3
 8007fc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007fc4:	2282      	movs	r2, #130	; 0x82
 8007fc6:	0092      	lsls	r2, r2, #2
 8007fc8:	5a8a      	ldrh	r2, [r1, r2]
 8007fca:	0912      	lsrs	r2, r2, #4
 8007fcc:	b292      	uxth	r2, r2
 8007fce:	189b      	adds	r3, r3, r2
 8007fd0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007fd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d201      	bcs.n	8007fde <find_volume+0x34e>
 8007fda:	230d      	movs	r3, #13
 8007fdc:	e165      	b.n	80082aa <find_volume+0x61a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007fde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	1ad0      	subs	r0, r2, r3
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe6:	4a09      	ldr	r2, [pc, #36]	; (800800c <find_volume+0x37c>)
 8007fe8:	5c9b      	ldrb	r3, [r3, r2]
 8007fea:	0019      	movs	r1, r3
 8007fec:	f7f8 f88c 	bl	8000108 <__udivsi3>
 8007ff0:	0003      	movs	r3, r0
 8007ff2:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10a      	bne.n	8008010 <find_volume+0x380>
 8007ffa:	230d      	movs	r3, #13
 8007ffc:	e155      	b.n	80082aa <find_volume+0x61a>
 8007ffe:	46c0      	nop			; (mov r8, r8)
 8008000:	200000a0 	.word	0x200000a0
 8008004:	00000201 	.word	0x00000201
 8008008:	00000203 	.word	0x00000203
 800800c:	00000202 	.word	0x00000202
	fmt = FS_FAT12;
 8008010:	2357      	movs	r3, #87	; 0x57
 8008012:	18fb      	adds	r3, r7, r3
 8008014:	2201      	movs	r2, #1
 8008016:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8008018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801a:	4aa6      	ldr	r2, [pc, #664]	; (80082b4 <find_volume+0x624>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d903      	bls.n	8008028 <find_volume+0x398>
 8008020:	2357      	movs	r3, #87	; 0x57
 8008022:	18fb      	adds	r3, r7, r3
 8008024:	2202      	movs	r2, #2
 8008026:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802a:	4aa3      	ldr	r2, [pc, #652]	; (80082b8 <find_volume+0x628>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d903      	bls.n	8008038 <find_volume+0x3a8>
 8008030:	2357      	movs	r3, #87	; 0x57
 8008032:	18fb      	adds	r3, r7, r3
 8008034:	2203      	movs	r2, #3
 8008036:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803a:	1c99      	adds	r1, r3, #2
 800803c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800803e:	2385      	movs	r3, #133	; 0x85
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	50d1      	str	r1, [r2, r3]
	fs->volbase = bsect;								/* Volume start sector */
 8008044:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008046:	2387      	movs	r3, #135	; 0x87
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800804c:	50d1      	str	r1, [r2, r3]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800804e:	232e      	movs	r3, #46	; 0x2e
 8008050:	18fb      	adds	r3, r7, r3
 8008052:	881a      	ldrh	r2, [r3, #0]
 8008054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008056:	18d1      	adds	r1, r2, r3
 8008058:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800805a:	2388      	movs	r3, #136	; 0x88
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	50d1      	str	r1, [r2, r3]
	fs->database = bsect + sysect;						/* Data start sector */
 8008060:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008064:	18d1      	adds	r1, r2, r3
 8008066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008068:	238a      	movs	r3, #138	; 0x8a
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	50d1      	str	r1, [r2, r3]
	if (fmt == FS_FAT32) {
 800806e:	2357      	movs	r3, #87	; 0x57
 8008070:	18fb      	adds	r3, r7, r3
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	2b03      	cmp	r3, #3
 8008076:	d125      	bne.n	80080c4 <find_volume+0x434>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8008078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800807a:	2382      	movs	r3, #130	; 0x82
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	5ad3      	ldrh	r3, [r2, r3]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d001      	beq.n	8008088 <find_volume+0x3f8>
 8008084:	230d      	movs	r3, #13
 8008086:	e110      	b.n	80082aa <find_volume+0x61a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8008088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808a:	222f      	movs	r2, #47	; 0x2f
 800808c:	5c9b      	ldrb	r3, [r3, r2]
 800808e:	061a      	lsls	r2, r3, #24
 8008090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008092:	212e      	movs	r1, #46	; 0x2e
 8008094:	5c5b      	ldrb	r3, [r3, r1]
 8008096:	041b      	lsls	r3, r3, #16
 8008098:	4313      	orrs	r3, r2
 800809a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800809c:	212d      	movs	r1, #45	; 0x2d
 800809e:	5c52      	ldrb	r2, [r2, r1]
 80080a0:	0212      	lsls	r2, r2, #8
 80080a2:	4313      	orrs	r3, r2
 80080a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080a6:	212c      	movs	r1, #44	; 0x2c
 80080a8:	5c52      	ldrb	r2, [r2, r1]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	0019      	movs	r1, r3
 80080ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080b0:	2389      	movs	r3, #137	; 0x89
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	50d1      	str	r1, [r2, r3]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80080b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080b8:	2385      	movs	r3, #133	; 0x85
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	58d3      	ldr	r3, [r2, r3]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	647b      	str	r3, [r7, #68]	; 0x44
 80080c2:	e02c      	b.n	800811e <find_volume+0x48e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80080c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080c6:	2382      	movs	r3, #130	; 0x82
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	5ad3      	ldrh	r3, [r2, r3]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d101      	bne.n	80080d4 <find_volume+0x444>
 80080d0:	230d      	movs	r3, #13
 80080d2:	e0ea      	b.n	80082aa <find_volume+0x61a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80080d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080d6:	2388      	movs	r3, #136	; 0x88
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	58d2      	ldr	r2, [r2, r3]
 80080dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080de:	18d1      	adds	r1, r2, r3
 80080e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080e2:	2389      	movs	r3, #137	; 0x89
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	50d1      	str	r1, [r2, r3]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80080e8:	2357      	movs	r3, #87	; 0x57
 80080ea:	18fb      	adds	r3, r7, r3
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d105      	bne.n	80080fe <find_volume+0x46e>
 80080f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080f4:	2385      	movs	r3, #133	; 0x85
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	58d3      	ldr	r3, [r2, r3]
 80080fa:	005b      	lsls	r3, r3, #1
 80080fc:	e00e      	b.n	800811c <find_volume+0x48c>
 80080fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008100:	2385      	movs	r3, #133	; 0x85
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	58d2      	ldr	r2, [r2, r3]
 8008106:	0013      	movs	r3, r2
 8008108:	005b      	lsls	r3, r3, #1
 800810a:	189b      	adds	r3, r3, r2
 800810c:	085a      	lsrs	r2, r3, #1
 800810e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008110:	2385      	movs	r3, #133	; 0x85
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	58cb      	ldr	r3, [r1, r3]
 8008116:	2101      	movs	r1, #1
 8008118:	400b      	ands	r3, r1
 800811a:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800811c:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800811e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008120:	2386      	movs	r3, #134	; 0x86
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	58d2      	ldr	r2, [r2, r3]
 8008126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008128:	4964      	ldr	r1, [pc, #400]	; (80082bc <find_volume+0x62c>)
 800812a:	468c      	mov	ip, r1
 800812c:	4463      	add	r3, ip
 800812e:	0a5b      	lsrs	r3, r3, #9
 8008130:	429a      	cmp	r2, r3
 8008132:	d201      	bcs.n	8008138 <find_volume+0x4a8>
		return FR_NO_FILESYSTEM;
 8008134:	230d      	movs	r3, #13
 8008136:	e0b8      	b.n	80082aa <find_volume+0x61a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8008138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800813a:	2384      	movs	r3, #132	; 0x84
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	2101      	movs	r1, #1
 8008140:	4249      	negs	r1, r1
 8008142:	50d1      	str	r1, [r2, r3]
 8008144:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008146:	2384      	movs	r3, #132	; 0x84
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	58d1      	ldr	r1, [r2, r3]
 800814c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800814e:	2383      	movs	r3, #131	; 0x83
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	50d1      	str	r1, [r2, r3]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8008154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008156:	4a5a      	ldr	r2, [pc, #360]	; (80082c0 <find_volume+0x630>)
 8008158:	2180      	movs	r1, #128	; 0x80
 800815a:	5499      	strb	r1, [r3, r2]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800815c:	2357      	movs	r3, #87	; 0x57
 800815e:	18fb      	adds	r3, r7, r3
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	2b03      	cmp	r3, #3
 8008164:	d000      	beq.n	8008168 <find_volume+0x4d8>
 8008166:	e089      	b.n	800827c <find_volume+0x5ec>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8008168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816a:	2231      	movs	r2, #49	; 0x31
 800816c:	5c9b      	ldrb	r3, [r3, r2]
 800816e:	021b      	lsls	r3, r3, #8
 8008170:	b21a      	sxth	r2, r3
 8008172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008174:	2130      	movs	r1, #48	; 0x30
 8008176:	5c5b      	ldrb	r3, [r3, r1]
 8008178:	b21b      	sxth	r3, r3
 800817a:	4313      	orrs	r3, r2
 800817c:	b21b      	sxth	r3, r3
 800817e:	2b01      	cmp	r3, #1
 8008180:	d000      	beq.n	8008184 <find_volume+0x4f4>
 8008182:	e07b      	b.n	800827c <find_volume+0x5ec>
		&& move_window(fs, bsect + 1) == FR_OK)
 8008184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008186:	1c5a      	adds	r2, r3, #1
 8008188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818a:	0011      	movs	r1, r2
 800818c:	0018      	movs	r0, r3
 800818e:	f7fe fb77 	bl	8006880 <move_window>
 8008192:	1e03      	subs	r3, r0, #0
 8008194:	d172      	bne.n	800827c <find_volume+0x5ec>
	{
		fs->fsi_flag = 0;
 8008196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008198:	4a49      	ldr	r2, [pc, #292]	; (80082c0 <find_volume+0x630>)
 800819a:	2100      	movs	r1, #0
 800819c:	5499      	strb	r1, [r3, r2]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800819e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a0:	4a46      	ldr	r2, [pc, #280]	; (80082bc <find_volume+0x62c>)
 80081a2:	5c9b      	ldrb	r3, [r3, r2]
 80081a4:	021b      	lsls	r3, r3, #8
 80081a6:	b21a      	sxth	r2, r3
 80081a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081aa:	23ff      	movs	r3, #255	; 0xff
 80081ac:	005b      	lsls	r3, r3, #1
 80081ae:	5ccb      	ldrb	r3, [r1, r3]
 80081b0:	b21b      	sxth	r3, r3
 80081b2:	4313      	orrs	r3, r2
 80081b4:	b21b      	sxth	r3, r3
 80081b6:	4a43      	ldr	r2, [pc, #268]	; (80082c4 <find_volume+0x634>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d15f      	bne.n	800827c <find_volume+0x5ec>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80081bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081be:	78db      	ldrb	r3, [r3, #3]
 80081c0:	061a      	lsls	r2, r3, #24
 80081c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c4:	789b      	ldrb	r3, [r3, #2]
 80081c6:	041b      	lsls	r3, r3, #16
 80081c8:	4313      	orrs	r3, r2
 80081ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081cc:	7852      	ldrb	r2, [r2, #1]
 80081ce:	0212      	lsls	r2, r2, #8
 80081d0:	4313      	orrs	r3, r2
 80081d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081d4:	7812      	ldrb	r2, [r2, #0]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	4a3b      	ldr	r2, [pc, #236]	; (80082c8 <find_volume+0x638>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d14e      	bne.n	800827c <find_volume+0x5ec>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80081de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081e0:	23e8      	movs	r3, #232	; 0xe8
 80081e2:	33ff      	adds	r3, #255	; 0xff
 80081e4:	5cd3      	ldrb	r3, [r2, r3]
 80081e6:	061a      	lsls	r2, r3, #24
 80081e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081ea:	23f3      	movs	r3, #243	; 0xf3
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	5ccb      	ldrb	r3, [r1, r3]
 80081f0:	041b      	lsls	r3, r3, #16
 80081f2:	4313      	orrs	r3, r2
 80081f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081f6:	22e6      	movs	r2, #230	; 0xe6
 80081f8:	32ff      	adds	r2, #255	; 0xff
 80081fa:	5c8a      	ldrb	r2, [r1, r2]
 80081fc:	0212      	lsls	r2, r2, #8
 80081fe:	4313      	orrs	r3, r2
 8008200:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008202:	22f2      	movs	r2, #242	; 0xf2
 8008204:	0052      	lsls	r2, r2, #1
 8008206:	5c8a      	ldrb	r2, [r1, r2]
 8008208:	4313      	orrs	r3, r2
 800820a:	4a30      	ldr	r2, [pc, #192]	; (80082cc <find_volume+0x63c>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d135      	bne.n	800827c <find_volume+0x5ec>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8008210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008212:	23ec      	movs	r3, #236	; 0xec
 8008214:	33ff      	adds	r3, #255	; 0xff
 8008216:	5cd3      	ldrb	r3, [r2, r3]
 8008218:	061a      	lsls	r2, r3, #24
 800821a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800821c:	23f5      	movs	r3, #245	; 0xf5
 800821e:	005b      	lsls	r3, r3, #1
 8008220:	5ccb      	ldrb	r3, [r1, r3]
 8008222:	041b      	lsls	r3, r3, #16
 8008224:	4313      	orrs	r3, r2
 8008226:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008228:	22ea      	movs	r2, #234	; 0xea
 800822a:	32ff      	adds	r2, #255	; 0xff
 800822c:	5c8a      	ldrb	r2, [r1, r2]
 800822e:	0212      	lsls	r2, r2, #8
 8008230:	4313      	orrs	r3, r2
 8008232:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008234:	22f4      	movs	r2, #244	; 0xf4
 8008236:	0052      	lsls	r2, r2, #1
 8008238:	5c8a      	ldrb	r2, [r1, r2]
 800823a:	4313      	orrs	r3, r2
 800823c:	0019      	movs	r1, r3
 800823e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008240:	2384      	movs	r3, #132	; 0x84
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	50d1      	str	r1, [r2, r3]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8008246:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008248:	23f0      	movs	r3, #240	; 0xf0
 800824a:	33ff      	adds	r3, #255	; 0xff
 800824c:	5cd3      	ldrb	r3, [r2, r3]
 800824e:	061a      	lsls	r2, r3, #24
 8008250:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008252:	23f7      	movs	r3, #247	; 0xf7
 8008254:	005b      	lsls	r3, r3, #1
 8008256:	5ccb      	ldrb	r3, [r1, r3]
 8008258:	041b      	lsls	r3, r3, #16
 800825a:	4313      	orrs	r3, r2
 800825c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800825e:	22ee      	movs	r2, #238	; 0xee
 8008260:	32ff      	adds	r2, #255	; 0xff
 8008262:	5c8a      	ldrb	r2, [r1, r2]
 8008264:	0212      	lsls	r2, r2, #8
 8008266:	4313      	orrs	r3, r2
 8008268:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800826a:	22f6      	movs	r2, #246	; 0xf6
 800826c:	0052      	lsls	r2, r2, #1
 800826e:	5c8a      	ldrb	r2, [r1, r2]
 8008270:	4313      	orrs	r3, r2
 8008272:	0019      	movs	r1, r3
 8008274:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008276:	2383      	movs	r3, #131	; 0x83
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	50d1      	str	r1, [r2, r3]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800827c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800827e:	2357      	movs	r3, #87	; 0x57
 8008280:	18f9      	adds	r1, r7, r3
 8008282:	2380      	movs	r3, #128	; 0x80
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	7809      	ldrb	r1, [r1, #0]
 8008288:	54d1      	strb	r1, [r2, r3]
	fs->id = ++Fsid;	/* File system mount ID */
 800828a:	4b11      	ldr	r3, [pc, #68]	; (80082d0 <find_volume+0x640>)
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	3301      	adds	r3, #1
 8008290:	b29a      	uxth	r2, r3
 8008292:	4b0f      	ldr	r3, [pc, #60]	; (80082d0 <find_volume+0x640>)
 8008294:	801a      	strh	r2, [r3, #0]
 8008296:	4b0e      	ldr	r3, [pc, #56]	; (80082d0 <find_volume+0x640>)
 8008298:	8819      	ldrh	r1, [r3, #0]
 800829a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829c:	4a0d      	ldr	r2, [pc, #52]	; (80082d4 <find_volume+0x644>)
 800829e:	5299      	strh	r1, [r3, r2]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80082a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a2:	0018      	movs	r0, r3
 80082a4:	f7fe fa6e 	bl	8006784 <clear_lock>
#endif

	return FR_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	0018      	movs	r0, r3
 80082ac:	46bd      	mov	sp, r7
 80082ae:	b017      	add	sp, #92	; 0x5c
 80082b0:	bd90      	pop	{r4, r7, pc}
 80082b2:	46c0      	nop			; (mov r8, r8)
 80082b4:	00000ff5 	.word	0x00000ff5
 80082b8:	0000fff5 	.word	0x0000fff5
 80082bc:	000001ff 	.word	0x000001ff
 80082c0:	00000205 	.word	0x00000205
 80082c4:	ffffaa55 	.word	0xffffaa55
 80082c8:	41615252 	.word	0x41615252
 80082cc:	61417272 	.word	0x61417272
 80082d0:	200000a4 	.word	0x200000a4
 80082d4:	00000206 	.word	0x00000206

080082d8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d028      	beq.n	800833c <validate+0x64>
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	2380      	movs	r3, #128	; 0x80
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	58d3      	ldr	r3, [r2, r3]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d022      	beq.n	800833c <validate+0x64>
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	2380      	movs	r3, #128	; 0x80
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	58d2      	ldr	r2, [r2, r3]
 80082fe:	2380      	movs	r3, #128	; 0x80
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	5cd3      	ldrb	r3, [r2, r3]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d019      	beq.n	800833c <validate+0x64>
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	2380      	movs	r3, #128	; 0x80
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	58d3      	ldr	r3, [r2, r3]
 8008310:	4a0e      	ldr	r2, [pc, #56]	; (800834c <validate+0x74>)
 8008312:	5a9a      	ldrh	r2, [r3, r2]
 8008314:	68f9      	ldr	r1, [r7, #12]
 8008316:	2381      	movs	r3, #129	; 0x81
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	5acb      	ldrh	r3, [r1, r3]
 800831c:	429a      	cmp	r2, r3
 800831e:	d10d      	bne.n	800833c <validate+0x64>
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	2380      	movs	r3, #128	; 0x80
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	58d3      	ldr	r3, [r2, r3]
 8008328:	4a09      	ldr	r2, [pc, #36]	; (8008350 <validate+0x78>)
 800832a:	5c9b      	ldrb	r3, [r3, r2]
 800832c:	0018      	movs	r0, r3
 800832e:	f7fd ff47 	bl	80061c0 <disk_status>
 8008332:	0003      	movs	r3, r0
 8008334:	001a      	movs	r2, r3
 8008336:	2301      	movs	r3, #1
 8008338:	4013      	ands	r3, r2
 800833a:	d001      	beq.n	8008340 <validate+0x68>
		return FR_INVALID_OBJECT;
 800833c:	2309      	movs	r3, #9
 800833e:	e000      	b.n	8008342 <validate+0x6a>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	0018      	movs	r0, r3
 8008344:	46bd      	mov	sp, r7
 8008346:	b004      	add	sp, #16
 8008348:	bd80      	pop	{r7, pc}
 800834a:	46c0      	nop			; (mov r8, r8)
 800834c:	00000206 	.word	0x00000206
 8008350:	00000201 	.word	0x00000201

08008354 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008354:	b590      	push	{r4, r7, lr}
 8008356:	b089      	sub	sp, #36	; 0x24
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	1dfb      	adds	r3, r7, #7
 8008360:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8008366:	2310      	movs	r3, #16
 8008368:	18fb      	adds	r3, r7, r3
 800836a:	0018      	movs	r0, r3
 800836c:	f7ff fbe0 	bl	8007b30 <get_ldnumber>
 8008370:	0003      	movs	r3, r0
 8008372:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	2b00      	cmp	r3, #0
 8008378:	da01      	bge.n	800837e <f_mount+0x2a>
 800837a:	230b      	movs	r3, #11
 800837c:	e035      	b.n	80083ea <f_mount+0x96>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800837e:	4b1d      	ldr	r3, [pc, #116]	; (80083f4 <f_mount+0xa0>)
 8008380:	69fa      	ldr	r2, [r7, #28]
 8008382:	0092      	lsls	r2, r2, #2
 8008384:	58d3      	ldr	r3, [r2, r3]
 8008386:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d008      	beq.n	80083a0 <f_mount+0x4c>
#if _FS_LOCK
		clear_lock(cfs);
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	0018      	movs	r0, r3
 8008392:	f7fe f9f7 	bl	8006784 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008396:	69ba      	ldr	r2, [r7, #24]
 8008398:	2380      	movs	r3, #128	; 0x80
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	2100      	movs	r1, #0
 800839e:	54d1      	strb	r1, [r2, r3]
	}

	if (fs) {
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d004      	beq.n	80083b0 <f_mount+0x5c>
		fs->fs_type = 0;				/* Clear new fs object */
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	2380      	movs	r3, #128	; 0x80
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	2100      	movs	r1, #0
 80083ae:	54d1      	strb	r1, [r2, r3]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80083b0:	68f9      	ldr	r1, [r7, #12]
 80083b2:	4b10      	ldr	r3, [pc, #64]	; (80083f4 <f_mount+0xa0>)
 80083b4:	69fa      	ldr	r2, [r7, #28]
 80083b6:	0092      	lsls	r2, r2, #2
 80083b8:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d003      	beq.n	80083c8 <f_mount+0x74>
 80083c0:	1dfb      	adds	r3, r7, #7
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d001      	beq.n	80083cc <f_mount+0x78>
 80083c8:	2300      	movs	r3, #0
 80083ca:	e00e      	b.n	80083ea <f_mount+0x96>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80083cc:	2317      	movs	r3, #23
 80083ce:	18fc      	adds	r4, r7, r3
 80083d0:	2308      	movs	r3, #8
 80083d2:	18f9      	adds	r1, r7, r3
 80083d4:	230c      	movs	r3, #12
 80083d6:	18fb      	adds	r3, r7, r3
 80083d8:	2200      	movs	r2, #0
 80083da:	0018      	movs	r0, r3
 80083dc:	f7ff fc58 	bl	8007c90 <find_volume>
 80083e0:	0003      	movs	r3, r0
 80083e2:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 80083e4:	2317      	movs	r3, #23
 80083e6:	18fb      	adds	r3, r7, r3
 80083e8:	781b      	ldrb	r3, [r3, #0]
}
 80083ea:	0018      	movs	r0, r3
 80083ec:	46bd      	mov	sp, r7
 80083ee:	b009      	add	sp, #36	; 0x24
 80083f0:	bd90      	pop	{r4, r7, pc}
 80083f2:	46c0      	nop			; (mov r8, r8)
 80083f4:	200000a0 	.word	0x200000a0

080083f8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80083f8:	b590      	push	{r4, r7, lr}
 80083fa:	4cea      	ldr	r4, [pc, #936]	; (80087a4 <f_open+0x3ac>)
 80083fc:	44a5      	add	sp, r4
 80083fe:	af00      	add	r7, sp, #0
 8008400:	60f8      	str	r0, [r7, #12]
 8008402:	60b9      	str	r1, [r7, #8]
 8008404:	4be8      	ldr	r3, [pc, #928]	; (80087a8 <f_open+0x3b0>)
 8008406:	2194      	movs	r1, #148	; 0x94
 8008408:	0089      	lsls	r1, r1, #2
 800840a:	468c      	mov	ip, r1
 800840c:	44bc      	add	ip, r7
 800840e:	4463      	add	r3, ip
 8008410:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d101      	bne.n	800841c <f_open+0x24>
 8008418:	2309      	movs	r3, #9
 800841a:	e2c2      	b.n	80089a2 <f_open+0x5aa>
	fp->fs = 0;			/* Clear file object */
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	2380      	movs	r3, #128	; 0x80
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	2100      	movs	r1, #0
 8008424:	50d1      	str	r1, [r2, r3]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8008426:	4be0      	ldr	r3, [pc, #896]	; (80087a8 <f_open+0x3b0>)
 8008428:	2294      	movs	r2, #148	; 0x94
 800842a:	0092      	lsls	r2, r2, #2
 800842c:	4694      	mov	ip, r2
 800842e:	44bc      	add	ip, r7
 8008430:	4463      	add	r3, ip
 8008432:	4add      	ldr	r2, [pc, #884]	; (80087a8 <f_open+0x3b0>)
 8008434:	2194      	movs	r1, #148	; 0x94
 8008436:	0089      	lsls	r1, r1, #2
 8008438:	468c      	mov	ip, r1
 800843a:	44bc      	add	ip, r7
 800843c:	4462      	add	r2, ip
 800843e:	7812      	ldrb	r2, [r2, #0]
 8008440:	211f      	movs	r1, #31
 8008442:	400a      	ands	r2, r1
 8008444:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8008446:	4bd8      	ldr	r3, [pc, #864]	; (80087a8 <f_open+0x3b0>)
 8008448:	2294      	movs	r2, #148	; 0x94
 800844a:	0092      	lsls	r2, r2, #2
 800844c:	4694      	mov	ip, r2
 800844e:	44bc      	add	ip, r7
 8008450:	4463      	add	r3, ip
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	2201      	movs	r2, #1
 8008456:	4393      	bics	r3, r2
 8008458:	b2da      	uxtb	r2, r3
 800845a:	4bd4      	ldr	r3, [pc, #848]	; (80087ac <f_open+0x3b4>)
 800845c:	18fc      	adds	r4, r7, r3
 800845e:	2308      	movs	r3, #8
 8008460:	18f9      	adds	r1, r7, r3
 8008462:	2320      	movs	r3, #32
 8008464:	18fb      	adds	r3, r7, r3
 8008466:	2080      	movs	r0, #128	; 0x80
 8008468:	0080      	lsls	r0, r0, #2
 800846a:	4684      	mov	ip, r0
 800846c:	4463      	add	r3, ip
 800846e:	0018      	movs	r0, r3
 8008470:	f7ff fc0e 	bl	8007c90 <find_volume>
 8008474:	0003      	movs	r3, r0
 8008476:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8008478:	4bcc      	ldr	r3, [pc, #816]	; (80087ac <f_open+0x3b4>)
 800847a:	18fb      	adds	r3, r7, r3
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d000      	beq.n	8008484 <f_open+0x8c>
 8008482:	e28b      	b.n	800899c <f_open+0x5a4>
		INIT_BUF(dj);
 8008484:	4bca      	ldr	r3, [pc, #808]	; (80087b0 <f_open+0x3b8>)
 8008486:	2294      	movs	r2, #148	; 0x94
 8008488:	0092      	lsls	r2, r2, #2
 800848a:	18ba      	adds	r2, r7, r2
 800848c:	18d2      	adds	r2, r2, r3
 800848e:	2386      	movs	r3, #134	; 0x86
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	2114      	movs	r1, #20
 8008494:	1879      	adds	r1, r7, r1
 8008496:	50d1      	str	r1, [r2, r3]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	4bc4      	ldr	r3, [pc, #784]	; (80087ac <f_open+0x3b4>)
 800849c:	18fc      	adds	r4, r7, r3
 800849e:	2320      	movs	r3, #32
 80084a0:	18fb      	adds	r3, r7, r3
 80084a2:	0011      	movs	r1, r2
 80084a4:	0018      	movs	r0, r3
 80084a6:	f7ff fab5 	bl	8007a14 <follow_path>
 80084aa:	0003      	movs	r3, r0
 80084ac:	7023      	strb	r3, [r4, #0]
		dir = dj.dir;
 80084ae:	4bc0      	ldr	r3, [pc, #768]	; (80087b0 <f_open+0x3b8>)
 80084b0:	2294      	movs	r2, #148	; 0x94
 80084b2:	0092      	lsls	r2, r2, #2
 80084b4:	18ba      	adds	r2, r7, r2
 80084b6:	18d2      	adds	r2, r2, r3
 80084b8:	2385      	movs	r3, #133	; 0x85
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	58d3      	ldr	r3, [r2, r3]
 80084be:	2292      	movs	r2, #146	; 0x92
 80084c0:	0092      	lsls	r2, r2, #2
 80084c2:	18ba      	adds	r2, r7, r2
 80084c4:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80084c6:	4bb9      	ldr	r3, [pc, #740]	; (80087ac <f_open+0x3b4>)
 80084c8:	18fb      	adds	r3, r7, r3
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d121      	bne.n	8008514 <f_open+0x11c>
			if (!dir)	/* Default directory itself */
 80084d0:	2392      	movs	r3, #146	; 0x92
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	18fb      	adds	r3, r7, r3
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d104      	bne.n	80084e6 <f_open+0xee>
				res = FR_INVALID_NAME;
 80084dc:	4bb3      	ldr	r3, [pc, #716]	; (80087ac <f_open+0x3b4>)
 80084de:	18fb      	adds	r3, r7, r3
 80084e0:	2206      	movs	r2, #6
 80084e2:	701a      	strb	r2, [r3, #0]
 80084e4:	e016      	b.n	8008514 <f_open+0x11c>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80084e6:	4bb0      	ldr	r3, [pc, #704]	; (80087a8 <f_open+0x3b0>)
 80084e8:	2294      	movs	r2, #148	; 0x94
 80084ea:	0092      	lsls	r2, r2, #2
 80084ec:	4694      	mov	ip, r2
 80084ee:	44bc      	add	ip, r7
 80084f0:	4463      	add	r3, ip
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	2201      	movs	r2, #1
 80084f6:	4393      	bics	r3, r2
 80084f8:	1e5a      	subs	r2, r3, #1
 80084fa:	4193      	sbcs	r3, r2
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	001a      	movs	r2, r3
 8008500:	4baa      	ldr	r3, [pc, #680]	; (80087ac <f_open+0x3b4>)
 8008502:	18fc      	adds	r4, r7, r3
 8008504:	2320      	movs	r3, #32
 8008506:	18fb      	adds	r3, r7, r3
 8008508:	0011      	movs	r1, r2
 800850a:	0018      	movs	r0, r3
 800850c:	f7fd ff9c 	bl	8006448 <chk_lock>
 8008510:	0003      	movs	r3, r0
 8008512:	7023      	strb	r3, [r4, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008514:	4ba4      	ldr	r3, [pc, #656]	; (80087a8 <f_open+0x3b0>)
 8008516:	2294      	movs	r2, #148	; 0x94
 8008518:	0092      	lsls	r2, r2, #2
 800851a:	4694      	mov	ip, r2
 800851c:	44bc      	add	ip, r7
 800851e:	4463      	add	r3, ip
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	221c      	movs	r2, #28
 8008524:	4013      	ands	r3, r2
 8008526:	d100      	bne.n	800852a <f_open+0x132>
 8008528:	e144      	b.n	80087b4 <f_open+0x3bc>
			if (res != FR_OK) {					/* No file, create new */
 800852a:	4ba0      	ldr	r3, [pc, #640]	; (80087ac <f_open+0x3b4>)
 800852c:	18fb      	adds	r3, r7, r3
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d031      	beq.n	8008598 <f_open+0x1a0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8008534:	4b9d      	ldr	r3, [pc, #628]	; (80087ac <f_open+0x3b4>)
 8008536:	18fb      	adds	r3, r7, r3
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	2b04      	cmp	r3, #4
 800853c:	d10f      	bne.n	800855e <f_open+0x166>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800853e:	f7fd fff1 	bl	8006524 <enq_lock>
 8008542:	1e03      	subs	r3, r0, #0
 8008544:	d007      	beq.n	8008556 <f_open+0x15e>
 8008546:	2320      	movs	r3, #32
 8008548:	18fb      	adds	r3, r7, r3
 800854a:	0018      	movs	r0, r3
 800854c:	f7ff f908 	bl	8007760 <dir_register>
 8008550:	0003      	movs	r3, r0
 8008552:	001a      	movs	r2, r3
 8008554:	e000      	b.n	8008558 <f_open+0x160>
 8008556:	2212      	movs	r2, #18
 8008558:	4b94      	ldr	r3, [pc, #592]	; (80087ac <f_open+0x3b4>)
 800855a:	18fb      	adds	r3, r7, r3
 800855c:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800855e:	4b92      	ldr	r3, [pc, #584]	; (80087a8 <f_open+0x3b0>)
 8008560:	2294      	movs	r2, #148	; 0x94
 8008562:	0092      	lsls	r2, r2, #2
 8008564:	4694      	mov	ip, r2
 8008566:	44bc      	add	ip, r7
 8008568:	4463      	add	r3, ip
 800856a:	4a8f      	ldr	r2, [pc, #572]	; (80087a8 <f_open+0x3b0>)
 800856c:	2194      	movs	r1, #148	; 0x94
 800856e:	0089      	lsls	r1, r1, #2
 8008570:	468c      	mov	ip, r1
 8008572:	44bc      	add	ip, r7
 8008574:	4462      	add	r2, ip
 8008576:	7812      	ldrb	r2, [r2, #0]
 8008578:	2108      	movs	r1, #8
 800857a:	430a      	orrs	r2, r1
 800857c:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800857e:	4b8c      	ldr	r3, [pc, #560]	; (80087b0 <f_open+0x3b8>)
 8008580:	2294      	movs	r2, #148	; 0x94
 8008582:	0092      	lsls	r2, r2, #2
 8008584:	18ba      	adds	r2, r7, r2
 8008586:	18d2      	adds	r2, r2, r3
 8008588:	2385      	movs	r3, #133	; 0x85
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	58d3      	ldr	r3, [r2, r3]
 800858e:	2292      	movs	r2, #146	; 0x92
 8008590:	0092      	lsls	r2, r2, #2
 8008592:	18ba      	adds	r2, r7, r2
 8008594:	6013      	str	r3, [r2, #0]
 8008596:	e01c      	b.n	80085d2 <f_open+0x1da>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008598:	2392      	movs	r3, #146	; 0x92
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	18fb      	adds	r3, r7, r3
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	330b      	adds	r3, #11
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	001a      	movs	r2, r3
 80085a6:	2311      	movs	r3, #17
 80085a8:	4013      	ands	r3, r2
 80085aa:	d004      	beq.n	80085b6 <f_open+0x1be>
					res = FR_DENIED;
 80085ac:	4b7f      	ldr	r3, [pc, #508]	; (80087ac <f_open+0x3b4>)
 80085ae:	18fb      	adds	r3, r7, r3
 80085b0:	2207      	movs	r2, #7
 80085b2:	701a      	strb	r2, [r3, #0]
 80085b4:	e00d      	b.n	80085d2 <f_open+0x1da>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80085b6:	4b7c      	ldr	r3, [pc, #496]	; (80087a8 <f_open+0x3b0>)
 80085b8:	2294      	movs	r2, #148	; 0x94
 80085ba:	0092      	lsls	r2, r2, #2
 80085bc:	4694      	mov	ip, r2
 80085be:	44bc      	add	ip, r7
 80085c0:	4463      	add	r3, ip
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	2204      	movs	r2, #4
 80085c6:	4013      	ands	r3, r2
 80085c8:	d003      	beq.n	80085d2 <f_open+0x1da>
						res = FR_EXIST;
 80085ca:	4b78      	ldr	r3, [pc, #480]	; (80087ac <f_open+0x3b4>)
 80085cc:	18fb      	adds	r3, r7, r3
 80085ce:	2208      	movs	r2, #8
 80085d0:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80085d2:	4b76      	ldr	r3, [pc, #472]	; (80087ac <f_open+0x3b4>)
 80085d4:	18fb      	adds	r3, r7, r3
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d000      	beq.n	80085de <f_open+0x1e6>
 80085dc:	e116      	b.n	800880c <f_open+0x414>
 80085de:	4b72      	ldr	r3, [pc, #456]	; (80087a8 <f_open+0x3b0>)
 80085e0:	2294      	movs	r2, #148	; 0x94
 80085e2:	0092      	lsls	r2, r2, #2
 80085e4:	4694      	mov	ip, r2
 80085e6:	44bc      	add	ip, r7
 80085e8:	4463      	add	r3, ip
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	2208      	movs	r2, #8
 80085ee:	4013      	ands	r3, r2
 80085f0:	d100      	bne.n	80085f4 <f_open+0x1fc>
 80085f2:	e10b      	b.n	800880c <f_open+0x414>
				dw = GET_FATTIME();				/* Created time */
 80085f4:	f001 fca2 	bl	8009f3c <get_fattime>
 80085f8:	0003      	movs	r3, r0
 80085fa:	2291      	movs	r2, #145	; 0x91
 80085fc:	0092      	lsls	r2, r2, #2
 80085fe:	18ba      	adds	r2, r7, r2
 8008600:	6013      	str	r3, [r2, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8008602:	2392      	movs	r3, #146	; 0x92
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	18fb      	adds	r3, r7, r3
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	330e      	adds	r3, #14
 800860c:	2291      	movs	r2, #145	; 0x91
 800860e:	0092      	lsls	r2, r2, #2
 8008610:	18ba      	adds	r2, r7, r2
 8008612:	6812      	ldr	r2, [r2, #0]
 8008614:	b2d2      	uxtb	r2, r2
 8008616:	701a      	strb	r2, [r3, #0]
 8008618:	2392      	movs	r3, #146	; 0x92
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	18fb      	adds	r3, r7, r3
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	330f      	adds	r3, #15
 8008622:	2291      	movs	r2, #145	; 0x91
 8008624:	0092      	lsls	r2, r2, #2
 8008626:	18ba      	adds	r2, r7, r2
 8008628:	6812      	ldr	r2, [r2, #0]
 800862a:	b292      	uxth	r2, r2
 800862c:	0a12      	lsrs	r2, r2, #8
 800862e:	b292      	uxth	r2, r2
 8008630:	b2d2      	uxtb	r2, r2
 8008632:	701a      	strb	r2, [r3, #0]
 8008634:	2392      	movs	r3, #146	; 0x92
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	18fb      	adds	r3, r7, r3
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	3310      	adds	r3, #16
 800863e:	2291      	movs	r2, #145	; 0x91
 8008640:	0092      	lsls	r2, r2, #2
 8008642:	18ba      	adds	r2, r7, r2
 8008644:	6812      	ldr	r2, [r2, #0]
 8008646:	0c12      	lsrs	r2, r2, #16
 8008648:	b2d2      	uxtb	r2, r2
 800864a:	701a      	strb	r2, [r3, #0]
 800864c:	2392      	movs	r3, #146	; 0x92
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	18fb      	adds	r3, r7, r3
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	3311      	adds	r3, #17
 8008656:	2291      	movs	r2, #145	; 0x91
 8008658:	0092      	lsls	r2, r2, #2
 800865a:	18ba      	adds	r2, r7, r2
 800865c:	6812      	ldr	r2, [r2, #0]
 800865e:	0e12      	lsrs	r2, r2, #24
 8008660:	b2d2      	uxtb	r2, r2
 8008662:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8008664:	2392      	movs	r3, #146	; 0x92
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	18fb      	adds	r3, r7, r3
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	330b      	adds	r3, #11
 800866e:	2200      	movs	r2, #0
 8008670:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8008672:	2392      	movs	r3, #146	; 0x92
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	18fb      	adds	r3, r7, r3
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	331c      	adds	r3, #28
 800867c:	2200      	movs	r2, #0
 800867e:	701a      	strb	r2, [r3, #0]
 8008680:	2392      	movs	r3, #146	; 0x92
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	18fb      	adds	r3, r7, r3
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	331d      	adds	r3, #29
 800868a:	2200      	movs	r2, #0
 800868c:	701a      	strb	r2, [r3, #0]
 800868e:	2392      	movs	r3, #146	; 0x92
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	18fb      	adds	r3, r7, r3
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	331e      	adds	r3, #30
 8008698:	2200      	movs	r2, #0
 800869a:	701a      	strb	r2, [r3, #0]
 800869c:	2392      	movs	r3, #146	; 0x92
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	18fb      	adds	r3, r7, r3
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	331f      	adds	r3, #31
 80086a6:	2200      	movs	r2, #0
 80086a8:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80086aa:	4b41      	ldr	r3, [pc, #260]	; (80087b0 <f_open+0x3b8>)
 80086ac:	2294      	movs	r2, #148	; 0x94
 80086ae:	0092      	lsls	r2, r2, #2
 80086b0:	18ba      	adds	r2, r7, r2
 80086b2:	18d2      	adds	r2, r2, r3
 80086b4:	2380      	movs	r3, #128	; 0x80
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	58d3      	ldr	r3, [r2, r3]
 80086ba:	2292      	movs	r2, #146	; 0x92
 80086bc:	0092      	lsls	r2, r2, #2
 80086be:	18ba      	adds	r2, r7, r2
 80086c0:	6812      	ldr	r2, [r2, #0]
 80086c2:	0011      	movs	r1, r2
 80086c4:	0018      	movs	r0, r3
 80086c6:	f7fe ff90 	bl	80075ea <ld_clust>
 80086ca:	0003      	movs	r3, r0
 80086cc:	2290      	movs	r2, #144	; 0x90
 80086ce:	0092      	lsls	r2, r2, #2
 80086d0:	18ba      	adds	r2, r7, r2
 80086d2:	6013      	str	r3, [r2, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 80086d4:	2392      	movs	r3, #146	; 0x92
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	18fb      	adds	r3, r7, r3
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2100      	movs	r1, #0
 80086de:	0018      	movs	r0, r3
 80086e0:	f7fe ffb0 	bl	8007644 <st_clust>
				dj.fs->wflag = 1;
 80086e4:	4b32      	ldr	r3, [pc, #200]	; (80087b0 <f_open+0x3b8>)
 80086e6:	2294      	movs	r2, #148	; 0x94
 80086e8:	0092      	lsls	r2, r2, #2
 80086ea:	18ba      	adds	r2, r7, r2
 80086ec:	18d2      	adds	r2, r2, r3
 80086ee:	2380      	movs	r3, #128	; 0x80
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	58d2      	ldr	r2, [r2, r3]
 80086f4:	2381      	movs	r3, #129	; 0x81
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	2101      	movs	r1, #1
 80086fa:	54d1      	strb	r1, [r2, r3]
				if (cl) {						/* Remove the cluster chain if exist */
 80086fc:	2390      	movs	r3, #144	; 0x90
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	18fb      	adds	r3, r7, r3
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d100      	bne.n	800870a <f_open+0x312>
 8008708:	e080      	b.n	800880c <f_open+0x414>
					dw = dj.fs->winsect;
 800870a:	4b29      	ldr	r3, [pc, #164]	; (80087b0 <f_open+0x3b8>)
 800870c:	2294      	movs	r2, #148	; 0x94
 800870e:	0092      	lsls	r2, r2, #2
 8008710:	18ba      	adds	r2, r7, r2
 8008712:	18d2      	adds	r2, r2, r3
 8008714:	2380      	movs	r3, #128	; 0x80
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	58d2      	ldr	r2, [r2, r3]
 800871a:	238b      	movs	r3, #139	; 0x8b
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	58d3      	ldr	r3, [r2, r3]
 8008720:	2291      	movs	r2, #145	; 0x91
 8008722:	0092      	lsls	r2, r2, #2
 8008724:	18ba      	adds	r2, r7, r2
 8008726:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8008728:	4b21      	ldr	r3, [pc, #132]	; (80087b0 <f_open+0x3b8>)
 800872a:	2294      	movs	r2, #148	; 0x94
 800872c:	0092      	lsls	r2, r2, #2
 800872e:	18ba      	adds	r2, r7, r2
 8008730:	18d2      	adds	r2, r2, r3
 8008732:	2380      	movs	r3, #128	; 0x80
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	58d3      	ldr	r3, [r2, r3]
 8008738:	4a1c      	ldr	r2, [pc, #112]	; (80087ac <f_open+0x3b4>)
 800873a:	18bc      	adds	r4, r7, r2
 800873c:	2290      	movs	r2, #144	; 0x90
 800873e:	0092      	lsls	r2, r2, #2
 8008740:	18ba      	adds	r2, r7, r2
 8008742:	6812      	ldr	r2, [r2, #0]
 8008744:	0011      	movs	r1, r2
 8008746:	0018      	movs	r0, r3
 8008748:	f7fe fbbe 	bl	8006ec8 <remove_chain>
 800874c:	0003      	movs	r3, r0
 800874e:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
 8008750:	4b16      	ldr	r3, [pc, #88]	; (80087ac <f_open+0x3b4>)
 8008752:	18fb      	adds	r3, r7, r3
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d158      	bne.n	800880c <f_open+0x414>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800875a:	4b15      	ldr	r3, [pc, #84]	; (80087b0 <f_open+0x3b8>)
 800875c:	2294      	movs	r2, #148	; 0x94
 800875e:	0092      	lsls	r2, r2, #2
 8008760:	18ba      	adds	r2, r7, r2
 8008762:	18d2      	adds	r2, r2, r3
 8008764:	2380      	movs	r3, #128	; 0x80
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	58d2      	ldr	r2, [r2, r3]
 800876a:	2390      	movs	r3, #144	; 0x90
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	18fb      	adds	r3, r7, r3
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	1e59      	subs	r1, r3, #1
 8008774:	2383      	movs	r3, #131	; 0x83
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	50d1      	str	r1, [r2, r3]
						res = move_window(dj.fs, dw);
 800877a:	4b0d      	ldr	r3, [pc, #52]	; (80087b0 <f_open+0x3b8>)
 800877c:	2294      	movs	r2, #148	; 0x94
 800877e:	0092      	lsls	r2, r2, #2
 8008780:	18ba      	adds	r2, r7, r2
 8008782:	18d2      	adds	r2, r2, r3
 8008784:	2380      	movs	r3, #128	; 0x80
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	58d3      	ldr	r3, [r2, r3]
 800878a:	4a08      	ldr	r2, [pc, #32]	; (80087ac <f_open+0x3b4>)
 800878c:	18bc      	adds	r4, r7, r2
 800878e:	2291      	movs	r2, #145	; 0x91
 8008790:	0092      	lsls	r2, r2, #2
 8008792:	18ba      	adds	r2, r7, r2
 8008794:	6812      	ldr	r2, [r2, #0]
 8008796:	0011      	movs	r1, r2
 8008798:	0018      	movs	r0, r3
 800879a:	f7fe f871 	bl	8006880 <move_window>
 800879e:	0003      	movs	r3, r0
 80087a0:	7023      	strb	r3, [r4, #0]
 80087a2:	e033      	b.n	800880c <f_open+0x414>
 80087a4:	fffffdac 	.word	0xfffffdac
 80087a8:	fffffdb7 	.word	0xfffffdb7
 80087ac:	0000024f 	.word	0x0000024f
 80087b0:	fffffdd0 	.word	0xfffffdd0
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80087b4:	4b7e      	ldr	r3, [pc, #504]	; (80089b0 <f_open+0x5b8>)
 80087b6:	18fb      	adds	r3, r7, r3
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d126      	bne.n	800880c <f_open+0x414>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80087be:	2392      	movs	r3, #146	; 0x92
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	18fb      	adds	r3, r7, r3
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	330b      	adds	r3, #11
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	001a      	movs	r2, r3
 80087cc:	2310      	movs	r3, #16
 80087ce:	4013      	ands	r3, r2
 80087d0:	d004      	beq.n	80087dc <f_open+0x3e4>
					res = FR_NO_FILE;
 80087d2:	4b77      	ldr	r3, [pc, #476]	; (80089b0 <f_open+0x5b8>)
 80087d4:	18fb      	adds	r3, r7, r3
 80087d6:	2204      	movs	r2, #4
 80087d8:	701a      	strb	r2, [r3, #0]
 80087da:	e017      	b.n	800880c <f_open+0x414>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80087dc:	4b75      	ldr	r3, [pc, #468]	; (80089b4 <f_open+0x5bc>)
 80087de:	2294      	movs	r2, #148	; 0x94
 80087e0:	0092      	lsls	r2, r2, #2
 80087e2:	4694      	mov	ip, r2
 80087e4:	44bc      	add	ip, r7
 80087e6:	4463      	add	r3, ip
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	2202      	movs	r2, #2
 80087ec:	4013      	ands	r3, r2
 80087ee:	d00d      	beq.n	800880c <f_open+0x414>
 80087f0:	2392      	movs	r3, #146	; 0x92
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	18fb      	adds	r3, r7, r3
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	330b      	adds	r3, #11
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	001a      	movs	r2, r3
 80087fe:	2301      	movs	r3, #1
 8008800:	4013      	ands	r3, r2
 8008802:	d003      	beq.n	800880c <f_open+0x414>
						res = FR_DENIED;
 8008804:	4b6a      	ldr	r3, [pc, #424]	; (80089b0 <f_open+0x5b8>)
 8008806:	18fb      	adds	r3, r7, r3
 8008808:	2207      	movs	r2, #7
 800880a:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (res == FR_OK) {
 800880c:	4b68      	ldr	r3, [pc, #416]	; (80089b0 <f_open+0x5b8>)
 800880e:	18fb      	adds	r3, r7, r3
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d152      	bne.n	80088bc <f_open+0x4c4>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008816:	4b67      	ldr	r3, [pc, #412]	; (80089b4 <f_open+0x5bc>)
 8008818:	2294      	movs	r2, #148	; 0x94
 800881a:	0092      	lsls	r2, r2, #2
 800881c:	4694      	mov	ip, r2
 800881e:	44bc      	add	ip, r7
 8008820:	4463      	add	r3, ip
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	2208      	movs	r2, #8
 8008826:	4013      	ands	r3, r2
 8008828:	d00f      	beq.n	800884a <f_open+0x452>
				mode |= FA__WRITTEN;
 800882a:	4b62      	ldr	r3, [pc, #392]	; (80089b4 <f_open+0x5bc>)
 800882c:	2294      	movs	r2, #148	; 0x94
 800882e:	0092      	lsls	r2, r2, #2
 8008830:	4694      	mov	ip, r2
 8008832:	44bc      	add	ip, r7
 8008834:	4463      	add	r3, ip
 8008836:	4a5f      	ldr	r2, [pc, #380]	; (80089b4 <f_open+0x5bc>)
 8008838:	2194      	movs	r1, #148	; 0x94
 800883a:	0089      	lsls	r1, r1, #2
 800883c:	468c      	mov	ip, r1
 800883e:	44bc      	add	ip, r7
 8008840:	4462      	add	r2, ip
 8008842:	7812      	ldrb	r2, [r2, #0]
 8008844:	2120      	movs	r1, #32
 8008846:	430a      	orrs	r2, r1
 8008848:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800884a:	4b5b      	ldr	r3, [pc, #364]	; (80089b8 <f_open+0x5c0>)
 800884c:	2294      	movs	r2, #148	; 0x94
 800884e:	0092      	lsls	r2, r2, #2
 8008850:	18ba      	adds	r2, r7, r2
 8008852:	18d2      	adds	r2, r2, r3
 8008854:	2380      	movs	r3, #128	; 0x80
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	58d2      	ldr	r2, [r2, r3]
 800885a:	238b      	movs	r3, #139	; 0x8b
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	58d1      	ldr	r1, [r2, r3]
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	2387      	movs	r3, #135	; 0x87
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	50d1      	str	r1, [r2, r3]
			fp->dir_ptr = dir;
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	2388      	movs	r3, #136	; 0x88
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	2192      	movs	r1, #146	; 0x92
 8008870:	0089      	lsls	r1, r1, #2
 8008872:	1879      	adds	r1, r7, r1
 8008874:	6809      	ldr	r1, [r1, #0]
 8008876:	50d1      	str	r1, [r2, r3]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008878:	4b4e      	ldr	r3, [pc, #312]	; (80089b4 <f_open+0x5bc>)
 800887a:	2294      	movs	r2, #148	; 0x94
 800887c:	0092      	lsls	r2, r2, #2
 800887e:	4694      	mov	ip, r2
 8008880:	44bc      	add	ip, r7
 8008882:	4463      	add	r3, ip
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	2201      	movs	r2, #1
 8008888:	4393      	bics	r3, r2
 800888a:	1e5a      	subs	r2, r3, #1
 800888c:	4193      	sbcs	r3, r2
 800888e:	b2db      	uxtb	r3, r3
 8008890:	001a      	movs	r2, r3
 8008892:	2320      	movs	r3, #32
 8008894:	18fb      	adds	r3, r7, r3
 8008896:	0011      	movs	r1, r2
 8008898:	0018      	movs	r0, r3
 800889a:	f7fd fe63 	bl	8006564 <inc_lock>
 800889e:	0001      	movs	r1, r0
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	238a      	movs	r3, #138	; 0x8a
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	50d1      	str	r1, [r2, r3]
			if (!fp->lockid) res = FR_INT_ERR;
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	238a      	movs	r3, #138	; 0x8a
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	58d3      	ldr	r3, [r2, r3]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d103      	bne.n	80088bc <f_open+0x4c4>
 80088b4:	4b3e      	ldr	r3, [pc, #248]	; (80089b0 <f_open+0x5b8>)
 80088b6:	18fb      	adds	r3, r7, r3
 80088b8:	2202      	movs	r2, #2
 80088ba:	701a      	strb	r2, [r3, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80088bc:	4b3c      	ldr	r3, [pc, #240]	; (80089b0 <f_open+0x5b8>)
 80088be:	18fb      	adds	r3, r7, r3
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d16a      	bne.n	800899c <f_open+0x5a4>
			fp->flag = mode;					/* File access mode */
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	4a3a      	ldr	r2, [pc, #232]	; (80089b4 <f_open+0x5bc>)
 80088ca:	2194      	movs	r1, #148	; 0x94
 80088cc:	0089      	lsls	r1, r1, #2
 80088ce:	468c      	mov	ip, r1
 80088d0:	44bc      	add	ip, r7
 80088d2:	4462      	add	r2, ip
 80088d4:	4939      	ldr	r1, [pc, #228]	; (80089bc <f_open+0x5c4>)
 80088d6:	7812      	ldrb	r2, [r2, #0]
 80088d8:	545a      	strb	r2, [r3, r1]
			fp->err = 0;						/* Clear error flag */
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	4a38      	ldr	r2, [pc, #224]	; (80089c0 <f_open+0x5c8>)
 80088de:	2100      	movs	r1, #0
 80088e0:	5499      	strb	r1, [r3, r2]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80088e2:	4b35      	ldr	r3, [pc, #212]	; (80089b8 <f_open+0x5c0>)
 80088e4:	2294      	movs	r2, #148	; 0x94
 80088e6:	0092      	lsls	r2, r2, #2
 80088e8:	18ba      	adds	r2, r7, r2
 80088ea:	18d2      	adds	r2, r2, r3
 80088ec:	2380      	movs	r3, #128	; 0x80
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	58d3      	ldr	r3, [r2, r3]
 80088f2:	2292      	movs	r2, #146	; 0x92
 80088f4:	0092      	lsls	r2, r2, #2
 80088f6:	18ba      	adds	r2, r7, r2
 80088f8:	6812      	ldr	r2, [r2, #0]
 80088fa:	0011      	movs	r1, r2
 80088fc:	0018      	movs	r0, r3
 80088fe:	f7fe fe74 	bl	80075ea <ld_clust>
 8008902:	0001      	movs	r1, r0
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	2384      	movs	r3, #132	; 0x84
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	50d1      	str	r1, [r2, r3]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800890c:	2392      	movs	r3, #146	; 0x92
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	18fb      	adds	r3, r7, r3
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	331f      	adds	r3, #31
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	061a      	lsls	r2, r3, #24
 800891a:	2392      	movs	r3, #146	; 0x92
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	18fb      	adds	r3, r7, r3
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	331e      	adds	r3, #30
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	041b      	lsls	r3, r3, #16
 8008928:	4313      	orrs	r3, r2
 800892a:	2292      	movs	r2, #146	; 0x92
 800892c:	0092      	lsls	r2, r2, #2
 800892e:	18ba      	adds	r2, r7, r2
 8008930:	6812      	ldr	r2, [r2, #0]
 8008932:	321d      	adds	r2, #29
 8008934:	7812      	ldrb	r2, [r2, #0]
 8008936:	0212      	lsls	r2, r2, #8
 8008938:	4313      	orrs	r3, r2
 800893a:	2292      	movs	r2, #146	; 0x92
 800893c:	0092      	lsls	r2, r2, #2
 800893e:	18ba      	adds	r2, r7, r2
 8008940:	6812      	ldr	r2, [r2, #0]
 8008942:	321c      	adds	r2, #28
 8008944:	7812      	ldrb	r2, [r2, #0]
 8008946:	4313      	orrs	r3, r2
 8008948:	0019      	movs	r1, r3
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	2383      	movs	r3, #131	; 0x83
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	50d1      	str	r1, [r2, r3]
			fp->fptr = 0;						/* File pointer */
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	2382      	movs	r3, #130	; 0x82
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	2100      	movs	r1, #0
 800895a:	50d1      	str	r1, [r2, r3]
			fp->dsect = 0;
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	2386      	movs	r3, #134	; 0x86
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	2100      	movs	r1, #0
 8008964:	50d1      	str	r1, [r2, r3]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	2389      	movs	r3, #137	; 0x89
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	2100      	movs	r1, #0
 800896e:	50d1      	str	r1, [r2, r3]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8008970:	4b11      	ldr	r3, [pc, #68]	; (80089b8 <f_open+0x5c0>)
 8008972:	2294      	movs	r2, #148	; 0x94
 8008974:	0092      	lsls	r2, r2, #2
 8008976:	18ba      	adds	r2, r7, r2
 8008978:	18d2      	adds	r2, r2, r3
 800897a:	2380      	movs	r3, #128	; 0x80
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	58d1      	ldr	r1, [r2, r3]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	2380      	movs	r3, #128	; 0x80
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	50d1      	str	r1, [r2, r3]
			fp->id = fp->fs->id;
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	2380      	movs	r3, #128	; 0x80
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	58d3      	ldr	r3, [r2, r3]
 8008990:	4a0a      	ldr	r2, [pc, #40]	; (80089bc <f_open+0x5c4>)
 8008992:	5a99      	ldrh	r1, [r3, r2]
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	2381      	movs	r3, #129	; 0x81
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	52d1      	strh	r1, [r2, r3]
		}
	}

	LEAVE_FF(dj.fs, res);
 800899c:	4b04      	ldr	r3, [pc, #16]	; (80089b0 <f_open+0x5b8>)
 800899e:	18fb      	adds	r3, r7, r3
 80089a0:	781b      	ldrb	r3, [r3, #0]
}
 80089a2:	0018      	movs	r0, r3
 80089a4:	46bd      	mov	sp, r7
 80089a6:	2395      	movs	r3, #149	; 0x95
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	449d      	add	sp, r3
 80089ac:	bd90      	pop	{r4, r7, pc}
 80089ae:	46c0      	nop			; (mov r8, r8)
 80089b0:	0000024f 	.word	0x0000024f
 80089b4:	fffffdb7 	.word	0xfffffdb7
 80089b8:	fffffdd0 	.word	0xfffffdd0
 80089bc:	00000206 	.word	0x00000206
 80089c0:	00000207 	.word	0x00000207

080089c4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80089c4:	b590      	push	{r4, r7, lr}
 80089c6:	b08b      	sub	sp, #44	; 0x2c
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
 80089d0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	2200      	movs	r2, #0
 80089da:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80089dc:	2317      	movs	r3, #23
 80089de:	18fc      	adds	r4, r7, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	0018      	movs	r0, r3
 80089e4:	f7ff fc78 	bl	80082d8 <validate>
 80089e8:	0003      	movs	r3, r0
 80089ea:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80089ec:	2317      	movs	r3, #23
 80089ee:	18fb      	adds	r3, r7, r3
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d003      	beq.n	80089fe <f_write+0x3a>
 80089f6:	2317      	movs	r3, #23
 80089f8:	18fb      	adds	r3, r7, r3
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	e1c9      	b.n	8008d92 <f_write+0x3ce>
	if (fp->err)							/* Check error */
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	4ad1      	ldr	r2, [pc, #836]	; (8008d48 <f_write+0x384>)
 8008a02:	5c9b      	ldrb	r3, [r3, r2]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d003      	beq.n	8008a10 <f_write+0x4c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	4acf      	ldr	r2, [pc, #828]	; (8008d48 <f_write+0x384>)
 8008a0c:	5c9b      	ldrb	r3, [r3, r2]
 8008a0e:	e1c0      	b.n	8008d92 <f_write+0x3ce>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	4ace      	ldr	r2, [pc, #824]	; (8008d4c <f_write+0x388>)
 8008a14:	5c9b      	ldrb	r3, [r3, r2]
 8008a16:	001a      	movs	r2, r3
 8008a18:	2302      	movs	r3, #2
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	d101      	bne.n	8008a22 <f_write+0x5e>
		LEAVE_FF(fp->fs, FR_DENIED);
 8008a1e:	2307      	movs	r3, #7
 8008a20:	e1b7      	b.n	8008d92 <f_write+0x3ce>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	2382      	movs	r3, #130	; 0x82
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	58d2      	ldr	r2, [r2, r3]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	18d2      	adds	r2, r2, r3
 8008a2e:	68f9      	ldr	r1, [r7, #12]
 8008a30:	2382      	movs	r3, #130	; 0x82
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	58cb      	ldr	r3, [r1, r3]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d300      	bcc.n	8008a3c <f_write+0x78>
 8008a3a:	e17f      	b.n	8008d3c <f_write+0x378>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8008a40:	e17c      	b.n	8008d3c <f_write+0x378>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	2382      	movs	r3, #130	; 0x82
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	58d3      	ldr	r3, [r2, r3]
 8008a4a:	05db      	lsls	r3, r3, #23
 8008a4c:	0ddb      	lsrs	r3, r3, #23
 8008a4e:	d000      	beq.n	8008a52 <f_write+0x8e>
 8008a50:	e136      	b.n	8008cc0 <f_write+0x2fc>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	2382      	movs	r3, #130	; 0x82
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	58d3      	ldr	r3, [r2, r3]
 8008a5a:	0a5b      	lsrs	r3, r3, #9
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	68f9      	ldr	r1, [r7, #12]
 8008a60:	2380      	movs	r3, #128	; 0x80
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	58cb      	ldr	r3, [r1, r3]
 8008a66:	49ba      	ldr	r1, [pc, #744]	; (8008d50 <f_write+0x38c>)
 8008a68:	5c5b      	ldrb	r3, [r3, r1]
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	b2d9      	uxtb	r1, r3
 8008a6e:	2316      	movs	r3, #22
 8008a70:	18fb      	adds	r3, r7, r3
 8008a72:	400a      	ands	r2, r1
 8008a74:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
 8008a76:	2316      	movs	r3, #22
 8008a78:	18fb      	adds	r3, r7, r3
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d15d      	bne.n	8008b3c <f_write+0x178>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	2382      	movs	r3, #130	; 0x82
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	58d3      	ldr	r3, [r2, r3]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d112      	bne.n	8008ab2 <f_write+0xee>
					clst = fp->sclust;		/* Follow from the origin */
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	2384      	movs	r3, #132	; 0x84
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	58d3      	ldr	r3, [r2, r3]
 8008a94:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d129      	bne.n	8008af0 <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	2380      	movs	r3, #128	; 0x80
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	58d3      	ldr	r3, [r2, r3]
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	0018      	movs	r0, r3
 8008aa8:	f7fe fa80 	bl	8006fac <create_chain>
 8008aac:	0003      	movs	r3, r0
 8008aae:	627b      	str	r3, [r7, #36]	; 0x24
 8008ab0:	e01e      	b.n	8008af0 <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	2389      	movs	r3, #137	; 0x89
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	58d3      	ldr	r3, [r2, r3]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00b      	beq.n	8008ad6 <f_write+0x112>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	2382      	movs	r3, #130	; 0x82
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	58d2      	ldr	r2, [r2, r3]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	0011      	movs	r1, r2
 8008aca:	0018      	movs	r0, r3
 8008acc:	f7fe fb26 	bl	800711c <clmt_clust>
 8008ad0:	0003      	movs	r3, r0
 8008ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8008ad4:	e00c      	b.n	8008af0 <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	2380      	movs	r3, #128	; 0x80
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	58d0      	ldr	r0, [r2, r3]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	2385      	movs	r3, #133	; 0x85
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	58d3      	ldr	r3, [r2, r3]
 8008ae6:	0019      	movs	r1, r3
 8008ae8:	f7fe fa60 	bl	8006fac <create_chain>
 8008aec:	0003      	movs	r3, r0
 8008aee:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d100      	bne.n	8008af8 <f_write+0x134>
 8008af6:	e12f      	b.n	8008d58 <f_write+0x394>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d105      	bne.n	8008b0a <f_write+0x146>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	4a91      	ldr	r2, [pc, #580]	; (8008d48 <f_write+0x384>)
 8008b02:	2102      	movs	r1, #2
 8008b04:	5499      	strb	r1, [r3, r2]
 8008b06:	2302      	movs	r3, #2
 8008b08:	e143      	b.n	8008d92 <f_write+0x3ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	d105      	bne.n	8008b1c <f_write+0x158>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	4a8d      	ldr	r2, [pc, #564]	; (8008d48 <f_write+0x384>)
 8008b14:	2101      	movs	r1, #1
 8008b16:	5499      	strb	r1, [r3, r2]
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e13a      	b.n	8008d92 <f_write+0x3ce>
				fp->clust = clst;			/* Update current cluster */
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	2385      	movs	r3, #133	; 0x85
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b24:	50d1      	str	r1, [r2, r3]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	2384      	movs	r3, #132	; 0x84
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	58d3      	ldr	r3, [r2, r3]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d104      	bne.n	8008b3c <f_write+0x178>
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	2384      	movs	r3, #132	; 0x84
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b3a:	50d1      	str	r1, [r2, r3]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	4a83      	ldr	r2, [pc, #524]	; (8008d4c <f_write+0x388>)
 8008b40:	5c9b      	ldrb	r3, [r3, r2]
 8008b42:	001a      	movs	r2, r3
 8008b44:	2340      	movs	r3, #64	; 0x40
 8008b46:	4013      	ands	r3, r2
 8008b48:	d01e      	beq.n	8008b88 <f_write+0x1c4>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	2380      	movs	r3, #128	; 0x80
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	58d3      	ldr	r3, [r2, r3]
 8008b52:	4a80      	ldr	r2, [pc, #512]	; (8008d54 <f_write+0x390>)
 8008b54:	5c98      	ldrb	r0, [r3, r2]
 8008b56:	68f9      	ldr	r1, [r7, #12]
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	2386      	movs	r3, #134	; 0x86
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	58d2      	ldr	r2, [r2, r3]
 8008b60:	2301      	movs	r3, #1
 8008b62:	f7fd fbab 	bl	80062bc <disk_write>
 8008b66:	1e03      	subs	r3, r0, #0
 8008b68:	d005      	beq.n	8008b76 <f_write+0x1b2>
					ABORT(fp->fs, FR_DISK_ERR);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	4a76      	ldr	r2, [pc, #472]	; (8008d48 <f_write+0x384>)
 8008b6e:	2101      	movs	r1, #1
 8008b70:	5499      	strb	r1, [r3, r2]
 8008b72:	2301      	movs	r3, #1
 8008b74:	e10d      	b.n	8008d92 <f_write+0x3ce>
				fp->flag &= ~FA__DIRTY;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	4a74      	ldr	r2, [pc, #464]	; (8008d4c <f_write+0x388>)
 8008b7a:	5c9b      	ldrb	r3, [r3, r2]
 8008b7c:	2240      	movs	r2, #64	; 0x40
 8008b7e:	4393      	bics	r3, r2
 8008b80:	b2d9      	uxtb	r1, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	4a71      	ldr	r2, [pc, #452]	; (8008d4c <f_write+0x388>)
 8008b86:	5499      	strb	r1, [r3, r2]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	2380      	movs	r3, #128	; 0x80
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	58d0      	ldr	r0, [r2, r3]
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	2385      	movs	r3, #133	; 0x85
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	58d3      	ldr	r3, [r2, r3]
 8008b98:	0019      	movs	r1, r3
 8008b9a:	f7fd ff81 	bl	8006aa0 <clust2sect>
 8008b9e:	0003      	movs	r3, r0
 8008ba0:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d105      	bne.n	8008bb4 <f_write+0x1f0>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	4a67      	ldr	r2, [pc, #412]	; (8008d48 <f_write+0x384>)
 8008bac:	2102      	movs	r1, #2
 8008bae:	5499      	strb	r1, [r3, r2]
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	e0ee      	b.n	8008d92 <f_write+0x3ce>
			sect += csect;
 8008bb4:	2316      	movs	r3, #22
 8008bb6:	18fb      	adds	r3, r7, r3
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	18d3      	adds	r3, r2, r3
 8008bbe:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	0a5b      	lsrs	r3, r3, #9
 8008bc4:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d050      	beq.n	8008c6e <f_write+0x2aa>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8008bcc:	2316      	movs	r3, #22
 8008bce:	18fb      	adds	r3, r7, r3
 8008bd0:	781a      	ldrb	r2, [r3, #0]
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	18d3      	adds	r3, r2, r3
 8008bd6:	68f9      	ldr	r1, [r7, #12]
 8008bd8:	2280      	movs	r2, #128	; 0x80
 8008bda:	0092      	lsls	r2, r2, #2
 8008bdc:	588a      	ldr	r2, [r1, r2]
 8008bde:	495c      	ldr	r1, [pc, #368]	; (8008d50 <f_write+0x38c>)
 8008be0:	5c52      	ldrb	r2, [r2, r1]
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d90b      	bls.n	8008bfe <f_write+0x23a>
					cc = fp->fs->csize - csect;
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	2380      	movs	r3, #128	; 0x80
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	58d3      	ldr	r3, [r2, r3]
 8008bee:	4a58      	ldr	r2, [pc, #352]	; (8008d50 <f_write+0x38c>)
 8008bf0:	5c9b      	ldrb	r3, [r3, r2]
 8008bf2:	001a      	movs	r2, r3
 8008bf4:	2316      	movs	r3, #22
 8008bf6:	18fb      	adds	r3, r7, r3
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	2380      	movs	r3, #128	; 0x80
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	58d3      	ldr	r3, [r2, r3]
 8008c06:	4a53      	ldr	r2, [pc, #332]	; (8008d54 <f_write+0x390>)
 8008c08:	5c98      	ldrb	r0, [r3, r2]
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	69b9      	ldr	r1, [r7, #24]
 8008c10:	f7fd fb54 	bl	80062bc <disk_write>
 8008c14:	1e03      	subs	r3, r0, #0
 8008c16:	d005      	beq.n	8008c24 <f_write+0x260>
					ABORT(fp->fs, FR_DISK_ERR);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	4a4b      	ldr	r2, [pc, #300]	; (8008d48 <f_write+0x384>)
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	5499      	strb	r1, [r3, r2]
 8008c20:	2301      	movs	r3, #1
 8008c22:	e0b6      	b.n	8008d92 <f_write+0x3ce>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	2386      	movs	r3, #134	; 0x86
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	58d2      	ldr	r2, [r2, r3]
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	1ad2      	subs	r2, r2, r3
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d217      	bcs.n	8008c66 <f_write+0x2a2>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	2386      	movs	r3, #134	; 0x86
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	58d2      	ldr	r2, [r2, r3]
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	025b      	lsls	r3, r3, #9
 8008c46:	69ba      	ldr	r2, [r7, #24]
 8008c48:	18d1      	adds	r1, r2, r3
 8008c4a:	2380      	movs	r3, #128	; 0x80
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	001a      	movs	r2, r3
 8008c50:	f7fd fb88 	bl	8006364 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	4a3d      	ldr	r2, [pc, #244]	; (8008d4c <f_write+0x388>)
 8008c58:	5c9b      	ldrb	r3, [r3, r2]
 8008c5a:	2240      	movs	r2, #64	; 0x40
 8008c5c:	4393      	bics	r3, r2
 8008c5e:	b2d9      	uxtb	r1, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	4a3a      	ldr	r2, [pc, #232]	; (8008d4c <f_write+0x388>)
 8008c64:	5499      	strb	r1, [r3, r2]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	025b      	lsls	r3, r3, #9
 8008c6a:	623b      	str	r3, [r7, #32]
				continue;
 8008c6c:	e04e      	b.n	8008d0c <f_write+0x348>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	2386      	movs	r3, #134	; 0x86
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	58d2      	ldr	r2, [r2, r3]
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d01c      	beq.n	8008cb6 <f_write+0x2f2>
				if (fp->fptr < fp->fsize &&
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	2382      	movs	r3, #130	; 0x82
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	58d2      	ldr	r2, [r2, r3]
 8008c84:	68f9      	ldr	r1, [r7, #12]
 8008c86:	2383      	movs	r3, #131	; 0x83
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	58cb      	ldr	r3, [r1, r3]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d212      	bcs.n	8008cb6 <f_write+0x2f2>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	2380      	movs	r3, #128	; 0x80
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	58d3      	ldr	r3, [r2, r3]
 8008c98:	4a2e      	ldr	r2, [pc, #184]	; (8008d54 <f_write+0x390>)
 8008c9a:	5c98      	ldrb	r0, [r3, r2]
 8008c9c:	68f9      	ldr	r1, [r7, #12]
 8008c9e:	693a      	ldr	r2, [r7, #16]
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	f7fd fae1 	bl	8006268 <disk_read>
 8008ca6:	1e03      	subs	r3, r0, #0
				if (fp->fptr < fp->fsize &&
 8008ca8:	d005      	beq.n	8008cb6 <f_write+0x2f2>
						ABORT(fp->fs, FR_DISK_ERR);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	4a26      	ldr	r2, [pc, #152]	; (8008d48 <f_write+0x384>)
 8008cae:	2101      	movs	r1, #1
 8008cb0:	5499      	strb	r1, [r3, r2]
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e06d      	b.n	8008d92 <f_write+0x3ce>
			}
#endif
			fp->dsect = sect;
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	2386      	movs	r3, #134	; 0x86
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	6939      	ldr	r1, [r7, #16]
 8008cbe:	50d1      	str	r1, [r2, r3]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	2382      	movs	r3, #130	; 0x82
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	58d3      	ldr	r3, [r2, r3]
 8008cc8:	05db      	lsls	r3, r3, #23
 8008cca:	0ddb      	lsrs	r3, r3, #23
 8008ccc:	2280      	movs	r2, #128	; 0x80
 8008cce:	0092      	lsls	r2, r2, #2
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8008cd4:	6a3a      	ldr	r2, [r7, #32]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d901      	bls.n	8008ce0 <f_write+0x31c>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	2382      	movs	r3, #130	; 0x82
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	58d3      	ldr	r3, [r2, r3]
 8008ce8:	05db      	lsls	r3, r3, #23
 8008cea:	0ddb      	lsrs	r3, r3, #23
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	18d3      	adds	r3, r2, r3
 8008cf0:	6a3a      	ldr	r2, [r7, #32]
 8008cf2:	69b9      	ldr	r1, [r7, #24]
 8008cf4:	0018      	movs	r0, r3
 8008cf6:	f7fd fb35 	bl	8006364 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	4a13      	ldr	r2, [pc, #76]	; (8008d4c <f_write+0x388>)
 8008cfe:	5c9b      	ldrb	r3, [r3, r2]
 8008d00:	2240      	movs	r2, #64	; 0x40
 8008d02:	4313      	orrs	r3, r2
 8008d04:	b2d9      	uxtb	r1, r3
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	4a10      	ldr	r2, [pc, #64]	; (8008d4c <f_write+0x388>)
 8008d0a:	5499      	strb	r1, [r3, r2]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	6a3b      	ldr	r3, [r7, #32]
 8008d10:	18d3      	adds	r3, r2, r3
 8008d12:	61bb      	str	r3, [r7, #24]
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	2382      	movs	r3, #130	; 0x82
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	58d2      	ldr	r2, [r2, r3]
 8008d1c:	6a3b      	ldr	r3, [r7, #32]
 8008d1e:	18d1      	adds	r1, r2, r3
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	2382      	movs	r3, #130	; 0x82
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	50d1      	str	r1, [r2, r3]
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	6a3b      	ldr	r3, [r7, #32]
 8008d2e:	18d2      	adds	r2, r2, r3
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	6a3b      	ldr	r3, [r7, #32]
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d000      	beq.n	8008d44 <f_write+0x380>
 8008d42:	e67e      	b.n	8008a42 <f_write+0x7e>
 8008d44:	e009      	b.n	8008d5a <f_write+0x396>
 8008d46:	46c0      	nop			; (mov r8, r8)
 8008d48:	00000207 	.word	0x00000207
 8008d4c:	00000206 	.word	0x00000206
 8008d50:	00000202 	.word	0x00000202
 8008d54:	00000201 	.word	0x00000201
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008d58:	46c0      	nop			; (mov r8, r8)
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	2382      	movs	r3, #130	; 0x82
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	58d2      	ldr	r2, [r2, r3]
 8008d62:	68f9      	ldr	r1, [r7, #12]
 8008d64:	2383      	movs	r3, #131	; 0x83
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	58cb      	ldr	r3, [r1, r3]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d907      	bls.n	8008d7e <f_write+0x3ba>
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	2382      	movs	r3, #130	; 0x82
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	58d1      	ldr	r1, [r2, r3]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	2383      	movs	r3, #131	; 0x83
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	50d1      	str	r1, [r2, r3]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	4a06      	ldr	r2, [pc, #24]	; (8008d9c <f_write+0x3d8>)
 8008d82:	5c9b      	ldrb	r3, [r3, r2]
 8008d84:	2220      	movs	r2, #32
 8008d86:	4313      	orrs	r3, r2
 8008d88:	b2d9      	uxtb	r1, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4a03      	ldr	r2, [pc, #12]	; (8008d9c <f_write+0x3d8>)
 8008d8e:	5499      	strb	r1, [r3, r2]

	LEAVE_FF(fp->fs, FR_OK);
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	0018      	movs	r0, r3
 8008d94:	46bd      	mov	sp, r7
 8008d96:	b00b      	add	sp, #44	; 0x2c
 8008d98:	bd90      	pop	{r4, r7, pc}
 8008d9a:	46c0      	nop			; (mov r8, r8)
 8008d9c:	00000206 	.word	0x00000206

08008da0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008da0:	b590      	push	{r4, r7, lr}
 8008da2:	b087      	sub	sp, #28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8008da8:	2317      	movs	r3, #23
 8008daa:	18fc      	adds	r4, r7, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	0018      	movs	r0, r3
 8008db0:	f7ff fa92 	bl	80082d8 <validate>
 8008db4:	0003      	movs	r3, r0
 8008db6:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8008db8:	2317      	movs	r3, #23
 8008dba:	18fb      	adds	r3, r7, r3
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d000      	beq.n	8008dc4 <f_sync+0x24>
 8008dc2:	e0ba      	b.n	8008f3a <f_sync+0x19a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a60      	ldr	r2, [pc, #384]	; (8008f48 <f_sync+0x1a8>)
 8008dc8:	5c9b      	ldrb	r3, [r3, r2]
 8008dca:	001a      	movs	r2, r3
 8008dcc:	2320      	movs	r3, #32
 8008dce:	4013      	ands	r3, r2
 8008dd0:	d100      	bne.n	8008dd4 <f_sync+0x34>
 8008dd2:	e0b2      	b.n	8008f3a <f_sync+0x19a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a5c      	ldr	r2, [pc, #368]	; (8008f48 <f_sync+0x1a8>)
 8008dd8:	5c9b      	ldrb	r3, [r3, r2]
 8008dda:	001a      	movs	r2, r3
 8008ddc:	2340      	movs	r3, #64	; 0x40
 8008dde:	4013      	ands	r3, r2
 8008de0:	d01a      	beq.n	8008e18 <f_sync+0x78>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	2380      	movs	r3, #128	; 0x80
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	58d3      	ldr	r3, [r2, r3]
 8008dea:	4a58      	ldr	r2, [pc, #352]	; (8008f4c <f_sync+0x1ac>)
 8008dec:	5c98      	ldrb	r0, [r3, r2]
 8008dee:	6879      	ldr	r1, [r7, #4]
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	2386      	movs	r3, #134	; 0x86
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	58d2      	ldr	r2, [r2, r3]
 8008df8:	2301      	movs	r3, #1
 8008dfa:	f7fd fa5f 	bl	80062bc <disk_write>
 8008dfe:	1e03      	subs	r3, r0, #0
 8008e00:	d001      	beq.n	8008e06 <f_sync+0x66>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8008e02:	2301      	movs	r3, #1
 8008e04:	e09c      	b.n	8008f40 <f_sync+0x1a0>
				fp->flag &= ~FA__DIRTY;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a4f      	ldr	r2, [pc, #316]	; (8008f48 <f_sync+0x1a8>)
 8008e0a:	5c9b      	ldrb	r3, [r3, r2]
 8008e0c:	2240      	movs	r2, #64	; 0x40
 8008e0e:	4393      	bics	r3, r2
 8008e10:	b2d9      	uxtb	r1, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a4c      	ldr	r2, [pc, #304]	; (8008f48 <f_sync+0x1a8>)
 8008e16:	5499      	strb	r1, [r3, r2]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	2380      	movs	r3, #128	; 0x80
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	58d0      	ldr	r0, [r2, r3]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	2387      	movs	r3, #135	; 0x87
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	58d3      	ldr	r3, [r2, r3]
 8008e28:	2217      	movs	r2, #23
 8008e2a:	18bc      	adds	r4, r7, r2
 8008e2c:	0019      	movs	r1, r3
 8008e2e:	f7fd fd27 	bl	8006880 <move_window>
 8008e32:	0003      	movs	r3, r0
 8008e34:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
 8008e36:	2317      	movs	r3, #23
 8008e38:	18fb      	adds	r3, r7, r3
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d17c      	bne.n	8008f3a <f_sync+0x19a>
				dir = fp->dir_ptr;
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	2388      	movs	r3, #136	; 0x88
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	58d3      	ldr	r3, [r2, r3]
 8008e48:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	330b      	adds	r3, #11
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	320b      	adds	r2, #11
 8008e52:	7812      	ldrb	r2, [r2, #0]
 8008e54:	2120      	movs	r1, #32
 8008e56:	430a      	orrs	r2, r1
 8008e58:	b2d2      	uxtb	r2, r2
 8008e5a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	331c      	adds	r3, #28
 8008e60:	6879      	ldr	r1, [r7, #4]
 8008e62:	2283      	movs	r2, #131	; 0x83
 8008e64:	0092      	lsls	r2, r2, #2
 8008e66:	588a      	ldr	r2, [r1, r2]
 8008e68:	b2d2      	uxtb	r2, r2
 8008e6a:	701a      	strb	r2, [r3, #0]
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	331d      	adds	r3, #29
 8008e70:	6879      	ldr	r1, [r7, #4]
 8008e72:	2283      	movs	r2, #131	; 0x83
 8008e74:	0092      	lsls	r2, r2, #2
 8008e76:	588a      	ldr	r2, [r1, r2]
 8008e78:	b292      	uxth	r2, r2
 8008e7a:	0a12      	lsrs	r2, r2, #8
 8008e7c:	b292      	uxth	r2, r2
 8008e7e:	b2d2      	uxtb	r2, r2
 8008e80:	701a      	strb	r2, [r3, #0]
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	331e      	adds	r3, #30
 8008e86:	6879      	ldr	r1, [r7, #4]
 8008e88:	2283      	movs	r2, #131	; 0x83
 8008e8a:	0092      	lsls	r2, r2, #2
 8008e8c:	588a      	ldr	r2, [r1, r2]
 8008e8e:	0c12      	lsrs	r2, r2, #16
 8008e90:	b2d2      	uxtb	r2, r2
 8008e92:	701a      	strb	r2, [r3, #0]
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	331f      	adds	r3, #31
 8008e98:	6879      	ldr	r1, [r7, #4]
 8008e9a:	2283      	movs	r2, #131	; 0x83
 8008e9c:	0092      	lsls	r2, r2, #2
 8008e9e:	588a      	ldr	r2, [r1, r2]
 8008ea0:	0e12      	lsrs	r2, r2, #24
 8008ea2:	b2d2      	uxtb	r2, r2
 8008ea4:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	2384      	movs	r3, #132	; 0x84
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	58d2      	ldr	r2, [r2, r3]
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	0011      	movs	r1, r2
 8008eb2:	0018      	movs	r0, r3
 8008eb4:	f7fe fbc6 	bl	8007644 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8008eb8:	f001 f840 	bl	8009f3c <get_fattime>
 8008ebc:	0003      	movs	r3, r0
 8008ebe:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	3316      	adds	r3, #22
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	b2d2      	uxtb	r2, r2
 8008ec8:	701a      	strb	r2, [r3, #0]
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	3317      	adds	r3, #23
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	b292      	uxth	r2, r2
 8008ed2:	0a12      	lsrs	r2, r2, #8
 8008ed4:	b292      	uxth	r2, r2
 8008ed6:	b2d2      	uxtb	r2, r2
 8008ed8:	701a      	strb	r2, [r3, #0]
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	3318      	adds	r3, #24
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	0c12      	lsrs	r2, r2, #16
 8008ee2:	b2d2      	uxtb	r2, r2
 8008ee4:	701a      	strb	r2, [r3, #0]
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	3319      	adds	r3, #25
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	0e12      	lsrs	r2, r2, #24
 8008eee:	b2d2      	uxtb	r2, r2
 8008ef0:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	3312      	adds	r3, #18
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	701a      	strb	r2, [r3, #0]
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	3313      	adds	r3, #19
 8008efe:	2200      	movs	r2, #0
 8008f00:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a10      	ldr	r2, [pc, #64]	; (8008f48 <f_sync+0x1a8>)
 8008f06:	5c9b      	ldrb	r3, [r3, r2]
 8008f08:	2220      	movs	r2, #32
 8008f0a:	4393      	bics	r3, r2
 8008f0c:	b2d9      	uxtb	r1, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a0d      	ldr	r2, [pc, #52]	; (8008f48 <f_sync+0x1a8>)
 8008f12:	5499      	strb	r1, [r3, r2]
				fp->fs->wflag = 1;
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	2380      	movs	r3, #128	; 0x80
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	58d2      	ldr	r2, [r2, r3]
 8008f1c:	2381      	movs	r3, #129	; 0x81
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	2101      	movs	r1, #1
 8008f22:	54d1      	strb	r1, [r2, r3]
				res = sync_fs(fp->fs);
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	2380      	movs	r3, #128	; 0x80
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	58d3      	ldr	r3, [r2, r3]
 8008f2c:	2217      	movs	r2, #23
 8008f2e:	18bc      	adds	r4, r7, r2
 8008f30:	0018      	movs	r0, r3
 8008f32:	f7fd fce1 	bl	80068f8 <sync_fs>
 8008f36:	0003      	movs	r3, r0
 8008f38:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8008f3a:	2317      	movs	r3, #23
 8008f3c:	18fb      	adds	r3, r7, r3
 8008f3e:	781b      	ldrb	r3, [r3, #0]
}
 8008f40:	0018      	movs	r0, r3
 8008f42:	46bd      	mov	sp, r7
 8008f44:	b007      	add	sp, #28
 8008f46:	bd90      	pop	{r4, r7, pc}
 8008f48:	00000206 	.word	0x00000206
 8008f4c:	00000201 	.word	0x00000201

08008f50 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8008f50:	b590      	push	{r4, r7, lr}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008f58:	230f      	movs	r3, #15
 8008f5a:	18fc      	adds	r4, r7, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	0018      	movs	r0, r3
 8008f60:	f7ff ff1e 	bl	8008da0 <f_sync>
 8008f64:	0003      	movs	r3, r0
 8008f66:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 8008f68:	230f      	movs	r3, #15
 8008f6a:	18fb      	adds	r3, r7, r3
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d121      	bne.n	8008fb6 <f_close+0x66>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8008f72:	230f      	movs	r3, #15
 8008f74:	18fc      	adds	r4, r7, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	0018      	movs	r0, r3
 8008f7a:	f7ff f9ad 	bl	80082d8 <validate>
 8008f7e:	0003      	movs	r3, r0
 8008f80:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8008f82:	230f      	movs	r3, #15
 8008f84:	18fb      	adds	r3, r7, r3
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d114      	bne.n	8008fb6 <f_close+0x66>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	238a      	movs	r3, #138	; 0x8a
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	58d3      	ldr	r3, [r2, r3]
 8008f94:	220f      	movs	r2, #15
 8008f96:	18bc      	adds	r4, r7, r2
 8008f98:	0018      	movs	r0, r3
 8008f9a:	f7fd fb9b 	bl	80066d4 <dec_lock>
 8008f9e:	0003      	movs	r3, r0
 8008fa0:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 8008fa2:	230f      	movs	r3, #15
 8008fa4:	18fb      	adds	r3, r7, r3
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d104      	bne.n	8008fb6 <f_close+0x66>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	2380      	movs	r3, #128	; 0x80
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	50d1      	str	r1, [r2, r3]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008fb6:	230f      	movs	r3, #15
 8008fb8:	18fb      	adds	r3, r7, r3
 8008fba:	781b      	ldrb	r3, [r3, #0]
}
 8008fbc:	0018      	movs	r0, r3
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	b005      	add	sp, #20
 8008fc2:	bd90      	pop	{r4, r7, pc}

08008fc4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8008fc4:	b590      	push	{r4, r7, lr}
 8008fc6:	b091      	sub	sp, #68	; 0x44
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8008fce:	233f      	movs	r3, #63	; 0x3f
 8008fd0:	18fc      	adds	r4, r7, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	0018      	movs	r0, r3
 8008fd6:	f7ff f97f 	bl	80082d8 <validate>
 8008fda:	0003      	movs	r3, r0
 8008fdc:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008fde:	233f      	movs	r3, #63	; 0x3f
 8008fe0:	18fb      	adds	r3, r7, r3
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d003      	beq.n	8008ff0 <f_lseek+0x2c>
 8008fe8:	233f      	movs	r3, #63	; 0x3f
 8008fea:	18fb      	adds	r3, r7, r3
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	e28c      	b.n	800950a <f_lseek+0x546>
	if (fp->err)						/* Check error */
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4ada      	ldr	r2, [pc, #872]	; (800935c <f_lseek+0x398>)
 8008ff4:	5c9b      	ldrb	r3, [r3, r2]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d003      	beq.n	8009002 <f_lseek+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4ad7      	ldr	r2, [pc, #860]	; (800935c <f_lseek+0x398>)
 8008ffe:	5c9b      	ldrb	r3, [r3, r2]
 8009000:	e283      	b.n	800950a <f_lseek+0x546>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	2389      	movs	r3, #137	; 0x89
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	58d3      	ldr	r3, [r2, r3]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d100      	bne.n	8009010 <f_lseek+0x4c>
 800900e:	e103      	b.n	8009218 <f_lseek+0x254>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	3301      	adds	r3, #1
 8009014:	d16c      	bne.n	80090f0 <f_lseek+0x12c>
			tbl = fp->cltbl;
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	2389      	movs	r3, #137	; 0x89
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	58d3      	ldr	r3, [r2, r3]
 800901e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009022:	1d1a      	adds	r2, r3, #4
 8009024:	627a      	str	r2, [r7, #36]	; 0x24
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	623b      	str	r3, [r7, #32]
 800902a:	2302      	movs	r3, #2
 800902c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	2384      	movs	r3, #132	; 0x84
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	58d3      	ldr	r3, [r2, r3]
 8009036:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903a:	2b00      	cmp	r3, #0
 800903c:	d045      	beq.n	80090ca <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	61fb      	str	r3, [r7, #28]
 8009042:	2300      	movs	r3, #0
 8009044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009048:	3302      	adds	r3, #2
 800904a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800904c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904e:	61bb      	str	r3, [r7, #24]
 8009050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009052:	3301      	adds	r3, #1
 8009054:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	2380      	movs	r3, #128	; 0x80
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	58d3      	ldr	r3, [r2, r3]
 800905e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009060:	0011      	movs	r1, r2
 8009062:	0018      	movs	r0, r3
 8009064:	f7fd fd40 	bl	8006ae8 <get_fat>
 8009068:	0003      	movs	r3, r0
 800906a:	633b      	str	r3, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800906c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906e:	2b01      	cmp	r3, #1
 8009070:	d805      	bhi.n	800907e <f_lseek+0xba>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4ab9      	ldr	r2, [pc, #740]	; (800935c <f_lseek+0x398>)
 8009076:	2102      	movs	r1, #2
 8009078:	5499      	strb	r1, [r3, r2]
 800907a:	2302      	movs	r3, #2
 800907c:	e245      	b.n	800950a <f_lseek+0x546>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009080:	3301      	adds	r3, #1
 8009082:	d105      	bne.n	8009090 <f_lseek+0xcc>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4ab5      	ldr	r2, [pc, #724]	; (800935c <f_lseek+0x398>)
 8009088:	2101      	movs	r1, #1
 800908a:	5499      	strb	r1, [r3, r2]
 800908c:	2301      	movs	r3, #1
 800908e:	e23c      	b.n	800950a <f_lseek+0x546>
					} while (cl == pcl + 1);
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	1c5a      	adds	r2, r3, #1
 8009094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009096:	429a      	cmp	r2, r3
 8009098:	d0d8      	beq.n	800904c <f_lseek+0x88>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800909a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800909c:	6a3b      	ldr	r3, [r7, #32]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d809      	bhi.n	80090b6 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 80090a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a4:	1d1a      	adds	r2, r3, #4
 80090a6:	627a      	str	r2, [r7, #36]	; 0x24
 80090a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090aa:	601a      	str	r2, [r3, #0]
 80090ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ae:	1d1a      	adds	r2, r3, #4
 80090b0:	627a      	str	r2, [r7, #36]	; 0x24
 80090b2:	69fa      	ldr	r2, [r7, #28]
 80090b4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	2380      	movs	r3, #128	; 0x80
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	58d2      	ldr	r2, [r2, r3]
 80090be:	2385      	movs	r3, #133	; 0x85
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	58d2      	ldr	r2, [r2, r3]
 80090c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d8b9      	bhi.n	800903e <f_lseek+0x7a>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	2389      	movs	r3, #137	; 0x89
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	58d3      	ldr	r3, [r2, r3]
 80090d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090d4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 80090d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090d8:	6a3b      	ldr	r3, [r7, #32]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d803      	bhi.n	80090e6 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 80090de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e0:	2200      	movs	r2, #0
 80090e2:	601a      	str	r2, [r3, #0]
 80090e4:	e20e      	b.n	8009504 <f_lseek+0x540>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80090e6:	233f      	movs	r3, #63	; 0x3f
 80090e8:	18fb      	adds	r3, r7, r3
 80090ea:	2211      	movs	r2, #17
 80090ec:	701a      	strb	r2, [r3, #0]
 80090ee:	e209      	b.n	8009504 <f_lseek+0x540>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	2383      	movs	r3, #131	; 0x83
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	58d2      	ldr	r2, [r2, r3]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d204      	bcs.n	8009108 <f_lseek+0x144>
				ofs = fp->fsize;
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	2383      	movs	r3, #131	; 0x83
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	58d3      	ldr	r3, [r2, r3]
 8009106:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	2382      	movs	r3, #130	; 0x82
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	6839      	ldr	r1, [r7, #0]
 8009110:	50d1      	str	r1, [r2, r3]
			if (ofs) {
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d100      	bne.n	800911a <f_lseek+0x156>
 8009118:	e1f4      	b.n	8009504 <f_lseek+0x540>
				fp->clust = clmt_clust(fp, ofs - 1);
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	1e5a      	subs	r2, r3, #1
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	0011      	movs	r1, r2
 8009122:	0018      	movs	r0, r3
 8009124:	f7fd fffa 	bl	800711c <clmt_clust>
 8009128:	0001      	movs	r1, r0
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	2385      	movs	r3, #133	; 0x85
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	50d1      	str	r1, [r2, r3]
				dsc = clust2sect(fp->fs, fp->clust);
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	2380      	movs	r3, #128	; 0x80
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	58d0      	ldr	r0, [r2, r3]
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	2385      	movs	r3, #133	; 0x85
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	58d3      	ldr	r3, [r2, r3]
 8009142:	0019      	movs	r1, r3
 8009144:	f7fd fcac 	bl	8006aa0 <clust2sect>
 8009148:	0003      	movs	r3, r0
 800914a:	617b      	str	r3, [r7, #20]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d105      	bne.n	800915e <f_lseek+0x19a>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a81      	ldr	r2, [pc, #516]	; (800935c <f_lseek+0x398>)
 8009156:	2102      	movs	r1, #2
 8009158:	5499      	strb	r1, [r3, r2]
 800915a:	2302      	movs	r3, #2
 800915c:	e1d5      	b.n	800950a <f_lseek+0x546>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	3b01      	subs	r3, #1
 8009162:	0a5b      	lsrs	r3, r3, #9
 8009164:	6879      	ldr	r1, [r7, #4]
 8009166:	2280      	movs	r2, #128	; 0x80
 8009168:	0092      	lsls	r2, r2, #2
 800916a:	588a      	ldr	r2, [r1, r2]
 800916c:	497c      	ldr	r1, [pc, #496]	; (8009360 <f_lseek+0x39c>)
 800916e:	5c52      	ldrb	r2, [r2, r1]
 8009170:	3a01      	subs	r2, #1
 8009172:	4013      	ands	r3, r2
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	18d3      	adds	r3, r2, r3
 8009178:	617b      	str	r3, [r7, #20]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	2382      	movs	r3, #130	; 0x82
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	58d3      	ldr	r3, [r2, r3]
 8009182:	05db      	lsls	r3, r3, #23
 8009184:	0ddb      	lsrs	r3, r3, #23
 8009186:	d100      	bne.n	800918a <f_lseek+0x1c6>
 8009188:	e1bc      	b.n	8009504 <f_lseek+0x540>
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	2386      	movs	r3, #134	; 0x86
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	58d2      	ldr	r2, [r2, r3]
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	429a      	cmp	r2, r3
 8009196:	d100      	bne.n	800919a <f_lseek+0x1d6>
 8009198:	e1b4      	b.n	8009504 <f_lseek+0x540>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a71      	ldr	r2, [pc, #452]	; (8009364 <f_lseek+0x3a0>)
 800919e:	5c9b      	ldrb	r3, [r3, r2]
 80091a0:	001a      	movs	r2, r3
 80091a2:	2340      	movs	r3, #64	; 0x40
 80091a4:	4013      	ands	r3, r2
 80091a6:	d01e      	beq.n	80091e6 <f_lseek+0x222>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	2380      	movs	r3, #128	; 0x80
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	58d3      	ldr	r3, [r2, r3]
 80091b0:	4a6d      	ldr	r2, [pc, #436]	; (8009368 <f_lseek+0x3a4>)
 80091b2:	5c98      	ldrb	r0, [r3, r2]
 80091b4:	6879      	ldr	r1, [r7, #4]
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	2386      	movs	r3, #134	; 0x86
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	58d2      	ldr	r2, [r2, r3]
 80091be:	2301      	movs	r3, #1
 80091c0:	f7fd f87c 	bl	80062bc <disk_write>
 80091c4:	1e03      	subs	r3, r0, #0
 80091c6:	d005      	beq.n	80091d4 <f_lseek+0x210>
							ABORT(fp->fs, FR_DISK_ERR);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a64      	ldr	r2, [pc, #400]	; (800935c <f_lseek+0x398>)
 80091cc:	2101      	movs	r1, #1
 80091ce:	5499      	strb	r1, [r3, r2]
 80091d0:	2301      	movs	r3, #1
 80091d2:	e19a      	b.n	800950a <f_lseek+0x546>
						fp->flag &= ~FA__DIRTY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a63      	ldr	r2, [pc, #396]	; (8009364 <f_lseek+0x3a0>)
 80091d8:	5c9b      	ldrb	r3, [r3, r2]
 80091da:	2240      	movs	r2, #64	; 0x40
 80091dc:	4393      	bics	r3, r2
 80091de:	b2d9      	uxtb	r1, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a60      	ldr	r2, [pc, #384]	; (8009364 <f_lseek+0x3a0>)
 80091e4:	5499      	strb	r1, [r3, r2]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	2380      	movs	r3, #128	; 0x80
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	58d3      	ldr	r3, [r2, r3]
 80091ee:	4a5e      	ldr	r2, [pc, #376]	; (8009368 <f_lseek+0x3a4>)
 80091f0:	5c98      	ldrb	r0, [r3, r2]
 80091f2:	6879      	ldr	r1, [r7, #4]
 80091f4:	697a      	ldr	r2, [r7, #20]
 80091f6:	2301      	movs	r3, #1
 80091f8:	f7fd f836 	bl	8006268 <disk_read>
 80091fc:	1e03      	subs	r3, r0, #0
 80091fe:	d005      	beq.n	800920c <f_lseek+0x248>
						ABORT(fp->fs, FR_DISK_ERR);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a56      	ldr	r2, [pc, #344]	; (800935c <f_lseek+0x398>)
 8009204:	2101      	movs	r1, #1
 8009206:	5499      	strb	r1, [r3, r2]
 8009208:	2301      	movs	r3, #1
 800920a:	e17e      	b.n	800950a <f_lseek+0x546>
#endif
					fp->dsect = dsc;
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	2386      	movs	r3, #134	; 0x86
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	6979      	ldr	r1, [r7, #20]
 8009214:	50d1      	str	r1, [r2, r3]
 8009216:	e175      	b.n	8009504 <f_lseek+0x540>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	2383      	movs	r3, #131	; 0x83
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	58d2      	ldr	r2, [r2, r3]
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	429a      	cmp	r2, r3
 8009224:	d20b      	bcs.n	800923e <f_lseek+0x27a>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a4e      	ldr	r2, [pc, #312]	; (8009364 <f_lseek+0x3a0>)
 800922a:	5c9b      	ldrb	r3, [r3, r2]
 800922c:	001a      	movs	r2, r3
 800922e:	2302      	movs	r3, #2
 8009230:	4013      	ands	r3, r2
 8009232:	d104      	bne.n	800923e <f_lseek+0x27a>
#endif
			) ofs = fp->fsize;
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	2383      	movs	r3, #131	; 0x83
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	58d3      	ldr	r3, [r2, r3]
 800923c:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	2382      	movs	r3, #130	; 0x82
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	58d3      	ldr	r3, [r2, r3]
 8009246:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
 8009248:	2300      	movs	r3, #0
 800924a:	637b      	str	r3, [r7, #52]	; 0x34
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	2382      	movs	r3, #130	; 0x82
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009254:	50d1      	str	r1, [r2, r3]
		if (ofs) {
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d100      	bne.n	800925e <f_lseek+0x29a>
 800925c:	e0eb      	b.n	8009436 <f_lseek+0x472>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	2380      	movs	r3, #128	; 0x80
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	58d3      	ldr	r3, [r2, r3]
 8009266:	4a3e      	ldr	r2, [pc, #248]	; (8009360 <f_lseek+0x39c>)
 8009268:	5c9b      	ldrb	r3, [r3, r2]
 800926a:	025b      	lsls	r3, r3, #9
 800926c:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d027      	beq.n	80092c4 <f_lseek+0x300>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	3b01      	subs	r3, #1
 8009278:	68f9      	ldr	r1, [r7, #12]
 800927a:	0018      	movs	r0, r3
 800927c:	f7f6 ff44 	bl	8000108 <__udivsi3>
 8009280:	0003      	movs	r3, r0
 8009282:	001c      	movs	r4, r3
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	3b01      	subs	r3, #1
 8009288:	68f9      	ldr	r1, [r7, #12]
 800928a:	0018      	movs	r0, r3
 800928c:	f7f6 ff3c 	bl	8000108 <__udivsi3>
 8009290:	0003      	movs	r3, r0
			if (ifptr > 0 &&
 8009292:	429c      	cmp	r4, r3
 8009294:	d316      	bcc.n	80092c4 <f_lseek+0x300>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	3b01      	subs	r3, #1
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	4252      	negs	r2, r2
 800929e:	401a      	ands	r2, r3
 80092a0:	0011      	movs	r1, r2
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	2382      	movs	r3, #130	; 0x82
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	50d1      	str	r1, [r2, r3]
				ofs -= fp->fptr;
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	2382      	movs	r3, #130	; 0x82
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	58d3      	ldr	r3, [r2, r3]
 80092b2:	683a      	ldr	r2, [r7, #0]
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	2385      	movs	r3, #133	; 0x85
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	58d3      	ldr	r3, [r2, r3]
 80092c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80092c2:	e02d      	b.n	8009320 <f_lseek+0x35c>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	2384      	movs	r3, #132	; 0x84
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	58d3      	ldr	r3, [r2, r3]
 80092cc:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80092ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d120      	bne.n	8009316 <f_lseek+0x352>
					clst = create_chain(fp->fs, 0);
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	2380      	movs	r3, #128	; 0x80
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	58d3      	ldr	r3, [r2, r3]
 80092dc:	2100      	movs	r1, #0
 80092de:	0018      	movs	r0, r3
 80092e0:	f7fd fe64 	bl	8006fac <create_chain>
 80092e4:	0003      	movs	r3, r0
 80092e6:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80092e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d105      	bne.n	80092fa <f_lseek+0x336>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4a1a      	ldr	r2, [pc, #104]	; (800935c <f_lseek+0x398>)
 80092f2:	2102      	movs	r1, #2
 80092f4:	5499      	strb	r1, [r3, r2]
 80092f6:	2302      	movs	r3, #2
 80092f8:	e107      	b.n	800950a <f_lseek+0x546>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80092fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fc:	3301      	adds	r3, #1
 80092fe:	d105      	bne.n	800930c <f_lseek+0x348>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4a16      	ldr	r2, [pc, #88]	; (800935c <f_lseek+0x398>)
 8009304:	2101      	movs	r1, #1
 8009306:	5499      	strb	r1, [r3, r2]
 8009308:	2301      	movs	r3, #1
 800930a:	e0fe      	b.n	800950a <f_lseek+0x546>
					fp->sclust = clst;
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	2384      	movs	r3, #132	; 0x84
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009314:	50d1      	str	r1, [r2, r3]
				}
#endif
				fp->clust = clst;
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	2385      	movs	r3, #133	; 0x85
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800931e:	50d1      	str	r1, [r2, r3]
			}
			if (clst != 0) {
 8009320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009322:	2b00      	cmp	r3, #0
 8009324:	d100      	bne.n	8009328 <f_lseek+0x364>
 8009326:	e086      	b.n	8009436 <f_lseek+0x472>
				while (ofs > bcs) {						/* Cluster following loop */
 8009328:	e05a      	b.n	80093e0 <f_lseek+0x41c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a0d      	ldr	r2, [pc, #52]	; (8009364 <f_lseek+0x3a0>)
 800932e:	5c9b      	ldrb	r3, [r3, r2]
 8009330:	001a      	movs	r2, r3
 8009332:	2302      	movs	r3, #2
 8009334:	4013      	ands	r3, r2
 8009336:	d019      	beq.n	800936c <f_lseek+0x3a8>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	2380      	movs	r3, #128	; 0x80
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	58d3      	ldr	r3, [r2, r3]
 8009340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009342:	0011      	movs	r1, r2
 8009344:	0018      	movs	r0, r3
 8009346:	f7fd fe31 	bl	8006fac <create_chain>
 800934a:	0003      	movs	r3, r0
 800934c:	63bb      	str	r3, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800934e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009350:	2b00      	cmp	r3, #0
 8009352:	d116      	bne.n	8009382 <f_lseek+0x3be>
							ofs = bcs; break;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	603b      	str	r3, [r7, #0]
 8009358:	e046      	b.n	80093e8 <f_lseek+0x424>
 800935a:	46c0      	nop			; (mov r8, r8)
 800935c:	00000207 	.word	0x00000207
 8009360:	00000202 	.word	0x00000202
 8009364:	00000206 	.word	0x00000206
 8009368:	00000201 	.word	0x00000201
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	2380      	movs	r3, #128	; 0x80
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	58d3      	ldr	r3, [r2, r3]
 8009374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009376:	0011      	movs	r1, r2
 8009378:	0018      	movs	r0, r3
 800937a:	f7fd fbb5 	bl	8006ae8 <get_fat>
 800937e:	0003      	movs	r3, r0
 8009380:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009384:	3301      	adds	r3, #1
 8009386:	d105      	bne.n	8009394 <f_lseek+0x3d0>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a62      	ldr	r2, [pc, #392]	; (8009514 <f_lseek+0x550>)
 800938c:	2101      	movs	r1, #1
 800938e:	5499      	strb	r1, [r3, r2]
 8009390:	2301      	movs	r3, #1
 8009392:	e0ba      	b.n	800950a <f_lseek+0x546>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8009394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009396:	2b01      	cmp	r3, #1
 8009398:	d909      	bls.n	80093ae <f_lseek+0x3ea>
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	2380      	movs	r3, #128	; 0x80
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	58d2      	ldr	r2, [r2, r3]
 80093a2:	2385      	movs	r3, #133	; 0x85
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	58d2      	ldr	r2, [r2, r3]
 80093a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d805      	bhi.n	80093ba <f_lseek+0x3f6>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a58      	ldr	r2, [pc, #352]	; (8009514 <f_lseek+0x550>)
 80093b2:	2102      	movs	r1, #2
 80093b4:	5499      	strb	r1, [r3, r2]
 80093b6:	2302      	movs	r3, #2
 80093b8:	e0a7      	b.n	800950a <f_lseek+0x546>
					fp->clust = clst;
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	2385      	movs	r3, #133	; 0x85
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80093c2:	50d1      	str	r1, [r2, r3]
					fp->fptr += bcs;
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	2382      	movs	r3, #130	; 0x82
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	58d2      	ldr	r2, [r2, r3]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	18d1      	adds	r1, r2, r3
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	2382      	movs	r3, #130	; 0x82
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	50d1      	str	r1, [r2, r3]
					ofs -= bcs;
 80093d8:	683a      	ldr	r2, [r7, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 80093e0:	683a      	ldr	r2, [r7, #0]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d8a0      	bhi.n	800932a <f_lseek+0x366>
				}
				fp->fptr += ofs;
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	2382      	movs	r3, #130	; 0x82
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	58d2      	ldr	r2, [r2, r3]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	18d1      	adds	r1, r2, r3
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	2382      	movs	r3, #130	; 0x82
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	50d1      	str	r1, [r2, r3]
				if (ofs % SS(fp->fs)) {
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	05db      	lsls	r3, r3, #23
 8009400:	0ddb      	lsrs	r3, r3, #23
 8009402:	d018      	beq.n	8009436 <f_lseek+0x472>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	2380      	movs	r3, #128	; 0x80
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	58d3      	ldr	r3, [r2, r3]
 800940c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800940e:	0011      	movs	r1, r2
 8009410:	0018      	movs	r0, r3
 8009412:	f7fd fb45 	bl	8006aa0 <clust2sect>
 8009416:	0003      	movs	r3, r0
 8009418:	637b      	str	r3, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800941a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800941c:	2b00      	cmp	r3, #0
 800941e:	d105      	bne.n	800942c <f_lseek+0x468>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a3c      	ldr	r2, [pc, #240]	; (8009514 <f_lseek+0x550>)
 8009424:	2102      	movs	r1, #2
 8009426:	5499      	strb	r1, [r3, r2]
 8009428:	2302      	movs	r3, #2
 800942a:	e06e      	b.n	800950a <f_lseek+0x546>
					nsect += ofs / SS(fp->fs);
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	0a5b      	lsrs	r3, r3, #9
 8009430:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009432:	18d3      	adds	r3, r2, r3
 8009434:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	2382      	movs	r3, #130	; 0x82
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	58d3      	ldr	r3, [r2, r3]
 800943e:	05db      	lsls	r3, r3, #23
 8009440:	0ddb      	lsrs	r3, r3, #23
 8009442:	d044      	beq.n	80094ce <f_lseek+0x50a>
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	2386      	movs	r3, #134	; 0x86
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	58d2      	ldr	r2, [r2, r3]
 800944c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800944e:	429a      	cmp	r2, r3
 8009450:	d03d      	beq.n	80094ce <f_lseek+0x50a>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a30      	ldr	r2, [pc, #192]	; (8009518 <f_lseek+0x554>)
 8009456:	5c9b      	ldrb	r3, [r3, r2]
 8009458:	001a      	movs	r2, r3
 800945a:	2340      	movs	r3, #64	; 0x40
 800945c:	4013      	ands	r3, r2
 800945e:	d01e      	beq.n	800949e <f_lseek+0x4da>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	2380      	movs	r3, #128	; 0x80
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	58d3      	ldr	r3, [r2, r3]
 8009468:	4a2c      	ldr	r2, [pc, #176]	; (800951c <f_lseek+0x558>)
 800946a:	5c98      	ldrb	r0, [r3, r2]
 800946c:	6879      	ldr	r1, [r7, #4]
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	2386      	movs	r3, #134	; 0x86
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	58d2      	ldr	r2, [r2, r3]
 8009476:	2301      	movs	r3, #1
 8009478:	f7fc ff20 	bl	80062bc <disk_write>
 800947c:	1e03      	subs	r3, r0, #0
 800947e:	d005      	beq.n	800948c <f_lseek+0x4c8>
					ABORT(fp->fs, FR_DISK_ERR);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a24      	ldr	r2, [pc, #144]	; (8009514 <f_lseek+0x550>)
 8009484:	2101      	movs	r1, #1
 8009486:	5499      	strb	r1, [r3, r2]
 8009488:	2301      	movs	r3, #1
 800948a:	e03e      	b.n	800950a <f_lseek+0x546>
				fp->flag &= ~FA__DIRTY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a22      	ldr	r2, [pc, #136]	; (8009518 <f_lseek+0x554>)
 8009490:	5c9b      	ldrb	r3, [r3, r2]
 8009492:	2240      	movs	r2, #64	; 0x40
 8009494:	4393      	bics	r3, r2
 8009496:	b2d9      	uxtb	r1, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a1f      	ldr	r2, [pc, #124]	; (8009518 <f_lseek+0x554>)
 800949c:	5499      	strb	r1, [r3, r2]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	2380      	movs	r3, #128	; 0x80
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	58d3      	ldr	r3, [r2, r3]
 80094a6:	4a1d      	ldr	r2, [pc, #116]	; (800951c <f_lseek+0x558>)
 80094a8:	5c98      	ldrb	r0, [r3, r2]
 80094aa:	6879      	ldr	r1, [r7, #4]
 80094ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094ae:	2301      	movs	r3, #1
 80094b0:	f7fc feda 	bl	8006268 <disk_read>
 80094b4:	1e03      	subs	r3, r0, #0
 80094b6:	d005      	beq.n	80094c4 <f_lseek+0x500>
				ABORT(fp->fs, FR_DISK_ERR);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a16      	ldr	r2, [pc, #88]	; (8009514 <f_lseek+0x550>)
 80094bc:	2101      	movs	r1, #1
 80094be:	5499      	strb	r1, [r3, r2]
 80094c0:	2301      	movs	r3, #1
 80094c2:	e022      	b.n	800950a <f_lseek+0x546>
#endif
			fp->dsect = nsect;
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	2386      	movs	r3, #134	; 0x86
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80094cc:	50d1      	str	r1, [r2, r3]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	2382      	movs	r3, #130	; 0x82
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	58d2      	ldr	r2, [r2, r3]
 80094d6:	6879      	ldr	r1, [r7, #4]
 80094d8:	2383      	movs	r3, #131	; 0x83
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	58cb      	ldr	r3, [r1, r3]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d910      	bls.n	8009504 <f_lseek+0x540>
			fp->fsize = fp->fptr;
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	2382      	movs	r3, #130	; 0x82
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	58d1      	ldr	r1, [r2, r3]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	2383      	movs	r3, #131	; 0x83
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	50d1      	str	r1, [r2, r3]
			fp->flag |= FA__WRITTEN;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a08      	ldr	r2, [pc, #32]	; (8009518 <f_lseek+0x554>)
 80094f6:	5c9b      	ldrb	r3, [r3, r2]
 80094f8:	2220      	movs	r2, #32
 80094fa:	4313      	orrs	r3, r2
 80094fc:	b2d9      	uxtb	r1, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a05      	ldr	r2, [pc, #20]	; (8009518 <f_lseek+0x554>)
 8009502:	5499      	strb	r1, [r3, r2]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8009504:	233f      	movs	r3, #63	; 0x3f
 8009506:	18fb      	adds	r3, r7, r3
 8009508:	781b      	ldrb	r3, [r3, #0]
}
 800950a:	0018      	movs	r0, r3
 800950c:	46bd      	mov	sp, r7
 800950e:	b011      	add	sp, #68	; 0x44
 8009510:	bd90      	pop	{r4, r7, pc}
 8009512:	46c0      	nop			; (mov r8, r8)
 8009514:	00000207 	.word	0x00000207
 8009518:	00000206 	.word	0x00000206
 800951c:	00000201 	.word	0x00000201

08009520 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	000a      	movs	r2, r1
 800952a:	1cfb      	adds	r3, r7, #3
 800952c:	701a      	strb	r2, [r3, #0]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800952e:	1cfb      	adds	r3, r7, #3
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	2b0a      	cmp	r3, #10
 8009534:	d104      	bne.n	8009540 <putc_bfd+0x20>
		putc_bfd(pb, '\r');
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	210d      	movs	r1, #13
 800953a:	0018      	movs	r0, r3
 800953c:	f7ff fff0 	bl	8009520 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2b00      	cmp	r3, #0
 800954a:	db26      	blt.n	800959a <putc_bfd+0x7a>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	1c5a      	adds	r2, r3, #1
 8009550:	60fa      	str	r2, [r7, #12]
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	18d3      	adds	r3, r2, r3
 8009556:	1cfa      	adds	r2, r7, #3
 8009558:	7812      	ldrb	r2, [r2, #0]
 800955a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2b3c      	cmp	r3, #60	; 0x3c
 8009560:	dd12      	ble.n	8009588 <putc_bfd+0x68>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6818      	ldr	r0, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	330c      	adds	r3, #12
 800956a:	0019      	movs	r1, r3
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	2308      	movs	r3, #8
 8009570:	18fb      	adds	r3, r7, r3
 8009572:	f7ff fa27 	bl	80089c4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009576:	68ba      	ldr	r2, [r7, #8]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	429a      	cmp	r2, r3
 800957c:	d101      	bne.n	8009582 <putc_bfd+0x62>
 800957e:	2300      	movs	r3, #0
 8009580:	e001      	b.n	8009586 <putc_bfd+0x66>
 8009582:	2301      	movs	r3, #1
 8009584:	425b      	negs	r3, r3
 8009586:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	1c5a      	adds	r2, r3, #1
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	609a      	str	r2, [r3, #8]
 8009598:	e000      	b.n	800959c <putc_bfd+0x7c>
	if (i < 0) return;
 800959a:	46c0      	nop			; (mov r8, r8)
}
 800959c:	46bd      	mov	sp, r7
 800959e:	b004      	add	sp, #16
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <f_putc>:

int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fp		/* Pointer to the file object */
)
{
 80095a2:	b590      	push	{r4, r7, lr}
 80095a4:	b097      	sub	sp, #92	; 0x5c
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	0002      	movs	r2, r0
 80095aa:	6039      	str	r1, [r7, #0]
 80095ac:	1dfb      	adds	r3, r7, #7
 80095ae:	701a      	strb	r2, [r3, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;			/* Initialize output buffer */
 80095b0:	230c      	movs	r3, #12
 80095b2:	18fb      	adds	r3, r7, r3
 80095b4:	683a      	ldr	r2, [r7, #0]
 80095b6:	601a      	str	r2, [r3, #0]
	pb.nchr = pb.idx = 0;
 80095b8:	230c      	movs	r3, #12
 80095ba:	18fb      	adds	r3, r7, r3
 80095bc:	2200      	movs	r2, #0
 80095be:	605a      	str	r2, [r3, #4]
 80095c0:	230c      	movs	r3, #12
 80095c2:	18fb      	adds	r3, r7, r3
 80095c4:	685a      	ldr	r2, [r3, #4]
 80095c6:	230c      	movs	r3, #12
 80095c8:	18fb      	adds	r3, r7, r3
 80095ca:	609a      	str	r2, [r3, #8]

	putc_bfd(&pb, c);	/* Put a character */
 80095cc:	1dfb      	adds	r3, r7, #7
 80095ce:	781a      	ldrb	r2, [r3, #0]
 80095d0:	230c      	movs	r3, #12
 80095d2:	18fb      	adds	r3, r7, r3
 80095d4:	0011      	movs	r1, r2
 80095d6:	0018      	movs	r0, r3
 80095d8:	f7ff ffa2 	bl	8009520 <putc_bfd>

	if (   pb.idx >= 0	/* Flush buffered characters to the file */
 80095dc:	230c      	movs	r3, #12
 80095de:	18fb      	adds	r3, r7, r3
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	db1d      	blt.n	8009622 <f_putc+0x80>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80095e6:	230c      	movs	r3, #12
 80095e8:	18fb      	adds	r3, r7, r3
 80095ea:	6818      	ldr	r0, [r3, #0]
 80095ec:	230c      	movs	r3, #12
 80095ee:	18fb      	adds	r3, r7, r3
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	001c      	movs	r4, r3
 80095f4:	2308      	movs	r3, #8
 80095f6:	18fa      	adds	r2, r7, r3
 80095f8:	230c      	movs	r3, #12
 80095fa:	18fb      	adds	r3, r7, r3
 80095fc:	330c      	adds	r3, #12
 80095fe:	0019      	movs	r1, r3
 8009600:	0013      	movs	r3, r2
 8009602:	0022      	movs	r2, r4
 8009604:	f7ff f9de 	bl	80089c4 <f_write>
 8009608:	1e03      	subs	r3, r0, #0
 800960a:	d10a      	bne.n	8009622 <f_putc+0x80>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800960c:	230c      	movs	r3, #12
 800960e:	18fb      	adds	r3, r7, r3
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	001a      	movs	r2, r3
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	429a      	cmp	r2, r3
 8009618:	d103      	bne.n	8009622 <f_putc+0x80>
 800961a:	230c      	movs	r3, #12
 800961c:	18fb      	adds	r3, r7, r3
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	e001      	b.n	8009626 <f_putc+0x84>
	return EOF;
 8009622:	2301      	movs	r3, #1
 8009624:	425b      	negs	r3, r3
}
 8009626:	0018      	movs	r0, r3
 8009628:	46bd      	mov	sp, r7
 800962a:	b017      	add	sp, #92	; 0x5c
 800962c:	bd90      	pop	{r4, r7, pc}

0800962e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800962e:	b590      	push	{r4, r7, lr}
 8009630:	b097      	sub	sp, #92	; 0x5c
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
 8009636:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8009638:	230c      	movs	r3, #12
 800963a:	18fb      	adds	r3, r7, r3
 800963c:	683a      	ldr	r2, [r7, #0]
 800963e:	601a      	str	r2, [r3, #0]
	pb.nchr = pb.idx = 0;
 8009640:	230c      	movs	r3, #12
 8009642:	18fb      	adds	r3, r7, r3
 8009644:	2200      	movs	r2, #0
 8009646:	605a      	str	r2, [r3, #4]
 8009648:	230c      	movs	r3, #12
 800964a:	18fb      	adds	r3, r7, r3
 800964c:	685a      	ldr	r2, [r3, #4]
 800964e:	230c      	movs	r3, #12
 8009650:	18fb      	adds	r3, r7, r3
 8009652:	609a      	str	r2, [r3, #8]

	while (*str)			/* Put the string */
 8009654:	e009      	b.n	800966a <f_puts+0x3c>
		putc_bfd(&pb, *str++);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	1c5a      	adds	r2, r3, #1
 800965a:	607a      	str	r2, [r7, #4]
 800965c:	781a      	ldrb	r2, [r3, #0]
 800965e:	230c      	movs	r3, #12
 8009660:	18fb      	adds	r3, r7, r3
 8009662:	0011      	movs	r1, r2
 8009664:	0018      	movs	r0, r3
 8009666:	f7ff ff5b 	bl	8009520 <putc_bfd>
	while (*str)			/* Put the string */
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1f1      	bne.n	8009656 <f_puts+0x28>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8009672:	230c      	movs	r3, #12
 8009674:	18fb      	adds	r3, r7, r3
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	db1d      	blt.n	80096b8 <f_puts+0x8a>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800967c:	230c      	movs	r3, #12
 800967e:	18fb      	adds	r3, r7, r3
 8009680:	6818      	ldr	r0, [r3, #0]
 8009682:	230c      	movs	r3, #12
 8009684:	18fb      	adds	r3, r7, r3
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	001c      	movs	r4, r3
 800968a:	2308      	movs	r3, #8
 800968c:	18fa      	adds	r2, r7, r3
 800968e:	230c      	movs	r3, #12
 8009690:	18fb      	adds	r3, r7, r3
 8009692:	330c      	adds	r3, #12
 8009694:	0019      	movs	r1, r3
 8009696:	0013      	movs	r3, r2
 8009698:	0022      	movs	r2, r4
 800969a:	f7ff f993 	bl	80089c4 <f_write>
 800969e:	1e03      	subs	r3, r0, #0
 80096a0:	d10a      	bne.n	80096b8 <f_puts+0x8a>
		&& (UINT)pb.idx == nw) return pb.nchr;
 80096a2:	230c      	movs	r3, #12
 80096a4:	18fb      	adds	r3, r7, r3
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	001a      	movs	r2, r3
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d103      	bne.n	80096b8 <f_puts+0x8a>
 80096b0:	230c      	movs	r3, #12
 80096b2:	18fb      	adds	r3, r7, r3
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	e001      	b.n	80096bc <f_puts+0x8e>
	return EOF;
 80096b8:	2301      	movs	r3, #1
 80096ba:	425b      	negs	r3, r3
}
 80096bc:	0018      	movs	r0, r3
 80096be:	46bd      	mov	sp, r7
 80096c0:	b017      	add	sp, #92	; 0x5c
 80096c2:	bd90      	pop	{r4, r7, pc}

080096c4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80096c4:	b40e      	push	{r1, r2, r3}
 80096c6:	b590      	push	{r4, r7, lr}
 80096c8:	b0a2      	sub	sp, #136	; 0x88
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
	DWORD v;
	TCHAR c, d, s[16], *p;
	putbuff pb;


	pb.fp = fp;				/* Initialize output buffer */
 80096ce:	2308      	movs	r3, #8
 80096d0:	18fb      	adds	r3, r7, r3
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	601a      	str	r2, [r3, #0]
	pb.nchr = pb.idx = 0;
 80096d6:	2308      	movs	r3, #8
 80096d8:	18fb      	adds	r3, r7, r3
 80096da:	2200      	movs	r2, #0
 80096dc:	605a      	str	r2, [r3, #4]
 80096de:	2308      	movs	r3, #8
 80096e0:	18fb      	adds	r3, r7, r3
 80096e2:	685a      	ldr	r2, [r3, #4]
 80096e4:	2308      	movs	r3, #8
 80096e6:	18fb      	adds	r3, r7, r3
 80096e8:	609a      	str	r2, [r3, #8]

	va_start(arp, fmt);
 80096ea:	2398      	movs	r3, #152	; 0x98
 80096ec:	18fb      	adds	r3, r7, r3
 80096ee:	66bb      	str	r3, [r7, #104]	; 0x68

	for (;;) {
		c = *fmt++;
 80096f0:	2394      	movs	r3, #148	; 0x94
 80096f2:	18fb      	adds	r3, r7, r3
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	1c5a      	adds	r2, r3, #1
 80096f8:	2194      	movs	r1, #148	; 0x94
 80096fa:	1879      	adds	r1, r7, r1
 80096fc:	600a      	str	r2, [r1, #0]
 80096fe:	2273      	movs	r2, #115	; 0x73
 8009700:	18ba      	adds	r2, r7, r2
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	7013      	strb	r3, [r2, #0]
		if (c == 0) break;			/* End of string */
 8009706:	2373      	movs	r3, #115	; 0x73
 8009708:	18fb      	adds	r3, r7, r3
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d100      	bne.n	8009712 <f_printf+0x4e>
 8009710:	e1ed      	b.n	8009aee <f_printf+0x42a>
		if (c != '%') {				/* Non escape character */
 8009712:	2373      	movs	r3, #115	; 0x73
 8009714:	18fb      	adds	r3, r7, r3
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	2b25      	cmp	r3, #37	; 0x25
 800971a:	d009      	beq.n	8009730 <f_printf+0x6c>
			putc_bfd(&pb, c);
 800971c:	2373      	movs	r3, #115	; 0x73
 800971e:	18fb      	adds	r3, r7, r3
 8009720:	781a      	ldrb	r2, [r3, #0]
 8009722:	2308      	movs	r3, #8
 8009724:	18fb      	adds	r3, r7, r3
 8009726:	0011      	movs	r1, r2
 8009728:	0018      	movs	r0, r3
 800972a:	f7ff fef9 	bl	8009520 <putc_bfd>
			continue;
 800972e:	e1dd      	b.n	8009aec <f_printf+0x428>
		}
		w = f = 0;
 8009730:	2387      	movs	r3, #135	; 0x87
 8009732:	18fb      	adds	r3, r7, r3
 8009734:	2200      	movs	r2, #0
 8009736:	701a      	strb	r2, [r3, #0]
 8009738:	2300      	movs	r3, #0
 800973a:	67bb      	str	r3, [r7, #120]	; 0x78
		c = *fmt++;
 800973c:	2394      	movs	r3, #148	; 0x94
 800973e:	18fb      	adds	r3, r7, r3
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	1c5a      	adds	r2, r3, #1
 8009744:	2194      	movs	r1, #148	; 0x94
 8009746:	1879      	adds	r1, r7, r1
 8009748:	600a      	str	r2, [r1, #0]
 800974a:	2273      	movs	r2, #115	; 0x73
 800974c:	18ba      	adds	r2, r7, r2
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	7013      	strb	r3, [r2, #0]
		if (c == '0') {				/* Flag: '0' padding */
 8009752:	2373      	movs	r3, #115	; 0x73
 8009754:	18fb      	adds	r3, r7, r3
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	2b30      	cmp	r3, #48	; 0x30
 800975a:	d10f      	bne.n	800977c <f_printf+0xb8>
			f = 1; c = *fmt++;
 800975c:	2387      	movs	r3, #135	; 0x87
 800975e:	18fb      	adds	r3, r7, r3
 8009760:	2201      	movs	r2, #1
 8009762:	701a      	strb	r2, [r3, #0]
 8009764:	2394      	movs	r3, #148	; 0x94
 8009766:	18fb      	adds	r3, r7, r3
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	1c5a      	adds	r2, r3, #1
 800976c:	2194      	movs	r1, #148	; 0x94
 800976e:	1879      	adds	r1, r7, r1
 8009770:	600a      	str	r2, [r1, #0]
 8009772:	2273      	movs	r2, #115	; 0x73
 8009774:	18ba      	adds	r2, r7, r2
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	7013      	strb	r3, [r2, #0]
 800977a:	e02b      	b.n	80097d4 <f_printf+0x110>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800977c:	2373      	movs	r3, #115	; 0x73
 800977e:	18fb      	adds	r3, r7, r3
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	2b2d      	cmp	r3, #45	; 0x2d
 8009784:	d126      	bne.n	80097d4 <f_printf+0x110>
				f = 2; c = *fmt++;
 8009786:	2387      	movs	r3, #135	; 0x87
 8009788:	18fb      	adds	r3, r7, r3
 800978a:	2202      	movs	r2, #2
 800978c:	701a      	strb	r2, [r3, #0]
 800978e:	2394      	movs	r3, #148	; 0x94
 8009790:	18fb      	adds	r3, r7, r3
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	1c5a      	adds	r2, r3, #1
 8009796:	2194      	movs	r1, #148	; 0x94
 8009798:	1879      	adds	r1, r7, r1
 800979a:	600a      	str	r2, [r1, #0]
 800979c:	2273      	movs	r2, #115	; 0x73
 800979e:	18ba      	adds	r2, r7, r2
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	7013      	strb	r3, [r2, #0]
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80097a4:	e016      	b.n	80097d4 <f_printf+0x110>
			w = w * 10 + c - '0';
 80097a6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80097a8:	0013      	movs	r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	189b      	adds	r3, r3, r2
 80097ae:	005b      	lsls	r3, r3, #1
 80097b0:	001a      	movs	r2, r3
 80097b2:	2373      	movs	r3, #115	; 0x73
 80097b4:	18fb      	adds	r3, r7, r3
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	18d3      	adds	r3, r2, r3
 80097ba:	3b30      	subs	r3, #48	; 0x30
 80097bc:	67bb      	str	r3, [r7, #120]	; 0x78
			c = *fmt++;
 80097be:	2394      	movs	r3, #148	; 0x94
 80097c0:	18fb      	adds	r3, r7, r3
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	1c5a      	adds	r2, r3, #1
 80097c6:	2194      	movs	r1, #148	; 0x94
 80097c8:	1879      	adds	r1, r7, r1
 80097ca:	600a      	str	r2, [r1, #0]
 80097cc:	2273      	movs	r2, #115	; 0x73
 80097ce:	18ba      	adds	r2, r7, r2
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	7013      	strb	r3, [r2, #0]
		while (IsDigit(c)) {		/* Precision */
 80097d4:	2373      	movs	r3, #115	; 0x73
 80097d6:	18fb      	adds	r3, r7, r3
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	2b2f      	cmp	r3, #47	; 0x2f
 80097dc:	d904      	bls.n	80097e8 <f_printf+0x124>
 80097de:	2373      	movs	r3, #115	; 0x73
 80097e0:	18fb      	adds	r3, r7, r3
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	2b39      	cmp	r3, #57	; 0x39
 80097e6:	d9de      	bls.n	80097a6 <f_printf+0xe2>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80097e8:	2373      	movs	r3, #115	; 0x73
 80097ea:	18fb      	adds	r3, r7, r3
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	2b6c      	cmp	r3, #108	; 0x6c
 80097f0:	d004      	beq.n	80097fc <f_printf+0x138>
 80097f2:	2373      	movs	r3, #115	; 0x73
 80097f4:	18fb      	adds	r3, r7, r3
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	2b4c      	cmp	r3, #76	; 0x4c
 80097fa:	d112      	bne.n	8009822 <f_printf+0x15e>
			f |= 4; c = *fmt++;
 80097fc:	2387      	movs	r3, #135	; 0x87
 80097fe:	18fb      	adds	r3, r7, r3
 8009800:	2287      	movs	r2, #135	; 0x87
 8009802:	18ba      	adds	r2, r7, r2
 8009804:	7812      	ldrb	r2, [r2, #0]
 8009806:	2104      	movs	r1, #4
 8009808:	430a      	orrs	r2, r1
 800980a:	701a      	strb	r2, [r3, #0]
 800980c:	2394      	movs	r3, #148	; 0x94
 800980e:	18fb      	adds	r3, r7, r3
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	1c5a      	adds	r2, r3, #1
 8009814:	2194      	movs	r1, #148	; 0x94
 8009816:	1879      	adds	r1, r7, r1
 8009818:	600a      	str	r2, [r1, #0]
 800981a:	2273      	movs	r2, #115	; 0x73
 800981c:	18ba      	adds	r2, r7, r2
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	7013      	strb	r3, [r2, #0]
		}
		if (!c) break;
 8009822:	2373      	movs	r3, #115	; 0x73
 8009824:	18fb      	adds	r3, r7, r3
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d100      	bne.n	800982e <f_printf+0x16a>
 800982c:	e161      	b.n	8009af2 <f_printf+0x42e>
		d = c;
 800982e:	2372      	movs	r3, #114	; 0x72
 8009830:	18fb      	adds	r3, r7, r3
 8009832:	2273      	movs	r2, #115	; 0x73
 8009834:	18ba      	adds	r2, r7, r2
 8009836:	7812      	ldrb	r2, [r2, #0]
 8009838:	701a      	strb	r2, [r3, #0]
		if (IsLower(d)) d -= 0x20;
 800983a:	2372      	movs	r3, #114	; 0x72
 800983c:	18fb      	adds	r3, r7, r3
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	2b60      	cmp	r3, #96	; 0x60
 8009842:	d90b      	bls.n	800985c <f_printf+0x198>
 8009844:	2372      	movs	r3, #114	; 0x72
 8009846:	18fb      	adds	r3, r7, r3
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	2b7a      	cmp	r3, #122	; 0x7a
 800984c:	d806      	bhi.n	800985c <f_printf+0x198>
 800984e:	2372      	movs	r3, #114	; 0x72
 8009850:	18fb      	adds	r3, r7, r3
 8009852:	2272      	movs	r2, #114	; 0x72
 8009854:	18ba      	adds	r2, r7, r2
 8009856:	7812      	ldrb	r2, [r2, #0]
 8009858:	3a20      	subs	r2, #32
 800985a:	701a      	strb	r2, [r3, #0]
		switch (d) {				/* Type is... */
 800985c:	2372      	movs	r3, #114	; 0x72
 800985e:	18fb      	adds	r3, r7, r3
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	3b42      	subs	r3, #66	; 0x42
 8009864:	2b16      	cmp	r3, #22
 8009866:	d865      	bhi.n	8009934 <f_printf+0x270>
 8009868:	009a      	lsls	r2, r3, #2
 800986a:	4bb8      	ldr	r3, [pc, #736]	; (8009b4c <f_printf+0x488>)
 800986c:	18d3      	adds	r3, r2, r3
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	469f      	mov	pc, r3
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8009872:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009874:	1d1a      	adds	r2, r3, #4
 8009876:	66ba      	str	r2, [r7, #104]	; 0x68
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	66fb      	str	r3, [r7, #108]	; 0x6c
			for (j = 0; p[j]; j++) ;
 800987c:	2300      	movs	r3, #0
 800987e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009880:	e002      	b.n	8009888 <f_printf+0x1c4>
 8009882:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009884:	3301      	adds	r3, #1
 8009886:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009888:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800988a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800988c:	18d3      	adds	r3, r2, r3
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1f6      	bne.n	8009882 <f_printf+0x1be>
			if (!(f & 2)) {
 8009894:	2387      	movs	r3, #135	; 0x87
 8009896:	18fb      	adds	r3, r7, r3
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	2202      	movs	r2, #2
 800989c:	4013      	ands	r3, r2
 800989e:	d117      	bne.n	80098d0 <f_printf+0x20c>
				while (j++ < w) putc_bfd(&pb, ' ');
 80098a0:	e005      	b.n	80098ae <f_printf+0x1ea>
 80098a2:	2308      	movs	r3, #8
 80098a4:	18fb      	adds	r3, r7, r3
 80098a6:	2120      	movs	r1, #32
 80098a8:	0018      	movs	r0, r3
 80098aa:	f7ff fe39 	bl	8009520 <putc_bfd>
 80098ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80098b0:	1c5a      	adds	r2, r3, #1
 80098b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80098b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d3f3      	bcc.n	80098a2 <f_printf+0x1de>
			}
			while (*p) putc_bfd(&pb, *p++);
 80098ba:	e009      	b.n	80098d0 <f_printf+0x20c>
 80098bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098be:	1c5a      	adds	r2, r3, #1
 80098c0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80098c2:	781a      	ldrb	r2, [r3, #0]
 80098c4:	2308      	movs	r3, #8
 80098c6:	18fb      	adds	r3, r7, r3
 80098c8:	0011      	movs	r1, r2
 80098ca:	0018      	movs	r0, r3
 80098cc:	f7ff fe28 	bl	8009520 <putc_bfd>
 80098d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1f1      	bne.n	80098bc <f_printf+0x1f8>
			while (j++ < w) putc_bfd(&pb, ' ');
 80098d8:	e005      	b.n	80098e6 <f_printf+0x222>
 80098da:	2308      	movs	r3, #8
 80098dc:	18fb      	adds	r3, r7, r3
 80098de:	2120      	movs	r1, #32
 80098e0:	0018      	movs	r0, r3
 80098e2:	f7ff fe1d 	bl	8009520 <putc_bfd>
 80098e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80098e8:	1c5a      	adds	r2, r3, #1
 80098ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80098ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d3f3      	bcc.n	80098da <f_printf+0x216>
			continue;
 80098f2:	e0fb      	b.n	8009aec <f_printf+0x428>
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80098f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098f6:	1d1a      	adds	r2, r3, #4
 80098f8:	66ba      	str	r2, [r7, #104]	; 0x68
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	2308      	movs	r3, #8
 8009900:	18fb      	adds	r3, r7, r3
 8009902:	0011      	movs	r1, r2
 8009904:	0018      	movs	r0, r3
 8009906:	f7ff fe0b 	bl	8009520 <putc_bfd>
 800990a:	e0ef      	b.n	8009aec <f_printf+0x428>
		case 'B' :					/* Binary */
			r = 2; break;
 800990c:	2386      	movs	r3, #134	; 0x86
 800990e:	18fb      	adds	r3, r7, r3
 8009910:	2202      	movs	r2, #2
 8009912:	701a      	strb	r2, [r3, #0]
 8009914:	e018      	b.n	8009948 <f_printf+0x284>
		case 'O' :					/* Octal */
			r = 8; break;
 8009916:	2386      	movs	r3, #134	; 0x86
 8009918:	18fb      	adds	r3, r7, r3
 800991a:	2208      	movs	r2, #8
 800991c:	701a      	strb	r2, [r3, #0]
 800991e:	e013      	b.n	8009948 <f_printf+0x284>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8009920:	2386      	movs	r3, #134	; 0x86
 8009922:	18fb      	adds	r3, r7, r3
 8009924:	220a      	movs	r2, #10
 8009926:	701a      	strb	r2, [r3, #0]
 8009928:	e00e      	b.n	8009948 <f_printf+0x284>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800992a:	2386      	movs	r3, #134	; 0x86
 800992c:	18fb      	adds	r3, r7, r3
 800992e:	2210      	movs	r2, #16
 8009930:	701a      	strb	r2, [r3, #0]
 8009932:	e009      	b.n	8009948 <f_printf+0x284>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8009934:	2373      	movs	r3, #115	; 0x73
 8009936:	18fb      	adds	r3, r7, r3
 8009938:	781a      	ldrb	r2, [r3, #0]
 800993a:	2308      	movs	r3, #8
 800993c:	18fb      	adds	r3, r7, r3
 800993e:	0011      	movs	r1, r2
 8009940:	0018      	movs	r0, r3
 8009942:	f7ff fded 	bl	8009520 <putc_bfd>
 8009946:	e0d1      	b.n	8009aec <f_printf+0x428>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8009948:	2387      	movs	r3, #135	; 0x87
 800994a:	18fb      	adds	r3, r7, r3
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	2204      	movs	r2, #4
 8009950:	4013      	ands	r3, r2
 8009952:	d004      	beq.n	800995e <f_printf+0x29a>
 8009954:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009956:	1d1a      	adds	r2, r3, #4
 8009958:	66ba      	str	r2, [r7, #104]	; 0x68
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	e00d      	b.n	800997a <f_printf+0x2b6>
 800995e:	2372      	movs	r3, #114	; 0x72
 8009960:	18fb      	adds	r3, r7, r3
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	2b44      	cmp	r3, #68	; 0x44
 8009966:	d104      	bne.n	8009972 <f_printf+0x2ae>
 8009968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800996a:	1d1a      	adds	r2, r3, #4
 800996c:	66ba      	str	r2, [r7, #104]	; 0x68
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	e003      	b.n	800997a <f_printf+0x2b6>
 8009972:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009974:	1d1a      	adds	r2, r3, #4
 8009976:	66ba      	str	r2, [r7, #104]	; 0x68
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	677b      	str	r3, [r7, #116]	; 0x74
		if (d == 'D' && (v & 0x80000000)) {
 800997c:	2372      	movs	r3, #114	; 0x72
 800997e:	18fb      	adds	r3, r7, r3
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	2b44      	cmp	r3, #68	; 0x44
 8009984:	d10d      	bne.n	80099a2 <f_printf+0x2de>
 8009986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009988:	2b00      	cmp	r3, #0
 800998a:	da0a      	bge.n	80099a2 <f_printf+0x2de>
			v = 0 - v;
 800998c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800998e:	425b      	negs	r3, r3
 8009990:	677b      	str	r3, [r7, #116]	; 0x74
			f |= 8;
 8009992:	2387      	movs	r3, #135	; 0x87
 8009994:	18fb      	adds	r3, r7, r3
 8009996:	2287      	movs	r2, #135	; 0x87
 8009998:	18ba      	adds	r2, r7, r2
 800999a:	7812      	ldrb	r2, [r2, #0]
 800999c:	2108      	movs	r1, #8
 800999e:	430a      	orrs	r2, r1
 80099a0:	701a      	strb	r2, [r3, #0]
		}
		i = 0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	2280      	movs	r2, #128	; 0x80
 80099a6:	18ba      	adds	r2, r7, r2
 80099a8:	6013      	str	r3, [r2, #0]
		do {
			d = (TCHAR)(v % r); v /= r;
 80099aa:	2386      	movs	r3, #134	; 0x86
 80099ac:	18fb      	adds	r3, r7, r3
 80099ae:	781a      	ldrb	r2, [r3, #0]
 80099b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099b2:	0011      	movs	r1, r2
 80099b4:	0018      	movs	r0, r3
 80099b6:	f7f6 fc2d 	bl	8000214 <__aeabi_uidivmod>
 80099ba:	000b      	movs	r3, r1
 80099bc:	001a      	movs	r2, r3
 80099be:	2372      	movs	r3, #114	; 0x72
 80099c0:	18fb      	adds	r3, r7, r3
 80099c2:	701a      	strb	r2, [r3, #0]
 80099c4:	2386      	movs	r3, #134	; 0x86
 80099c6:	18fb      	adds	r3, r7, r3
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	0019      	movs	r1, r3
 80099cc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80099ce:	f7f6 fb9b 	bl	8000108 <__udivsi3>
 80099d2:	0003      	movs	r3, r0
 80099d4:	677b      	str	r3, [r7, #116]	; 0x74
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80099d6:	2372      	movs	r3, #114	; 0x72
 80099d8:	18fb      	adds	r3, r7, r3
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	2b09      	cmp	r3, #9
 80099de:	d90e      	bls.n	80099fe <f_printf+0x33a>
 80099e0:	2373      	movs	r3, #115	; 0x73
 80099e2:	18fb      	adds	r3, r7, r3
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	2b78      	cmp	r3, #120	; 0x78
 80099e8:	d101      	bne.n	80099ee <f_printf+0x32a>
 80099ea:	2327      	movs	r3, #39	; 0x27
 80099ec:	e000      	b.n	80099f0 <f_printf+0x32c>
 80099ee:	2307      	movs	r3, #7
 80099f0:	2272      	movs	r2, #114	; 0x72
 80099f2:	18ba      	adds	r2, r7, r2
 80099f4:	2172      	movs	r1, #114	; 0x72
 80099f6:	1879      	adds	r1, r7, r1
 80099f8:	7809      	ldrb	r1, [r1, #0]
 80099fa:	185b      	adds	r3, r3, r1
 80099fc:	7013      	strb	r3, [r2, #0]
			s[i++] = d + '0';
 80099fe:	2380      	movs	r3, #128	; 0x80
 8009a00:	18fb      	adds	r3, r7, r3
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	1c5a      	adds	r2, r3, #1
 8009a06:	2180      	movs	r1, #128	; 0x80
 8009a08:	1879      	adds	r1, r7, r1
 8009a0a:	600a      	str	r2, [r1, #0]
 8009a0c:	2272      	movs	r2, #114	; 0x72
 8009a0e:	18ba      	adds	r2, r7, r2
 8009a10:	7812      	ldrb	r2, [r2, #0]
 8009a12:	3230      	adds	r2, #48	; 0x30
 8009a14:	b2d1      	uxtb	r1, r2
 8009a16:	2254      	movs	r2, #84	; 0x54
 8009a18:	18ba      	adds	r2, r7, r2
 8009a1a:	54d1      	strb	r1, [r2, r3]
		} while (v && i < sizeof s / sizeof s[0]);
 8009a1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d004      	beq.n	8009a2c <f_printf+0x368>
 8009a22:	2380      	movs	r3, #128	; 0x80
 8009a24:	18fb      	adds	r3, r7, r3
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2b0f      	cmp	r3, #15
 8009a2a:	d9be      	bls.n	80099aa <f_printf+0x2e6>
		if (f & 8) s[i++] = '-';
 8009a2c:	2387      	movs	r3, #135	; 0x87
 8009a2e:	18fb      	adds	r3, r7, r3
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	2208      	movs	r2, #8
 8009a34:	4013      	ands	r3, r2
 8009a36:	d00a      	beq.n	8009a4e <f_printf+0x38a>
 8009a38:	2380      	movs	r3, #128	; 0x80
 8009a3a:	18fb      	adds	r3, r7, r3
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	1c5a      	adds	r2, r3, #1
 8009a40:	2180      	movs	r1, #128	; 0x80
 8009a42:	1879      	adds	r1, r7, r1
 8009a44:	600a      	str	r2, [r1, #0]
 8009a46:	2254      	movs	r2, #84	; 0x54
 8009a48:	18ba      	adds	r2, r7, r2
 8009a4a:	212d      	movs	r1, #45	; 0x2d
 8009a4c:	54d1      	strb	r1, [r2, r3]
		j = i; d = (f & 1) ? '0' : ' ';
 8009a4e:	2380      	movs	r3, #128	; 0x80
 8009a50:	18fb      	adds	r3, r7, r3
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a56:	2387      	movs	r3, #135	; 0x87
 8009a58:	18fb      	adds	r3, r7, r3
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	4013      	ands	r3, r2
 8009a60:	d001      	beq.n	8009a66 <f_printf+0x3a2>
 8009a62:	2230      	movs	r2, #48	; 0x30
 8009a64:	e000      	b.n	8009a68 <f_printf+0x3a4>
 8009a66:	2220      	movs	r2, #32
 8009a68:	2372      	movs	r3, #114	; 0x72
 8009a6a:	18fb      	adds	r3, r7, r3
 8009a6c:	701a      	strb	r2, [r3, #0]
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8009a6e:	e008      	b.n	8009a82 <f_printf+0x3be>
 8009a70:	2372      	movs	r3, #114	; 0x72
 8009a72:	18fb      	adds	r3, r7, r3
 8009a74:	781a      	ldrb	r2, [r3, #0]
 8009a76:	2308      	movs	r3, #8
 8009a78:	18fb      	adds	r3, r7, r3
 8009a7a:	0011      	movs	r1, r2
 8009a7c:	0018      	movs	r0, r3
 8009a7e:	f7ff fd4f 	bl	8009520 <putc_bfd>
 8009a82:	2387      	movs	r3, #135	; 0x87
 8009a84:	18fb      	adds	r3, r7, r3
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	2202      	movs	r2, #2
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	d105      	bne.n	8009a9a <f_printf+0x3d6>
 8009a8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a90:	1c5a      	adds	r2, r3, #1
 8009a92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009a94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d3ea      	bcc.n	8009a70 <f_printf+0x3ac>
		do putc_bfd(&pb, s[--i]); while (i);
 8009a9a:	2380      	movs	r3, #128	; 0x80
 8009a9c:	18fb      	adds	r3, r7, r3
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	2280      	movs	r2, #128	; 0x80
 8009aa4:	18ba      	adds	r2, r7, r2
 8009aa6:	6013      	str	r3, [r2, #0]
 8009aa8:	2354      	movs	r3, #84	; 0x54
 8009aaa:	18fa      	adds	r2, r7, r3
 8009aac:	2380      	movs	r3, #128	; 0x80
 8009aae:	18fb      	adds	r3, r7, r3
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	18d3      	adds	r3, r2, r3
 8009ab4:	781a      	ldrb	r2, [r3, #0]
 8009ab6:	2308      	movs	r3, #8
 8009ab8:	18fb      	adds	r3, r7, r3
 8009aba:	0011      	movs	r1, r2
 8009abc:	0018      	movs	r0, r3
 8009abe:	f7ff fd2f 	bl	8009520 <putc_bfd>
 8009ac2:	2380      	movs	r3, #128	; 0x80
 8009ac4:	18fb      	adds	r3, r7, r3
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1e6      	bne.n	8009a9a <f_printf+0x3d6>
		while (j++ < w) putc_bfd(&pb, d);
 8009acc:	e008      	b.n	8009ae0 <f_printf+0x41c>
 8009ace:	2372      	movs	r3, #114	; 0x72
 8009ad0:	18fb      	adds	r3, r7, r3
 8009ad2:	781a      	ldrb	r2, [r3, #0]
 8009ad4:	2308      	movs	r3, #8
 8009ad6:	18fb      	adds	r3, r7, r3
 8009ad8:	0011      	movs	r1, r2
 8009ada:	0018      	movs	r0, r3
 8009adc:	f7ff fd20 	bl	8009520 <putc_bfd>
 8009ae0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009ae2:	1c5a      	adds	r2, r3, #1
 8009ae4:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009ae6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d3f0      	bcc.n	8009ace <f_printf+0x40a>
		c = *fmt++;
 8009aec:	e600      	b.n	80096f0 <f_printf+0x2c>
		if (c == 0) break;			/* End of string */
 8009aee:	46c0      	nop			; (mov r8, r8)
 8009af0:	e000      	b.n	8009af4 <f_printf+0x430>
		if (!c) break;
 8009af2:	46c0      	nop			; (mov r8, r8)
	}

	va_end(arp);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8009af4:	2308      	movs	r3, #8
 8009af6:	18fb      	adds	r3, r7, r3
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	db1d      	blt.n	8009b3a <f_printf+0x476>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8009afe:	2308      	movs	r3, #8
 8009b00:	18fb      	adds	r3, r7, r3
 8009b02:	6818      	ldr	r0, [r3, #0]
 8009b04:	2308      	movs	r3, #8
 8009b06:	18fb      	adds	r3, r7, r3
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	001c      	movs	r4, r3
 8009b0c:	2364      	movs	r3, #100	; 0x64
 8009b0e:	18fa      	adds	r2, r7, r3
 8009b10:	2308      	movs	r3, #8
 8009b12:	18fb      	adds	r3, r7, r3
 8009b14:	330c      	adds	r3, #12
 8009b16:	0019      	movs	r1, r3
 8009b18:	0013      	movs	r3, r2
 8009b1a:	0022      	movs	r2, r4
 8009b1c:	f7fe ff52 	bl	80089c4 <f_write>
 8009b20:	1e03      	subs	r3, r0, #0
 8009b22:	d10a      	bne.n	8009b3a <f_printf+0x476>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8009b24:	2308      	movs	r3, #8
 8009b26:	18fb      	adds	r3, r7, r3
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	001a      	movs	r2, r3
 8009b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d103      	bne.n	8009b3a <f_printf+0x476>
 8009b32:	2308      	movs	r3, #8
 8009b34:	18fb      	adds	r3, r7, r3
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	e001      	b.n	8009b3e <f_printf+0x47a>
	return EOF;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	425b      	negs	r3, r3
}
 8009b3e:	0018      	movs	r0, r3
 8009b40:	46bd      	mov	sp, r7
 8009b42:	b022      	add	sp, #136	; 0x88
 8009b44:	bc90      	pop	{r4, r7}
 8009b46:	bc08      	pop	{r3}
 8009b48:	b003      	add	sp, #12
 8009b4a:	4718      	bx	r3
 8009b4c:	0800c4ec 	.word	0x0800c4ec

08009b50 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b086      	sub	sp, #24
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	1dfb      	adds	r3, r7, #7
 8009b5c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8009b5e:	2317      	movs	r3, #23
 8009b60:	18fb      	adds	r3, r7, r3
 8009b62:	2201      	movs	r2, #1
 8009b64:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8009b66:	2316      	movs	r3, #22
 8009b68:	18fb      	adds	r3, r7, r3
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	701a      	strb	r2, [r3, #0]
  
  if(disk.nbr <= _VOLUMES)
 8009b6e:	4b23      	ldr	r3, [pc, #140]	; (8009bfc <FATFS_LinkDriverEx+0xac>)
 8009b70:	7a5b      	ldrb	r3, [r3, #9]
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d839      	bhi.n	8009bec <FATFS_LinkDriverEx+0x9c>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009b78:	4b20      	ldr	r3, [pc, #128]	; (8009bfc <FATFS_LinkDriverEx+0xac>)
 8009b7a:	7a5b      	ldrb	r3, [r3, #9]
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	001a      	movs	r2, r3
 8009b80:	4b1e      	ldr	r3, [pc, #120]	; (8009bfc <FATFS_LinkDriverEx+0xac>)
 8009b82:	2100      	movs	r1, #0
 8009b84:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8009b86:	4b1d      	ldr	r3, [pc, #116]	; (8009bfc <FATFS_LinkDriverEx+0xac>)
 8009b88:	7a5b      	ldrb	r3, [r3, #9]
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	4a1b      	ldr	r2, [pc, #108]	; (8009bfc <FATFS_LinkDriverEx+0xac>)
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	18d3      	adds	r3, r2, r3
 8009b92:	3304      	adds	r3, #4
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;  
 8009b98:	4b18      	ldr	r3, [pc, #96]	; (8009bfc <FATFS_LinkDriverEx+0xac>)
 8009b9a:	7a5b      	ldrb	r3, [r3, #9]
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	001a      	movs	r2, r3
 8009ba0:	4b16      	ldr	r3, [pc, #88]	; (8009bfc <FATFS_LinkDriverEx+0xac>)
 8009ba2:	189b      	adds	r3, r3, r2
 8009ba4:	1dfa      	adds	r2, r7, #7
 8009ba6:	7812      	ldrb	r2, [r2, #0]
 8009ba8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009baa:	4b14      	ldr	r3, [pc, #80]	; (8009bfc <FATFS_LinkDriverEx+0xac>)
 8009bac:	7a5b      	ldrb	r3, [r3, #9]
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	1c5a      	adds	r2, r3, #1
 8009bb2:	b2d1      	uxtb	r1, r2
 8009bb4:	4a11      	ldr	r2, [pc, #68]	; (8009bfc <FATFS_LinkDriverEx+0xac>)
 8009bb6:	7251      	strb	r1, [r2, #9]
 8009bb8:	2216      	movs	r2, #22
 8009bba:	18ba      	adds	r2, r7, r2
 8009bbc:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8009bbe:	2316      	movs	r3, #22
 8009bc0:	18fb      	adds	r3, r7, r3
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	3330      	adds	r3, #48	; 0x30
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	223a      	movs	r2, #58	; 0x3a
 8009bd2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	3302      	adds	r3, #2
 8009bd8:	222f      	movs	r2, #47	; 0x2f
 8009bda:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	3303      	adds	r3, #3
 8009be0:	2200      	movs	r2, #0
 8009be2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009be4:	2317      	movs	r3, #23
 8009be6:	18fb      	adds	r3, r7, r3
 8009be8:	2200      	movs	r2, #0
 8009bea:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8009bec:	2317      	movs	r3, #23
 8009bee:	18fb      	adds	r3, r7, r3
 8009bf0:	781b      	ldrb	r3, [r3, #0]
}
 8009bf2:	0018      	movs	r0, r3
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	b006      	add	sp, #24
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	46c0      	nop			; (mov r8, r8)
 8009bfc:	200000c0 	.word	0x200000c0

08009c00 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009c0a:	6839      	ldr	r1, [r7, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	0018      	movs	r0, r3
 8009c12:	f7ff ff9d 	bl	8009b50 <FATFS_LinkDriverEx>
 8009c16:	0003      	movs	r3, r0
}
 8009c18:	0018      	movs	r0, r3
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	b002      	add	sp, #8
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <NonOS_sheduler>:
uint8_t byteRecev;
uint8_t byteSTM, byteSTM_Old;
uint8_t byteOMAP, byteOMAP_Old;
// function
void NonOS_sheduler()
{
 8009c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c22:	b087      	sub	sp, #28
 8009c24:	af04      	add	r7, sp, #16
//#define STMLogFile  USERFile
    /* init code for FATFS */
    MX_FATFS_Init();
 8009c26:	f000 f973 	bl	8009f10 <MX_FATFS_Init>

    // enable switch uart omap and stm
    HAL_GPIO_WritePin(ENB_CONV_GPIO_Port, ENB_CONV_Pin, GPIO_PIN_SET);
 8009c2a:	4b9f      	ldr	r3, [pc, #636]	; (8009ea8 <NonOS_sheduler+0x288>)
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	2101      	movs	r1, #1
 8009c30:	0018      	movs	r0, r3
 8009c32:	f7f8 fce1 	bl	80025f8 <HAL_GPIO_WritePin>

    /* USER CODE BEGIN 5 */
	result = f_mount (&USERFatFS, USERPath, 1);
 8009c36:	499d      	ldr	r1, [pc, #628]	; (8009eac <NonOS_sheduler+0x28c>)
 8009c38:	4b9d      	ldr	r3, [pc, #628]	; (8009eb0 <NonOS_sheduler+0x290>)
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	0018      	movs	r0, r3
 8009c3e:	f7fe fb89 	bl	8008354 <f_mount>
 8009c42:	0003      	movs	r3, r0
 8009c44:	001a      	movs	r2, r3
 8009c46:	4b9b      	ldr	r3, [pc, #620]	; (8009eb4 <NonOS_sheduler+0x294>)
 8009c48:	701a      	strb	r2, [r3, #0]
	assert_param(result == FR_OK);
 8009c4a:	4b9a      	ldr	r3, [pc, #616]	; (8009eb4 <NonOS_sheduler+0x294>)
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d004      	beq.n	8009c5c <NonOS_sheduler+0x3c>
 8009c52:	4b99      	ldr	r3, [pc, #612]	; (8009eb8 <NonOS_sheduler+0x298>)
 8009c54:	2140      	movs	r1, #64	; 0x40
 8009c56:	0018      	movs	r0, r3
 8009c58:	f000 fd1e 	bl	800a698 <assert_failed>
	result = f_open_write_append (&USERFile, "OMAP_LOG");
 8009c5c:	4a97      	ldr	r2, [pc, #604]	; (8009ebc <NonOS_sheduler+0x29c>)
 8009c5e:	4b98      	ldr	r3, [pc, #608]	; (8009ec0 <NonOS_sheduler+0x2a0>)
 8009c60:	0011      	movs	r1, r2
 8009c62:	0018      	movs	r0, r3
 8009c64:	f000 f9b6 	bl	8009fd4 <f_open_write_append>
 8009c68:	0003      	movs	r3, r0
 8009c6a:	001a      	movs	r2, r3
 8009c6c:	4b91      	ldr	r3, [pc, #580]	; (8009eb4 <NonOS_sheduler+0x294>)
 8009c6e:	701a      	strb	r2, [r3, #0]
	assert_param(result == FR_OK);
 8009c70:	4b90      	ldr	r3, [pc, #576]	; (8009eb4 <NonOS_sheduler+0x294>)
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d004      	beq.n	8009c82 <NonOS_sheduler+0x62>
 8009c78:	4b8f      	ldr	r3, [pc, #572]	; (8009eb8 <NonOS_sheduler+0x298>)
 8009c7a:	2142      	movs	r1, #66	; 0x42
 8009c7c:	0018      	movs	r0, r3
 8009c7e:	f000 fd0b 	bl	800a698 <assert_failed>
	result = f_open_write_append (&STMLogFile, "STM_LOG");
 8009c82:	4a90      	ldr	r2, [pc, #576]	; (8009ec4 <NonOS_sheduler+0x2a4>)
 8009c84:	4b90      	ldr	r3, [pc, #576]	; (8009ec8 <NonOS_sheduler+0x2a8>)
 8009c86:	0011      	movs	r1, r2
 8009c88:	0018      	movs	r0, r3
 8009c8a:	f000 f9a3 	bl	8009fd4 <f_open_write_append>
 8009c8e:	0003      	movs	r3, r0
 8009c90:	001a      	movs	r2, r3
 8009c92:	4b88      	ldr	r3, [pc, #544]	; (8009eb4 <NonOS_sheduler+0x294>)
 8009c94:	701a      	strb	r2, [r3, #0]
	assert_param(result == FR_OK);
 8009c96:	4b87      	ldr	r3, [pc, #540]	; (8009eb4 <NonOS_sheduler+0x294>)
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d004      	beq.n	8009ca8 <NonOS_sheduler+0x88>
 8009c9e:	4b86      	ldr	r3, [pc, #536]	; (8009eb8 <NonOS_sheduler+0x298>)
 8009ca0:	2144      	movs	r1, #68	; 0x44
 8009ca2:	0018      	movs	r0, r3
 8009ca4:	f000 fcf8 	bl	800a698 <assert_failed>
    // verify driver OK
//    assert(result == FR_OK);

	result = f_puts (
 8009ca8:	4a85      	ldr	r2, [pc, #532]	; (8009ec0 <NonOS_sheduler+0x2a0>)
 8009caa:	4b88      	ldr	r3, [pc, #544]	; (8009ecc <NonOS_sheduler+0x2ac>)
 8009cac:	0011      	movs	r1, r2
 8009cae:	0018      	movs	r0, r3
 8009cb0:	f7ff fcbd 	bl	800962e <f_puts>
 8009cb4:	0003      	movs	r3, r0
 8009cb6:	b2da      	uxtb	r2, r3
 8009cb8:	4b7e      	ldr	r3, [pc, #504]	; (8009eb4 <NonOS_sheduler+0x294>)
 8009cba:	701a      	strb	r2, [r3, #0]
			(TCHAR*) "\r\n\r\n------------ Start LOG OMAP ------------\r\n\r\n",
			&USERFile);
	result = f_puts (
 8009cbc:	4a82      	ldr	r2, [pc, #520]	; (8009ec8 <NonOS_sheduler+0x2a8>)
 8009cbe:	4b84      	ldr	r3, [pc, #528]	; (8009ed0 <NonOS_sheduler+0x2b0>)
 8009cc0:	0011      	movs	r1, r2
 8009cc2:	0018      	movs	r0, r3
 8009cc4:	f7ff fcb3 	bl	800962e <f_puts>
 8009cc8:	0003      	movs	r3, r0
 8009cca:	b2da      	uxtb	r2, r3
 8009ccc:	4b79      	ldr	r3, [pc, #484]	; (8009eb4 <NonOS_sheduler+0x294>)
 8009cce:	701a      	strb	r2, [r3, #0]
        // comment for optimaze loop check
//        if(g_bSemLPUART1)
//        {
//            g_bSemLPUART1 = 0;
//        }
		if(g_bSemUART1)
 8009cd0:	4b80      	ldr	r3, [pc, #512]	; (8009ed4 <NonOS_sheduler+0x2b4>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d100      	bne.n	8009cda <NonOS_sheduler+0xba>
 8009cd8:	e070      	b.n	8009dbc <NonOS_sheduler+0x19c>
        {
			// clear flag first
			g_bSemUART1 = 0;
 8009cda:	4b7e      	ldr	r3, [pc, #504]	; (8009ed4 <NonOS_sheduler+0x2b4>)
 8009cdc:	2200      	movs	r2, #0
 8009cde:	601a      	str	r2, [r3, #0]

			while (FF8_Pop (&ff8_uart1, &byteRecev))
 8009ce0:	e064      	b.n	8009dac <NonOS_sheduler+0x18c>
			{
				byteSTM_Old = byteSTM;
 8009ce2:	4b7d      	ldr	r3, [pc, #500]	; (8009ed8 <NonOS_sheduler+0x2b8>)
 8009ce4:	781a      	ldrb	r2, [r3, #0]
 8009ce6:	4b7d      	ldr	r3, [pc, #500]	; (8009edc <NonOS_sheduler+0x2bc>)
 8009ce8:	701a      	strb	r2, [r3, #0]
				byteSTM     = byteRecev;
 8009cea:	4b7d      	ldr	r3, [pc, #500]	; (8009ee0 <NonOS_sheduler+0x2c0>)
 8009cec:	781a      	ldrb	r2, [r3, #0]
 8009cee:	4b7a      	ldr	r3, [pc, #488]	; (8009ed8 <NonOS_sheduler+0x2b8>)
 8009cf0:	701a      	strb	r2, [r3, #0]

				if((byteSTM_Old == '\r') || (byteSTM_Old == '\n'))
 8009cf2:	4b7a      	ldr	r3, [pc, #488]	; (8009edc <NonOS_sheduler+0x2bc>)
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	2b0d      	cmp	r3, #13
 8009cf8:	d003      	beq.n	8009d02 <NonOS_sheduler+0xe2>
 8009cfa:	4b78      	ldr	r3, [pc, #480]	; (8009edc <NonOS_sheduler+0x2bc>)
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	2b0a      	cmp	r3, #10
 8009d00:	d12e      	bne.n	8009d60 <NonOS_sheduler+0x140>
				{
					if((byteSTM != '\r') && (byteSTM != '\n'))
 8009d02:	4b75      	ldr	r3, [pc, #468]	; (8009ed8 <NonOS_sheduler+0x2b8>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	2b0d      	cmp	r3, #13
 8009d08:	d02a      	beq.n	8009d60 <NonOS_sheduler+0x140>
 8009d0a:	4b73      	ldr	r3, [pc, #460]	; (8009ed8 <NonOS_sheduler+0x2b8>)
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	2b0a      	cmp	r3, #10
 8009d10:	d026      	beq.n	8009d60 <NonOS_sheduler+0x140>
					{
						HAL_RTC_GetDate (&hrtc, &sDate, RTC_FORMAT_BIN);
 8009d12:	4974      	ldr	r1, [pc, #464]	; (8009ee4 <NonOS_sheduler+0x2c4>)
 8009d14:	4b74      	ldr	r3, [pc, #464]	; (8009ee8 <NonOS_sheduler+0x2c8>)
 8009d16:	2200      	movs	r2, #0
 8009d18:	0018      	movs	r0, r3
 8009d1a:	f7fa fc53 	bl	80045c4 <HAL_RTC_GetDate>
						HAL_RTC_GetTime (&hrtc, &sTime, RTC_FORMAT_BIN);
 8009d1e:	4973      	ldr	r1, [pc, #460]	; (8009eec <NonOS_sheduler+0x2cc>)
 8009d20:	4b71      	ldr	r3, [pc, #452]	; (8009ee8 <NonOS_sheduler+0x2c8>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	0018      	movs	r0, r3
 8009d26:	f7fa fa97 	bl	8004258 <HAL_RTC_GetTime>
						f_printf(&STMLogFile, "[%02d:%02d:%02d-%02d:%02d:%02d]   ", sDate.Date, sDate.Month, sDate.Year, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8009d2a:	4b6e      	ldr	r3, [pc, #440]	; (8009ee4 <NonOS_sheduler+0x2c4>)
 8009d2c:	789b      	ldrb	r3, [r3, #2]
 8009d2e:	001e      	movs	r6, r3
 8009d30:	4b6c      	ldr	r3, [pc, #432]	; (8009ee4 <NonOS_sheduler+0x2c4>)
 8009d32:	785b      	ldrb	r3, [r3, #1]
 8009d34:	607b      	str	r3, [r7, #4]
 8009d36:	4b6b      	ldr	r3, [pc, #428]	; (8009ee4 <NonOS_sheduler+0x2c4>)
 8009d38:	78db      	ldrb	r3, [r3, #3]
 8009d3a:	001a      	movs	r2, r3
 8009d3c:	4b6b      	ldr	r3, [pc, #428]	; (8009eec <NonOS_sheduler+0x2cc>)
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	001c      	movs	r4, r3
 8009d42:	4b6a      	ldr	r3, [pc, #424]	; (8009eec <NonOS_sheduler+0x2cc>)
 8009d44:	785b      	ldrb	r3, [r3, #1]
 8009d46:	001d      	movs	r5, r3
 8009d48:	4b68      	ldr	r3, [pc, #416]	; (8009eec <NonOS_sheduler+0x2cc>)
 8009d4a:	789b      	ldrb	r3, [r3, #2]
 8009d4c:	4968      	ldr	r1, [pc, #416]	; (8009ef0 <NonOS_sheduler+0x2d0>)
 8009d4e:	485e      	ldr	r0, [pc, #376]	; (8009ec8 <NonOS_sheduler+0x2a8>)
 8009d50:	9303      	str	r3, [sp, #12]
 8009d52:	9502      	str	r5, [sp, #8]
 8009d54:	9401      	str	r4, [sp, #4]
 8009d56:	9200      	str	r2, [sp, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	0032      	movs	r2, r6
 8009d5c:	f7ff fcb2 	bl	80096c4 <f_printf>
					}
				}
				f_putc ((TCHAR) byteRecev, &STMLogFile);
 8009d60:	4b5f      	ldr	r3, [pc, #380]	; (8009ee0 <NonOS_sheduler+0x2c0>)
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	4a58      	ldr	r2, [pc, #352]	; (8009ec8 <NonOS_sheduler+0x2a8>)
 8009d66:	0011      	movs	r1, r2
 8009d68:	0018      	movs	r0, r3
 8009d6a:	f7ff fc1a 	bl	80095a2 <f_putc>
				cntSTmLog++;
 8009d6e:	4b61      	ldr	r3, [pc, #388]	; (8009ef4 <NonOS_sheduler+0x2d4>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	1c5a      	adds	r2, r3, #1
 8009d74:	4b5f      	ldr	r3, [pc, #380]	; (8009ef4 <NonOS_sheduler+0x2d4>)
 8009d76:	601a      	str	r2, [r3, #0]
				if (cntSTmLog == 1000)
 8009d78:	4b5e      	ldr	r3, [pc, #376]	; (8009ef4 <NonOS_sheduler+0x2d4>)
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	23fa      	movs	r3, #250	; 0xfa
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d113      	bne.n	8009dac <NonOS_sheduler+0x18c>
				{
					result = f_sync (&STMLogFile);
 8009d84:	4b50      	ldr	r3, [pc, #320]	; (8009ec8 <NonOS_sheduler+0x2a8>)
 8009d86:	0018      	movs	r0, r3
 8009d88:	f7ff f80a 	bl	8008da0 <f_sync>
 8009d8c:	0003      	movs	r3, r0
 8009d8e:	001a      	movs	r2, r3
 8009d90:	4b48      	ldr	r3, [pc, #288]	; (8009eb4 <NonOS_sheduler+0x294>)
 8009d92:	701a      	strb	r2, [r3, #0]
					cntSTmLog = 0;
 8009d94:	4b57      	ldr	r3, [pc, #348]	; (8009ef4 <NonOS_sheduler+0x2d4>)
 8009d96:	2200      	movs	r2, #0
 8009d98:	601a      	str	r2, [r3, #0]
					assert_param(result == FR_OK);
 8009d9a:	4b46      	ldr	r3, [pc, #280]	; (8009eb4 <NonOS_sheduler+0x294>)
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d004      	beq.n	8009dac <NonOS_sheduler+0x18c>
 8009da2:	4b45      	ldr	r3, [pc, #276]	; (8009eb8 <NonOS_sheduler+0x298>)
 8009da4:	2170      	movs	r1, #112	; 0x70
 8009da6:	0018      	movs	r0, r3
 8009da8:	f000 fc76 	bl	800a698 <assert_failed>
			while (FF8_Pop (&ff8_uart1, &byteRecev))
 8009dac:	4a4c      	ldr	r2, [pc, #304]	; (8009ee0 <NonOS_sheduler+0x2c0>)
 8009dae:	4b52      	ldr	r3, [pc, #328]	; (8009ef8 <NonOS_sheduler+0x2d8>)
 8009db0:	0011      	movs	r1, r2
 8009db2:	0018      	movs	r0, r3
 8009db4:	f001 f94d 	bl	800b052 <FF8_Pop>
 8009db8:	1e03      	subs	r3, r0, #0
 8009dba:	d192      	bne.n	8009ce2 <NonOS_sheduler+0xc2>
					// todo: check if result is fail
				}
            }

        }
		if (g_bSemUART2)// OMAP LOG
 8009dbc:	4b4f      	ldr	r3, [pc, #316]	; (8009efc <NonOS_sheduler+0x2dc>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d085      	beq.n	8009cd0 <NonOS_sheduler+0xb0>
		{
			// clear flag first
			g_bSemUART2 = 0;
 8009dc4:	4b4d      	ldr	r3, [pc, #308]	; (8009efc <NonOS_sheduler+0x2dc>)
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	601a      	str	r2, [r3, #0]
			while (FF8_Pop (&ff8_uart2, &byteRecev))
 8009dca:	e064      	b.n	8009e96 <NonOS_sheduler+0x276>
			{
				byteOMAP_Old = byteOMAP;
 8009dcc:	4b4c      	ldr	r3, [pc, #304]	; (8009f00 <NonOS_sheduler+0x2e0>)
 8009dce:	781a      	ldrb	r2, [r3, #0]
 8009dd0:	4b4c      	ldr	r3, [pc, #304]	; (8009f04 <NonOS_sheduler+0x2e4>)
 8009dd2:	701a      	strb	r2, [r3, #0]
				byteOMAP     = byteRecev;
 8009dd4:	4b42      	ldr	r3, [pc, #264]	; (8009ee0 <NonOS_sheduler+0x2c0>)
 8009dd6:	781a      	ldrb	r2, [r3, #0]
 8009dd8:	4b49      	ldr	r3, [pc, #292]	; (8009f00 <NonOS_sheduler+0x2e0>)
 8009dda:	701a      	strb	r2, [r3, #0]
				if((byteOMAP_Old == '\r') || (byteOMAP_Old == '\n'))
 8009ddc:	4b49      	ldr	r3, [pc, #292]	; (8009f04 <NonOS_sheduler+0x2e4>)
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	2b0d      	cmp	r3, #13
 8009de2:	d003      	beq.n	8009dec <NonOS_sheduler+0x1cc>
 8009de4:	4b47      	ldr	r3, [pc, #284]	; (8009f04 <NonOS_sheduler+0x2e4>)
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	2b0a      	cmp	r3, #10
 8009dea:	d12e      	bne.n	8009e4a <NonOS_sheduler+0x22a>
				{
					if((byteOMAP != '\r') && (byteOMAP != '\n'))
 8009dec:	4b44      	ldr	r3, [pc, #272]	; (8009f00 <NonOS_sheduler+0x2e0>)
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	2b0d      	cmp	r3, #13
 8009df2:	d02a      	beq.n	8009e4a <NonOS_sheduler+0x22a>
 8009df4:	4b42      	ldr	r3, [pc, #264]	; (8009f00 <NonOS_sheduler+0x2e0>)
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	2b0a      	cmp	r3, #10
 8009dfa:	d026      	beq.n	8009e4a <NonOS_sheduler+0x22a>
					{
						HAL_RTC_GetDate (&hrtc, &sDate, RTC_FORMAT_BIN);
 8009dfc:	4939      	ldr	r1, [pc, #228]	; (8009ee4 <NonOS_sheduler+0x2c4>)
 8009dfe:	4b3a      	ldr	r3, [pc, #232]	; (8009ee8 <NonOS_sheduler+0x2c8>)
 8009e00:	2200      	movs	r2, #0
 8009e02:	0018      	movs	r0, r3
 8009e04:	f7fa fbde 	bl	80045c4 <HAL_RTC_GetDate>
						HAL_RTC_GetTime (&hrtc, &sTime, RTC_FORMAT_BIN);
 8009e08:	4938      	ldr	r1, [pc, #224]	; (8009eec <NonOS_sheduler+0x2cc>)
 8009e0a:	4b37      	ldr	r3, [pc, #220]	; (8009ee8 <NonOS_sheduler+0x2c8>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	0018      	movs	r0, r3
 8009e10:	f7fa fa22 	bl	8004258 <HAL_RTC_GetTime>
						f_printf(&USERFile, "[%02d:%02d:%02d-%02d:%02d:%02d]   ", sDate.Date, sDate.Month, sDate.Year, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8009e14:	4b33      	ldr	r3, [pc, #204]	; (8009ee4 <NonOS_sheduler+0x2c4>)
 8009e16:	789b      	ldrb	r3, [r3, #2]
 8009e18:	001e      	movs	r6, r3
 8009e1a:	4b32      	ldr	r3, [pc, #200]	; (8009ee4 <NonOS_sheduler+0x2c4>)
 8009e1c:	785b      	ldrb	r3, [r3, #1]
 8009e1e:	607b      	str	r3, [r7, #4]
 8009e20:	4b30      	ldr	r3, [pc, #192]	; (8009ee4 <NonOS_sheduler+0x2c4>)
 8009e22:	78db      	ldrb	r3, [r3, #3]
 8009e24:	001a      	movs	r2, r3
 8009e26:	4b31      	ldr	r3, [pc, #196]	; (8009eec <NonOS_sheduler+0x2cc>)
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	001c      	movs	r4, r3
 8009e2c:	4b2f      	ldr	r3, [pc, #188]	; (8009eec <NonOS_sheduler+0x2cc>)
 8009e2e:	785b      	ldrb	r3, [r3, #1]
 8009e30:	001d      	movs	r5, r3
 8009e32:	4b2e      	ldr	r3, [pc, #184]	; (8009eec <NonOS_sheduler+0x2cc>)
 8009e34:	789b      	ldrb	r3, [r3, #2]
 8009e36:	492e      	ldr	r1, [pc, #184]	; (8009ef0 <NonOS_sheduler+0x2d0>)
 8009e38:	4821      	ldr	r0, [pc, #132]	; (8009ec0 <NonOS_sheduler+0x2a0>)
 8009e3a:	9303      	str	r3, [sp, #12]
 8009e3c:	9502      	str	r5, [sp, #8]
 8009e3e:	9401      	str	r4, [sp, #4]
 8009e40:	9200      	str	r2, [sp, #0]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	0032      	movs	r2, r6
 8009e46:	f7ff fc3d 	bl	80096c4 <f_printf>
					}
				}
				f_putc ((TCHAR) byteRecev, &USERFile);
 8009e4a:	4b25      	ldr	r3, [pc, #148]	; (8009ee0 <NonOS_sheduler+0x2c0>)
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	4a1c      	ldr	r2, [pc, #112]	; (8009ec0 <NonOS_sheduler+0x2a0>)
 8009e50:	0011      	movs	r1, r2
 8009e52:	0018      	movs	r0, r3
 8009e54:	f7ff fba5 	bl	80095a2 <f_putc>
				cntOmapLog++;
 8009e58:	4b2b      	ldr	r3, [pc, #172]	; (8009f08 <NonOS_sheduler+0x2e8>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	1c5a      	adds	r2, r3, #1
 8009e5e:	4b2a      	ldr	r3, [pc, #168]	; (8009f08 <NonOS_sheduler+0x2e8>)
 8009e60:	601a      	str	r2, [r3, #0]
				if (cntOmapLog == 1000)
 8009e62:	4b29      	ldr	r3, [pc, #164]	; (8009f08 <NonOS_sheduler+0x2e8>)
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	23fa      	movs	r3, #250	; 0xfa
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d113      	bne.n	8009e96 <NonOS_sheduler+0x276>
				{
					result = f_sync (&USERFile);
 8009e6e:	4b14      	ldr	r3, [pc, #80]	; (8009ec0 <NonOS_sheduler+0x2a0>)
 8009e70:	0018      	movs	r0, r3
 8009e72:	f7fe ff95 	bl	8008da0 <f_sync>
 8009e76:	0003      	movs	r3, r0
 8009e78:	001a      	movs	r2, r3
 8009e7a:	4b0e      	ldr	r3, [pc, #56]	; (8009eb4 <NonOS_sheduler+0x294>)
 8009e7c:	701a      	strb	r2, [r3, #0]
					cntOmapLog = 0;
 8009e7e:	4b22      	ldr	r3, [pc, #136]	; (8009f08 <NonOS_sheduler+0x2e8>)
 8009e80:	2200      	movs	r2, #0
 8009e82:	601a      	str	r2, [r3, #0]
					assert_param(result == FR_OK);
 8009e84:	4b0b      	ldr	r3, [pc, #44]	; (8009eb4 <NonOS_sheduler+0x294>)
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d004      	beq.n	8009e96 <NonOS_sheduler+0x276>
 8009e8c:	4b0a      	ldr	r3, [pc, #40]	; (8009eb8 <NonOS_sheduler+0x298>)
 8009e8e:	218d      	movs	r1, #141	; 0x8d
 8009e90:	0018      	movs	r0, r3
 8009e92:	f000 fc01 	bl	800a698 <assert_failed>
			while (FF8_Pop (&ff8_uart2, &byteRecev))
 8009e96:	4a12      	ldr	r2, [pc, #72]	; (8009ee0 <NonOS_sheduler+0x2c0>)
 8009e98:	4b1c      	ldr	r3, [pc, #112]	; (8009f0c <NonOS_sheduler+0x2ec>)
 8009e9a:	0011      	movs	r1, r2
 8009e9c:	0018      	movs	r0, r3
 8009e9e:	f001 f8d8 	bl	800b052 <FF8_Pop>
 8009ea2:	1e03      	subs	r3, r0, #0
 8009ea4:	d192      	bne.n	8009dcc <NonOS_sheduler+0x1ac>
		if(g_bSemUART1)
 8009ea6:	e713      	b.n	8009cd0 <NonOS_sheduler+0xb0>
 8009ea8:	50000400 	.word	0x50000400
 8009eac:	20000124 	.word	0x20000124
 8009eb0:	20000584 	.word	0x20000584
 8009eb4:	20000121 	.word	0x20000121
 8009eb8:	0800c26c 	.word	0x0800c26c
 8009ebc:	0800c280 	.word	0x0800c280
 8009ec0:	20000358 	.word	0x20000358
 8009ec4:	0800c28c 	.word	0x0800c28c
 8009ec8:	20000128 	.word	0x20000128
 8009ecc:	0800c294 	.word	0x0800c294
 8009ed0:	0800c2c8 	.word	0x0800c2c8
 8009ed4:	200000d0 	.word	0x200000d0
 8009ed8:	2000011c 	.word	0x2000011c
 8009edc:	2000011f 	.word	0x2000011f
 8009ee0:	2000011e 	.word	0x2000011e
 8009ee4:	2000114c 	.word	0x2000114c
 8009ee8:	20001150 	.word	0x20001150
 8009eec:	20000814 	.word	0x20000814
 8009ef0:	0800c2f8 	.word	0x0800c2f8
 8009ef4:	200000dc 	.word	0x200000dc
 8009ef8:	200011b4 	.word	0x200011b4
 8009efc:	200000d4 	.word	0x200000d4
 8009f00:	2000011d 	.word	0x2000011d
 8009f04:	20000120 	.word	0x20000120
 8009f08:	200000d8 	.word	0x200000d8
 8009f0c:	200007f8 	.word	0x200007f8

08009f10 <MX_FATFS_Init>:
extern RTC_DateTypeDef sDate;
extern RTC_HandleTypeDef hrtc;
/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009f14:	4a06      	ldr	r2, [pc, #24]	; (8009f30 <MX_FATFS_Init+0x20>)
 8009f16:	4b07      	ldr	r3, [pc, #28]	; (8009f34 <MX_FATFS_Init+0x24>)
 8009f18:	0011      	movs	r1, r2
 8009f1a:	0018      	movs	r0, r3
 8009f1c:	f7ff fe70 	bl	8009c00 <FATFS_LinkDriver>
 8009f20:	0003      	movs	r3, r0
 8009f22:	001a      	movs	r2, r3
 8009f24:	4b04      	ldr	r3, [pc, #16]	; (8009f38 <MX_FATFS_Init+0x28>)
 8009f26:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009f28:	46c0      	nop			; (mov r8, r8)
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	46c0      	nop			; (mov r8, r8)
 8009f30:	20000124 	.word	0x20000124
 8009f34:	20000008 	.word	0x20000008
 8009f38:	20000354 	.word	0x20000354

08009f3c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009f3c:	b590      	push	{r4, r7, lr}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
	HAL_StatusTypeDef status;
	status = HAL_RTC_GetDate (&hrtc, &sDate, RTC_FORMAT_BIN);
 8009f42:	1dfc      	adds	r4, r7, #7
 8009f44:	491f      	ldr	r1, [pc, #124]	; (8009fc4 <get_fattime+0x88>)
 8009f46:	4b20      	ldr	r3, [pc, #128]	; (8009fc8 <get_fattime+0x8c>)
 8009f48:	2200      	movs	r2, #0
 8009f4a:	0018      	movs	r0, r3
 8009f4c:	f7fa fb3a 	bl	80045c4 <HAL_RTC_GetDate>
 8009f50:	0003      	movs	r3, r0
 8009f52:	7023      	strb	r3, [r4, #0]
	assert_param(status == HAL_OK);
 8009f54:	1dfb      	adds	r3, r7, #7
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d004      	beq.n	8009f66 <get_fattime+0x2a>
 8009f5c:	4b1b      	ldr	r3, [pc, #108]	; (8009fcc <get_fattime+0x90>)
 8009f5e:	2157      	movs	r1, #87	; 0x57
 8009f60:	0018      	movs	r0, r3
 8009f62:	f000 fb99 	bl	800a698 <assert_failed>
	status = HAL_RTC_GetTime (&hrtc, &sTime, RTC_FORMAT_BIN);
 8009f66:	1dfc      	adds	r4, r7, #7
 8009f68:	4919      	ldr	r1, [pc, #100]	; (8009fd0 <get_fattime+0x94>)
 8009f6a:	4b17      	ldr	r3, [pc, #92]	; (8009fc8 <get_fattime+0x8c>)
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	0018      	movs	r0, r3
 8009f70:	f7fa f972 	bl	8004258 <HAL_RTC_GetTime>
 8009f74:	0003      	movs	r3, r0
 8009f76:	7023      	strb	r3, [r4, #0]
	assert_param(status == HAL_OK);
 8009f78:	1dfb      	adds	r3, r7, #7
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d004      	beq.n	8009f8a <get_fattime+0x4e>
 8009f80:	4b12      	ldr	r3, [pc, #72]	; (8009fcc <get_fattime+0x90>)
 8009f82:	2159      	movs	r1, #89	; 0x59
 8009f84:	0018      	movs	r0, r3
 8009f86:	f000 fb87 	bl	800a698 <assert_failed>

	return      ((DWORD)(sDate.Year + 2000 - 1980) << 25)    // Year 2018 in rtc is 18
 8009f8a:	4b0e      	ldr	r3, [pc, #56]	; (8009fc4 <get_fattime+0x88>)
 8009f8c:	78db      	ldrb	r3, [r3, #3]
 8009f8e:	3314      	adds	r3, #20
 8009f90:	065a      	lsls	r2, r3, #25
	            | ((DWORD)sDate.Month << 21)                // Month
 8009f92:	4b0c      	ldr	r3, [pc, #48]	; (8009fc4 <get_fattime+0x88>)
 8009f94:	785b      	ldrb	r3, [r3, #1]
 8009f96:	055b      	lsls	r3, r3, #21
 8009f98:	431a      	orrs	r2, r3
	            | ((DWORD)sDate.Date << 16)                // Mday
 8009f9a:	4b0a      	ldr	r3, [pc, #40]	; (8009fc4 <get_fattime+0x88>)
 8009f9c:	789b      	ldrb	r3, [r3, #2]
 8009f9e:	041b      	lsls	r3, r3, #16
 8009fa0:	431a      	orrs	r2, r3
	            | ((DWORD)sTime.Hours << 11)                // Hour
 8009fa2:	4b0b      	ldr	r3, [pc, #44]	; (8009fd0 <get_fattime+0x94>)
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	02db      	lsls	r3, r3, #11
 8009fa8:	431a      	orrs	r2, r3
	            | ((DWORD)sTime.Minutes << 5)                // Min
 8009faa:	4b09      	ldr	r3, [pc, #36]	; (8009fd0 <get_fattime+0x94>)
 8009fac:	785b      	ldrb	r3, [r3, #1]
 8009fae:	015b      	lsls	r3, r3, #5
 8009fb0:	4313      	orrs	r3, r2
	            | ((DWORD)sTime.Seconds >> 1);                // Sec
 8009fb2:	4a07      	ldr	r2, [pc, #28]	; (8009fd0 <get_fattime+0x94>)
 8009fb4:	7892      	ldrb	r2, [r2, #2]
 8009fb6:	0852      	lsrs	r2, r2, #1
 8009fb8:	b2d2      	uxtb	r2, r2
 8009fba:	4313      	orrs	r3, r2

//	time_t unixTime = convertDateToUnixTime (&sDate, &sTime);
//	return (DWORD)unixTime;
  /* USER CODE END get_fattime */  
}
 8009fbc:	0018      	movs	r0, r3
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	b003      	add	sp, #12
 8009fc2:	bd90      	pop	{r4, r7, pc}
 8009fc4:	2000114c 	.word	0x2000114c
 8009fc8:	20001150 	.word	0x20001150
 8009fcc:	0800c31c 	.word	0x0800c31c
 8009fd0:	20000814 	.word	0x20000814

08009fd4 <f_open_write_append>:
/* USER CODE BEGIN Application */
FRESULT f_open_write_append(
    FIL* fp,            /* [OUT] File object to create */
    const char* path    /* [IN]  File name to be opened */
)
{
 8009fd4:	b590      	push	{r4, r7, lr}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
    FRESULT fr;

    /* Opens an existing file. If not exist, creates a new file. */
    fr = f_open(fp, path, FA_WRITE | FA_OPEN_ALWAYS);
 8009fde:	230f      	movs	r3, #15
 8009fe0:	18fc      	adds	r4, r7, r3
 8009fe2:	6839      	ldr	r1, [r7, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2212      	movs	r2, #18
 8009fe8:	0018      	movs	r0, r3
 8009fea:	f7fe fa05 	bl	80083f8 <f_open>
 8009fee:	0003      	movs	r3, r0
 8009ff0:	7023      	strb	r3, [r4, #0]
    if (fr == FR_OK) {
 8009ff2:	230f      	movs	r3, #15
 8009ff4:	18fb      	adds	r3, r7, r3
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d115      	bne.n	800a028 <f_open_write_append+0x54>
        /* Seek to end of the file to append data */
        fr = f_lseek(fp, f_size(fp));
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	2383      	movs	r3, #131	; 0x83
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	58d2      	ldr	r2, [r2, r3]
 800a004:	230f      	movs	r3, #15
 800a006:	18fc      	adds	r4, r7, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	0011      	movs	r1, r2
 800a00c:	0018      	movs	r0, r3
 800a00e:	f7fe ffd9 	bl	8008fc4 <f_lseek>
 800a012:	0003      	movs	r3, r0
 800a014:	7023      	strb	r3, [r4, #0]
        if (fr != FR_OK)
 800a016:	230f      	movs	r3, #15
 800a018:	18fb      	adds	r3, r7, r3
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d003      	beq.n	800a028 <f_open_write_append+0x54>
            f_close(fp);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	0018      	movs	r0, r3
 800a024:	f7fe ff94 	bl	8008f50 <f_close>
    }
    return fr;
 800a028:	230f      	movs	r3, #15
 800a02a:	18fb      	adds	r3, r7, r3
 800a02c:	781b      	ldrb	r3, [r3, #0]
}
 800a02e:	0018      	movs	r0, r3
 800a030:	46bd      	mov	sp, r7
 800a032:	b005      	add	sp, #20
 800a034:	bd90      	pop	{r4, r7, pc}
	...

0800a038 <HAL_UART_RxCpltCallback>:
        // TODO: the SD card is plug in or plug out
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
    if(huart->Instance == hlpuart1.Instance)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	4b1a      	ldr	r3, [pc, #104]	; (800a0b0 <HAL_UART_RxCpltCallback+0x78>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d103      	bne.n	800a054 <HAL_UART_RxCpltCallback+0x1c>
    {
#if (SYS_USE_OS)

#else
        g_bSemLPUART1 = 1;
 800a04c:	4b19      	ldr	r3, [pc, #100]	; (800a0b4 <HAL_UART_RxCpltCallback+0x7c>)
 800a04e:	2201      	movs	r2, #1
 800a050:	601a      	str	r2, [r3, #0]
#else
        g_bSemUART2 = 1;
#endif

    }
}
 800a052:	e028      	b.n	800a0a6 <HAL_UART_RxCpltCallback+0x6e>
    else if(huart->Instance == huart1.Instance)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	4b17      	ldr	r3, [pc, #92]	; (800a0b8 <HAL_UART_RxCpltCallback+0x80>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d10e      	bne.n	800a07e <HAL_UART_RxCpltCallback+0x46>
        if(FF8_Push(&ff8_uart1, uart1_rx))
 800a060:	4b16      	ldr	r3, [pc, #88]	; (800a0bc <HAL_UART_RxCpltCallback+0x84>)
 800a062:	781a      	ldrb	r2, [r3, #0]
 800a064:	4b16      	ldr	r3, [pc, #88]	; (800a0c0 <HAL_UART_RxCpltCallback+0x88>)
 800a066:	0011      	movs	r1, r2
 800a068:	0018      	movs	r0, r3
 800a06a:	f000 ffc3 	bl	800aff4 <FF8_Push>
 800a06e:	1e03      	subs	r3, r0, #0
 800a070:	d101      	bne.n	800a076 <HAL_UART_RxCpltCallback+0x3e>
        	int var = 0;
 800a072:	2300      	movs	r3, #0
 800a074:	60fb      	str	r3, [r7, #12]
        g_bSemUART1 = 1;
 800a076:	4b13      	ldr	r3, [pc, #76]	; (800a0c4 <HAL_UART_RxCpltCallback+0x8c>)
 800a078:	2201      	movs	r2, #1
 800a07a:	601a      	str	r2, [r3, #0]
}
 800a07c:	e013      	b.n	800a0a6 <HAL_UART_RxCpltCallback+0x6e>
    else if(huart->Instance == huart2.Instance)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	4b11      	ldr	r3, [pc, #68]	; (800a0c8 <HAL_UART_RxCpltCallback+0x90>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	429a      	cmp	r2, r3
 800a088:	d10d      	bne.n	800a0a6 <HAL_UART_RxCpltCallback+0x6e>
        if(FF8_Push(&ff8_uart2, uart2_rx))
 800a08a:	4b10      	ldr	r3, [pc, #64]	; (800a0cc <HAL_UART_RxCpltCallback+0x94>)
 800a08c:	781a      	ldrb	r2, [r3, #0]
 800a08e:	4b10      	ldr	r3, [pc, #64]	; (800a0d0 <HAL_UART_RxCpltCallback+0x98>)
 800a090:	0011      	movs	r1, r2
 800a092:	0018      	movs	r0, r3
 800a094:	f000 ffae 	bl	800aff4 <FF8_Push>
 800a098:	1e03      	subs	r3, r0, #0
 800a09a:	d101      	bne.n	800a0a0 <HAL_UART_RxCpltCallback+0x68>
        	int var = 0;
 800a09c:	2300      	movs	r3, #0
 800a09e:	60bb      	str	r3, [r7, #8]
        g_bSemUART2 = 1;
 800a0a0:	4b0c      	ldr	r3, [pc, #48]	; (800a0d4 <HAL_UART_RxCpltCallback+0x9c>)
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	601a      	str	r2, [r3, #0]
}
 800a0a6:	46c0      	nop			; (mov r8, r8)
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	b004      	add	sp, #16
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	46c0      	nop			; (mov r8, r8)
 800a0b0:	2000102c 	.word	0x2000102c
 800a0b4:	200000cc 	.word	0x200000cc
 800a0b8:	200010dc 	.word	0x200010dc
 800a0bc:	20001028 	.word	0x20001028
 800a0c0:	200011b4 	.word	0x200011b4
 800a0c4:	200000d0 	.word	0x200000d0
 800a0c8:	20001228 	.word	0x20001228
 800a0cc:	20001698 	.word	0x20001698
 800a0d0:	200007f8 	.word	0x200007f8
 800a0d4:	200000d4 	.word	0x200000d4

0800a0d8 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a0dc:	f7f7 fa42 	bl	8001564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a0e0:	f000 f848 	bl	800a174 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  FF8_Reset(&ff8_uart1, ff8_uart1_buff, sizeof(ff8_uart1_buff));
 800a0e4:	2380      	movs	r3, #128	; 0x80
 800a0e6:	00da      	lsls	r2, r3, #3
 800a0e8:	4918      	ldr	r1, [pc, #96]	; (800a14c <main+0x74>)
 800a0ea:	4b19      	ldr	r3, [pc, #100]	; (800a150 <main+0x78>)
 800a0ec:	0018      	movs	r0, r3
 800a0ee:	f000 ff61 	bl	800afb4 <FF8_Reset>
  FF8_Reset(&ff8_uart2, ff8_uart2_buff, sizeof(ff8_uart2_buff));
 800a0f2:	2380      	movs	r3, #128	; 0x80
 800a0f4:	011a      	lsls	r2, r3, #4
 800a0f6:	4917      	ldr	r1, [pc, #92]	; (800a154 <main+0x7c>)
 800a0f8:	4b17      	ldr	r3, [pc, #92]	; (800a158 <main+0x80>)
 800a0fa:	0018      	movs	r0, r3
 800a0fc:	f000 ff5a 	bl	800afb4 <FF8_Reset>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a100:	f000 fa4e 	bl	800a5a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800a104:	f000 fa26 	bl	800a554 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800a108:	f000 f8d0 	bl	800a2ac <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 800a10c:	f000 f9e4 	bl	800a4d8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800a110:	f000 f904 	bl	800a31c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800a114:	f000 f93a 	bl	800a38c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800a118:	f7ff fefa 	bl	8009f10 <MX_FATFS_Init>
  MX_RTC_Init();
 800a11c:	f000 f96e 	bl	800a3fc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&hlpuart1, &lpuart1_rx, 1);
 800a120:	490e      	ldr	r1, [pc, #56]	; (800a15c <main+0x84>)
 800a122:	4b0f      	ldr	r3, [pc, #60]	; (800a160 <main+0x88>)
 800a124:	2201      	movs	r2, #1
 800a126:	0018      	movs	r0, r3
 800a128:	f7fb f8f8 	bl	800531c <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart1, &uart1_rx, 1);
 800a12c:	490d      	ldr	r1, [pc, #52]	; (800a164 <main+0x8c>)
 800a12e:	4b0e      	ldr	r3, [pc, #56]	; (800a168 <main+0x90>)
 800a130:	2201      	movs	r2, #1
 800a132:	0018      	movs	r0, r3
 800a134:	f7fb f8f2 	bl	800531c <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2, &uart2_rx, 1);
 800a138:	490c      	ldr	r1, [pc, #48]	; (800a16c <main+0x94>)
 800a13a:	4b0d      	ldr	r3, [pc, #52]	; (800a170 <main+0x98>)
 800a13c:	2201      	movs	r2, #1
 800a13e:	0018      	movs	r0, r3
 800a140:	f7fb f8ec 	bl	800531c <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  NonOS_sheduler();
 800a144:	f7ff fd6c 	bl	8009c20 <NonOS_sheduler>
  while (1)
 800a148:	e7fe      	b.n	800a148 <main+0x70>
 800a14a:	46c0      	nop			; (mov r8, r8)
 800a14c:	20001298 	.word	0x20001298
 800a150:	200011b4 	.word	0x200011b4
 800a154:	20000828 	.word	0x20000828
 800a158:	200007f8 	.word	0x200007f8
 800a15c:	200007b4 	.word	0x200007b4
 800a160:	2000102c 	.word	0x2000102c
 800a164:	20001028 	.word	0x20001028
 800a168:	200010dc 	.word	0x200010dc
 800a16c:	20001698 	.word	0x20001698
 800a170:	20001228 	.word	0x20001228

0800a174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b09a      	sub	sp, #104	; 0x68
 800a178:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a17a:	4b49      	ldr	r3, [pc, #292]	; (800a2a0 <SystemClock_Config+0x12c>)
 800a17c:	4a48      	ldr	r2, [pc, #288]	; (800a2a0 <SystemClock_Config+0x12c>)
 800a17e:	6812      	ldr	r2, [r2, #0]
 800a180:	4948      	ldr	r1, [pc, #288]	; (800a2a4 <SystemClock_Config+0x130>)
 800a182:	400a      	ands	r2, r1
 800a184:	2180      	movs	r1, #128	; 0x80
 800a186:	0109      	lsls	r1, r1, #4
 800a188:	430a      	orrs	r2, r1
 800a18a:	601a      	str	r2, [r3, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800a18c:	2334      	movs	r3, #52	; 0x34
 800a18e:	18fb      	adds	r3, r7, r3
 800a190:	220a      	movs	r2, #10
 800a192:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a194:	2334      	movs	r3, #52	; 0x34
 800a196:	18fb      	adds	r3, r7, r3
 800a198:	2201      	movs	r2, #1
 800a19a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800a19c:	2334      	movs	r3, #52	; 0x34
 800a19e:	18fb      	adds	r3, r7, r3
 800a1a0:	2210      	movs	r2, #16
 800a1a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800a1a4:	2334      	movs	r3, #52	; 0x34
 800a1a6:	18fb      	adds	r3, r7, r3
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a1ac:	2334      	movs	r3, #52	; 0x34
 800a1ae:	18fb      	adds	r3, r7, r3
 800a1b0:	2202      	movs	r2, #2
 800a1b2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a1b4:	2334      	movs	r3, #52	; 0x34
 800a1b6:	18fb      	adds	r3, r7, r3
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800a1bc:	2334      	movs	r3, #52	; 0x34
 800a1be:	18fb      	adds	r3, r7, r3
 800a1c0:	2280      	movs	r2, #128	; 0x80
 800a1c2:	02d2      	lsls	r2, r2, #11
 800a1c4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800a1c6:	2334      	movs	r3, #52	; 0x34
 800a1c8:	18fb      	adds	r3, r7, r3
 800a1ca:	2280      	movs	r2, #128	; 0x80
 800a1cc:	03d2      	lsls	r2, r2, #15
 800a1ce:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a1d0:	2334      	movs	r3, #52	; 0x34
 800a1d2:	18fb      	adds	r3, r7, r3
 800a1d4:	0018      	movs	r0, r3
 800a1d6:	f7f8 fa87 	bl	80026e8 <HAL_RCC_OscConfig>
 800a1da:	1e03      	subs	r3, r0, #0
 800a1dc:	d004      	beq.n	800a1e8 <SystemClock_Config+0x74>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a1de:	4b32      	ldr	r3, [pc, #200]	; (800a2a8 <SystemClock_Config+0x134>)
 800a1e0:	21fa      	movs	r1, #250	; 0xfa
 800a1e2:	0018      	movs	r0, r3
 800a1e4:	f000 fa52 	bl	800a68c <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a1e8:	2320      	movs	r3, #32
 800a1ea:	18fb      	adds	r3, r7, r3
 800a1ec:	220f      	movs	r2, #15
 800a1ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a1f0:	2320      	movs	r3, #32
 800a1f2:	18fb      	adds	r3, r7, r3
 800a1f4:	2203      	movs	r2, #3
 800a1f6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a1f8:	2320      	movs	r3, #32
 800a1fa:	18fb      	adds	r3, r7, r3
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a200:	2320      	movs	r3, #32
 800a202:	18fb      	adds	r3, r7, r3
 800a204:	2200      	movs	r2, #0
 800a206:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a208:	2320      	movs	r3, #32
 800a20a:	18fb      	adds	r3, r7, r3
 800a20c:	2200      	movs	r2, #0
 800a20e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800a210:	2320      	movs	r3, #32
 800a212:	18fb      	adds	r3, r7, r3
 800a214:	2101      	movs	r1, #1
 800a216:	0018      	movs	r0, r3
 800a218:	f7f8 ff56 	bl	80030c8 <HAL_RCC_ClockConfig>
 800a21c:	1e03      	subs	r3, r0, #0
 800a21e:	d006      	beq.n	800a22e <SystemClock_Config+0xba>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a220:	2384      	movs	r3, #132	; 0x84
 800a222:	005a      	lsls	r2, r3, #1
 800a224:	4b20      	ldr	r3, [pc, #128]	; (800a2a8 <SystemClock_Config+0x134>)
 800a226:	0011      	movs	r1, r2
 800a228:	0018      	movs	r0, r3
 800a22a:	f000 fa2f 	bl	800a68c <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800a22e:	1d3b      	adds	r3, r7, #4
 800a230:	2227      	movs	r2, #39	; 0x27
 800a232:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a234:	1d3b      	adds	r3, r7, #4
 800a236:	2200      	movs	r2, #0
 800a238:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a23a:	1d3b      	adds	r3, r7, #4
 800a23c:	2200      	movs	r2, #0
 800a23e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800a240:	1d3b      	adds	r3, r7, #4
 800a242:	2200      	movs	r2, #0
 800a244:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800a246:	1d3b      	adds	r3, r7, #4
 800a248:	2280      	movs	r2, #128	; 0x80
 800a24a:	0292      	lsls	r2, r2, #10
 800a24c:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a24e:	1d3b      	adds	r3, r7, #4
 800a250:	0018      	movs	r0, r3
 800a252:	f7f9 fa23 	bl	800369c <HAL_RCCEx_PeriphCLKConfig>
 800a256:	1e03      	subs	r3, r0, #0
 800a258:	d007      	beq.n	800a26a <SystemClock_Config+0xf6>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a25a:	2314      	movs	r3, #20
 800a25c:	33ff      	adds	r3, #255	; 0xff
 800a25e:	001a      	movs	r2, r3
 800a260:	4b11      	ldr	r3, [pc, #68]	; (800a2a8 <SystemClock_Config+0x134>)
 800a262:	0011      	movs	r1, r2
 800a264:	0018      	movs	r0, r3
 800a266:	f000 fa11 	bl	800a68c <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800a26a:	f7f9 f989 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 800a26e:	0002      	movs	r2, r0
 800a270:	23fa      	movs	r3, #250	; 0xfa
 800a272:	0099      	lsls	r1, r3, #2
 800a274:	0010      	movs	r0, r2
 800a276:	f7f5 ff47 	bl	8000108 <__udivsi3>
 800a27a:	0003      	movs	r3, r0
 800a27c:	0018      	movs	r0, r3
 800a27e:	f7f7 fa9d 	bl	80017bc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800a282:	2004      	movs	r0, #4
 800a284:	f7f7 faa8 	bl	80017d8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800a288:	2301      	movs	r3, #1
 800a28a:	425b      	negs	r3, r3
 800a28c:	2200      	movs	r2, #0
 800a28e:	2100      	movs	r1, #0
 800a290:	0018      	movs	r0, r3
 800a292:	f7f7 fa57 	bl	8001744 <HAL_NVIC_SetPriority>
}
 800a296:	46c0      	nop			; (mov r8, r8)
 800a298:	46bd      	mov	sp, r7
 800a29a:	b01a      	add	sp, #104	; 0x68
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	46c0      	nop			; (mov r8, r8)
 800a2a0:	40007000 	.word	0x40007000
 800a2a4:	ffffe7ff 	.word	0xffffe7ff
 800a2a8:	0800c32c 	.word	0x0800c32c

0800a2ac <MX_LPUART1_UART_Init>:

/* LPUART1 init function */
static void MX_LPUART1_UART_Init(void)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 800a2b0:	4b16      	ldr	r3, [pc, #88]	; (800a30c <MX_LPUART1_UART_Init+0x60>)
 800a2b2:	4a17      	ldr	r2, [pc, #92]	; (800a310 <MX_LPUART1_UART_Init+0x64>)
 800a2b4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800a2b6:	4b15      	ldr	r3, [pc, #84]	; (800a30c <MX_LPUART1_UART_Init+0x60>)
 800a2b8:	4a16      	ldr	r2, [pc, #88]	; (800a314 <MX_LPUART1_UART_Init+0x68>)
 800a2ba:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800a2bc:	4b13      	ldr	r3, [pc, #76]	; (800a30c <MX_LPUART1_UART_Init+0x60>)
 800a2be:	2280      	movs	r2, #128	; 0x80
 800a2c0:	0552      	lsls	r2, r2, #21
 800a2c2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800a2c4:	4b11      	ldr	r3, [pc, #68]	; (800a30c <MX_LPUART1_UART_Init+0x60>)
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800a2ca:	4b10      	ldr	r3, [pc, #64]	; (800a30c <MX_LPUART1_UART_Init+0x60>)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800a2d0:	4b0e      	ldr	r3, [pc, #56]	; (800a30c <MX_LPUART1_UART_Init+0x60>)
 800a2d2:	220c      	movs	r2, #12
 800a2d4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a2d6:	4b0d      	ldr	r3, [pc, #52]	; (800a30c <MX_LPUART1_UART_Init+0x60>)
 800a2d8:	2200      	movs	r2, #0
 800a2da:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a2dc:	4b0b      	ldr	r3, [pc, #44]	; (800a30c <MX_LPUART1_UART_Init+0x60>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a2e2:	4b0a      	ldr	r3, [pc, #40]	; (800a30c <MX_LPUART1_UART_Init+0x60>)
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800a2e8:	4b08      	ldr	r3, [pc, #32]	; (800a30c <MX_LPUART1_UART_Init+0x60>)
 800a2ea:	0018      	movs	r0, r3
 800a2ec:	f7fa ff8a 	bl	8005204 <HAL_UART_Init>
 800a2f0:	1e03      	subs	r3, r0, #0
 800a2f2:	d007      	beq.n	800a304 <MX_LPUART1_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a2f4:	2332      	movs	r3, #50	; 0x32
 800a2f6:	33ff      	adds	r3, #255	; 0xff
 800a2f8:	001a      	movs	r2, r3
 800a2fa:	4b07      	ldr	r3, [pc, #28]	; (800a318 <MX_LPUART1_UART_Init+0x6c>)
 800a2fc:	0011      	movs	r1, r2
 800a2fe:	0018      	movs	r0, r3
 800a300:	f000 f9c4 	bl	800a68c <_Error_Handler>
  }

}
 800a304:	46c0      	nop			; (mov r8, r8)
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	46c0      	nop			; (mov r8, r8)
 800a30c:	2000102c 	.word	0x2000102c
 800a310:	40004800 	.word	0x40004800
 800a314:	00033324 	.word	0x00033324
 800a318:	0800c32c 	.word	0x0800c32c

0800a31c <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800a320:	4b17      	ldr	r3, [pc, #92]	; (800a380 <MX_USART1_UART_Init+0x64>)
 800a322:	4a18      	ldr	r2, [pc, #96]	; (800a384 <MX_USART1_UART_Init+0x68>)
 800a324:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a326:	4b16      	ldr	r3, [pc, #88]	; (800a380 <MX_USART1_UART_Init+0x64>)
 800a328:	22e1      	movs	r2, #225	; 0xe1
 800a32a:	0252      	lsls	r2, r2, #9
 800a32c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a32e:	4b14      	ldr	r3, [pc, #80]	; (800a380 <MX_USART1_UART_Init+0x64>)
 800a330:	2200      	movs	r2, #0
 800a332:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a334:	4b12      	ldr	r3, [pc, #72]	; (800a380 <MX_USART1_UART_Init+0x64>)
 800a336:	2200      	movs	r2, #0
 800a338:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a33a:	4b11      	ldr	r3, [pc, #68]	; (800a380 <MX_USART1_UART_Init+0x64>)
 800a33c:	2200      	movs	r2, #0
 800a33e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a340:	4b0f      	ldr	r3, [pc, #60]	; (800a380 <MX_USART1_UART_Init+0x64>)
 800a342:	220c      	movs	r2, #12
 800a344:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a346:	4b0e      	ldr	r3, [pc, #56]	; (800a380 <MX_USART1_UART_Init+0x64>)
 800a348:	2200      	movs	r2, #0
 800a34a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a34c:	4b0c      	ldr	r3, [pc, #48]	; (800a380 <MX_USART1_UART_Init+0x64>)
 800a34e:	2200      	movs	r2, #0
 800a350:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a352:	4b0b      	ldr	r3, [pc, #44]	; (800a380 <MX_USART1_UART_Init+0x64>)
 800a354:	2200      	movs	r2, #0
 800a356:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a358:	4b09      	ldr	r3, [pc, #36]	; (800a380 <MX_USART1_UART_Init+0x64>)
 800a35a:	2200      	movs	r2, #0
 800a35c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a35e:	4b08      	ldr	r3, [pc, #32]	; (800a380 <MX_USART1_UART_Init+0x64>)
 800a360:	0018      	movs	r0, r3
 800a362:	f7fa ff4f 	bl	8005204 <HAL_UART_Init>
 800a366:	1e03      	subs	r3, r0, #0
 800a368:	d006      	beq.n	800a378 <MX_USART1_UART_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a36a:	23a3      	movs	r3, #163	; 0xa3
 800a36c:	005a      	lsls	r2, r3, #1
 800a36e:	4b06      	ldr	r3, [pc, #24]	; (800a388 <MX_USART1_UART_Init+0x6c>)
 800a370:	0011      	movs	r1, r2
 800a372:	0018      	movs	r0, r3
 800a374:	f000 f98a 	bl	800a68c <_Error_Handler>
  }

}
 800a378:	46c0      	nop			; (mov r8, r8)
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	46c0      	nop			; (mov r8, r8)
 800a380:	200010dc 	.word	0x200010dc
 800a384:	40013800 	.word	0x40013800
 800a388:	0800c32c 	.word	0x0800c32c

0800a38c <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800a390:	4b17      	ldr	r3, [pc, #92]	; (800a3f0 <MX_USART2_UART_Init+0x64>)
 800a392:	4a18      	ldr	r2, [pc, #96]	; (800a3f4 <MX_USART2_UART_Init+0x68>)
 800a394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a396:	4b16      	ldr	r3, [pc, #88]	; (800a3f0 <MX_USART2_UART_Init+0x64>)
 800a398:	22e1      	movs	r2, #225	; 0xe1
 800a39a:	0252      	lsls	r2, r2, #9
 800a39c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a39e:	4b14      	ldr	r3, [pc, #80]	; (800a3f0 <MX_USART2_UART_Init+0x64>)
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a3a4:	4b12      	ldr	r3, [pc, #72]	; (800a3f0 <MX_USART2_UART_Init+0x64>)
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a3aa:	4b11      	ldr	r3, [pc, #68]	; (800a3f0 <MX_USART2_UART_Init+0x64>)
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a3b0:	4b0f      	ldr	r3, [pc, #60]	; (800a3f0 <MX_USART2_UART_Init+0x64>)
 800a3b2:	220c      	movs	r2, #12
 800a3b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a3b6:	4b0e      	ldr	r3, [pc, #56]	; (800a3f0 <MX_USART2_UART_Init+0x64>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a3bc:	4b0c      	ldr	r3, [pc, #48]	; (800a3f0 <MX_USART2_UART_Init+0x64>)
 800a3be:	2200      	movs	r2, #0
 800a3c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a3c2:	4b0b      	ldr	r3, [pc, #44]	; (800a3f0 <MX_USART2_UART_Init+0x64>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a3c8:	4b09      	ldr	r3, [pc, #36]	; (800a3f0 <MX_USART2_UART_Init+0x64>)
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a3ce:	4b08      	ldr	r3, [pc, #32]	; (800a3f0 <MX_USART2_UART_Init+0x64>)
 800a3d0:	0018      	movs	r0, r3
 800a3d2:	f7fa ff17 	bl	8005204 <HAL_UART_Init>
 800a3d6:	1e03      	subs	r3, r0, #0
 800a3d8:	d007      	beq.n	800a3ea <MX_USART2_UART_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a3da:	235c      	movs	r3, #92	; 0x5c
 800a3dc:	33ff      	adds	r3, #255	; 0xff
 800a3de:	001a      	movs	r2, r3
 800a3e0:	4b05      	ldr	r3, [pc, #20]	; (800a3f8 <MX_USART2_UART_Init+0x6c>)
 800a3e2:	0011      	movs	r1, r2
 800a3e4:	0018      	movs	r0, r3
 800a3e6:	f000 f951 	bl	800a68c <_Error_Handler>
  }

}
 800a3ea:	46c0      	nop			; (mov r8, r8)
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	20001228 	.word	0x20001228
 800a3f4:	40004400 	.word	0x40004400
 800a3f8:	0800c32c 	.word	0x0800c32c

0800a3fc <MX_RTC_Init>:

/* RTC init function */
static void MX_RTC_Init(void)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

    /**Initialize RTC Only 
    */
	hrtc.Instance = RTC;
 800a400:	4b30      	ldr	r3, [pc, #192]	; (800a4c4 <MX_RTC_Init+0xc8>)
 800a402:	4a31      	ldr	r2, [pc, #196]	; (800a4c8 <MX_RTC_Init+0xcc>)
 800a404:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a406:	4b2f      	ldr	r3, [pc, #188]	; (800a4c4 <MX_RTC_Init+0xc8>)
 800a408:	2200      	movs	r2, #0
 800a40a:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 800a40c:	4b2d      	ldr	r3, [pc, #180]	; (800a4c4 <MX_RTC_Init+0xc8>)
 800a40e:	227f      	movs	r2, #127	; 0x7f
 800a410:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800a412:	4b2c      	ldr	r3, [pc, #176]	; (800a4c4 <MX_RTC_Init+0xc8>)
 800a414:	22ff      	movs	r2, #255	; 0xff
 800a416:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a418:	4b2a      	ldr	r3, [pc, #168]	; (800a4c4 <MX_RTC_Init+0xc8>)
 800a41a:	2200      	movs	r2, #0
 800a41c:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800a41e:	4b29      	ldr	r3, [pc, #164]	; (800a4c4 <MX_RTC_Init+0xc8>)
 800a420:	2200      	movs	r2, #0
 800a422:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a424:	4b27      	ldr	r3, [pc, #156]	; (800a4c4 <MX_RTC_Init+0xc8>)
 800a426:	2200      	movs	r2, #0
 800a428:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a42a:	4b26      	ldr	r3, [pc, #152]	; (800a4c4 <MX_RTC_Init+0xc8>)
 800a42c:	2200      	movs	r2, #0
 800a42e:	61da      	str	r2, [r3, #28]
	if(HAL_RTC_Init (&hrtc) != HAL_OK)
 800a430:	4b24      	ldr	r3, [pc, #144]	; (800a4c4 <MX_RTC_Init+0xc8>)
 800a432:	0018      	movs	r0, r3
 800a434:	f7f9 fc84 	bl	8003d40 <HAL_RTC_Init>
 800a438:	1e03      	subs	r3, r0, #0
 800a43a:	d006      	beq.n	800a44a <MX_RTC_Init+0x4e>
	{
		_Error_Handler (__FILE__, __LINE__);
 800a43c:	23bc      	movs	r3, #188	; 0xbc
 800a43e:	005a      	lsls	r2, r3, #1
 800a440:	4b22      	ldr	r3, [pc, #136]	; (800a4cc <MX_RTC_Init+0xd0>)
 800a442:	0011      	movs	r1, r2
 800a444:	0018      	movs	r0, r3
 800a446:	f000 f921 	bl	800a68c <_Error_Handler>
	}

	/**Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 10;
 800a44a:	4b21      	ldr	r3, [pc, #132]	; (800a4d0 <MX_RTC_Init+0xd4>)
 800a44c:	220a      	movs	r2, #10
 800a44e:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 59;
 800a450:	4b1f      	ldr	r3, [pc, #124]	; (800a4d0 <MX_RTC_Init+0xd4>)
 800a452:	223b      	movs	r2, #59	; 0x3b
 800a454:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 59;
 800a456:	4b1e      	ldr	r3, [pc, #120]	; (800a4d0 <MX_RTC_Init+0xd4>)
 800a458:	223b      	movs	r2, #59	; 0x3b
 800a45a:	709a      	strb	r2, [r3, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a45c:	4b1c      	ldr	r3, [pc, #112]	; (800a4d0 <MX_RTC_Init+0xd4>)
 800a45e:	2200      	movs	r2, #0
 800a460:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a462:	4b1b      	ldr	r3, [pc, #108]	; (800a4d0 <MX_RTC_Init+0xd4>)
 800a464:	2200      	movs	r2, #0
 800a466:	611a      	str	r2, [r3, #16]
	if(HAL_RTC_SetTime (&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800a468:	4919      	ldr	r1, [pc, #100]	; (800a4d0 <MX_RTC_Init+0xd4>)
 800a46a:	4b16      	ldr	r3, [pc, #88]	; (800a4c4 <MX_RTC_Init+0xc8>)
 800a46c:	2200      	movs	r2, #0
 800a46e:	0018      	movs	r0, r3
 800a470:	f7f9 fd5e 	bl	8003f30 <HAL_RTC_SetTime>
 800a474:	1e03      	subs	r3, r0, #0
 800a476:	d006      	beq.n	800a486 <MX_RTC_Init+0x8a>
	{
		_Error_Handler (__FILE__, __LINE__);
 800a478:	23c2      	movs	r3, #194	; 0xc2
 800a47a:	005a      	lsls	r2, r3, #1
 800a47c:	4b13      	ldr	r3, [pc, #76]	; (800a4cc <MX_RTC_Init+0xd0>)
 800a47e:	0011      	movs	r1, r2
 800a480:	0018      	movs	r0, r3
 800a482:	f000 f903 	bl	800a68c <_Error_Handler>
	}

	sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800a486:	4b13      	ldr	r3, [pc, #76]	; (800a4d4 <MX_RTC_Init+0xd8>)
 800a488:	2205      	movs	r2, #5
 800a48a:	701a      	strb	r2, [r3, #0]
	sDate.Month = RTC_MONTH_NOVEMBER;
 800a48c:	4b11      	ldr	r3, [pc, #68]	; (800a4d4 <MX_RTC_Init+0xd8>)
 800a48e:	2211      	movs	r2, #17
 800a490:	705a      	strb	r2, [r3, #1]
	sDate.Date = 23;
 800a492:	4b10      	ldr	r3, [pc, #64]	; (800a4d4 <MX_RTC_Init+0xd8>)
 800a494:	2217      	movs	r2, #23
 800a496:	709a      	strb	r2, [r3, #2]
	sDate.Year = 18;
 800a498:	4b0e      	ldr	r3, [pc, #56]	; (800a4d4 <MX_RTC_Init+0xd8>)
 800a49a:	2212      	movs	r2, #18
 800a49c:	70da      	strb	r2, [r3, #3]

	if(HAL_RTC_SetDate (&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800a49e:	490d      	ldr	r1, [pc, #52]	; (800a4d4 <MX_RTC_Init+0xd8>)
 800a4a0:	4b08      	ldr	r3, [pc, #32]	; (800a4c4 <MX_RTC_Init+0xc8>)
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	0018      	movs	r0, r3
 800a4a6:	f7f9 ff45 	bl	8004334 <HAL_RTC_SetDate>
 800a4aa:	1e03      	subs	r3, r0, #0
 800a4ac:	d006      	beq.n	800a4bc <MX_RTC_Init+0xc0>
	{
		_Error_Handler (__FILE__, __LINE__);
 800a4ae:	23c7      	movs	r3, #199	; 0xc7
 800a4b0:	005a      	lsls	r2, r3, #1
 800a4b2:	4b06      	ldr	r3, [pc, #24]	; (800a4cc <MX_RTC_Init+0xd0>)
 800a4b4:	0011      	movs	r1, r2
 800a4b6:	0018      	movs	r0, r3
 800a4b8:	f000 f8e8 	bl	800a68c <_Error_Handler>
	}

}
 800a4bc:	46c0      	nop			; (mov r8, r8)
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	46c0      	nop			; (mov r8, r8)
 800a4c4:	20001150 	.word	0x20001150
 800a4c8:	40002800 	.word	0x40002800
 800a4cc:	0800c32c 	.word	0x0800c32c
 800a4d0:	20000814 	.word	0x20000814
 800a4d4:	2000114c 	.word	0x2000114c

0800a4d8 <MX_SPI1_Init>:

/* SPI1 init function */
static void MX_SPI1_Init(void)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	af00      	add	r7, sp, #0

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800a4dc:	4b1a      	ldr	r3, [pc, #104]	; (800a548 <MX_SPI1_Init+0x70>)
 800a4de:	4a1b      	ldr	r2, [pc, #108]	; (800a54c <MX_SPI1_Init+0x74>)
 800a4e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a4e2:	4b19      	ldr	r3, [pc, #100]	; (800a548 <MX_SPI1_Init+0x70>)
 800a4e4:	2282      	movs	r2, #130	; 0x82
 800a4e6:	0052      	lsls	r2, r2, #1
 800a4e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a4ea:	4b17      	ldr	r3, [pc, #92]	; (800a548 <MX_SPI1_Init+0x70>)
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a4f0:	4b15      	ldr	r3, [pc, #84]	; (800a548 <MX_SPI1_Init+0x70>)
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a4f6:	4b14      	ldr	r3, [pc, #80]	; (800a548 <MX_SPI1_Init+0x70>)
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a4fc:	4b12      	ldr	r3, [pc, #72]	; (800a548 <MX_SPI1_Init+0x70>)
 800a4fe:	2200      	movs	r2, #0
 800a500:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a502:	4b11      	ldr	r3, [pc, #68]	; (800a548 <MX_SPI1_Init+0x70>)
 800a504:	2280      	movs	r2, #128	; 0x80
 800a506:	0092      	lsls	r2, r2, #2
 800a508:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800a50a:	4b0f      	ldr	r3, [pc, #60]	; (800a548 <MX_SPI1_Init+0x70>)
 800a50c:	2210      	movs	r2, #16
 800a50e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a510:	4b0d      	ldr	r3, [pc, #52]	; (800a548 <MX_SPI1_Init+0x70>)
 800a512:	2200      	movs	r2, #0
 800a514:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a516:	4b0c      	ldr	r3, [pc, #48]	; (800a548 <MX_SPI1_Init+0x70>)
 800a518:	2200      	movs	r2, #0
 800a51a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a51c:	4b0a      	ldr	r3, [pc, #40]	; (800a548 <MX_SPI1_Init+0x70>)
 800a51e:	2200      	movs	r2, #0
 800a520:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800a522:	4b09      	ldr	r3, [pc, #36]	; (800a548 <MX_SPI1_Init+0x70>)
 800a524:	2207      	movs	r2, #7
 800a526:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a528:	4b07      	ldr	r3, [pc, #28]	; (800a548 <MX_SPI1_Init+0x70>)
 800a52a:	0018      	movs	r0, r3
 800a52c:	f7fa f93e 	bl	80047ac <HAL_SPI_Init>
 800a530:	1e03      	subs	r3, r0, #0
 800a532:	d006      	beq.n	800a542 <MX_SPI1_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a534:	23d3      	movs	r3, #211	; 0xd3
 800a536:	005a      	lsls	r2, r3, #1
 800a538:	4b05      	ldr	r3, [pc, #20]	; (800a550 <MX_SPI1_Init+0x78>)
 800a53a:	0011      	movs	r1, r2
 800a53c:	0018      	movs	r0, r3
 800a53e:	f000 f8a5 	bl	800a68c <_Error_Handler>
  }

}
 800a542:	46c0      	nop			; (mov r8, r8)
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	200011d0 	.word	0x200011d0
 800a54c:	40013000 	.word	0x40013000
 800a550:	0800c32c 	.word	0x0800c32c

0800a554 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a55a:	4b10      	ldr	r3, [pc, #64]	; (800a59c <MX_DMA_Init+0x48>)
 800a55c:	4a0f      	ldr	r2, [pc, #60]	; (800a59c <MX_DMA_Init+0x48>)
 800a55e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a560:	2101      	movs	r1, #1
 800a562:	430a      	orrs	r2, r1
 800a564:	631a      	str	r2, [r3, #48]	; 0x30
 800a566:	4b0d      	ldr	r3, [pc, #52]	; (800a59c <MX_DMA_Init+0x48>)
 800a568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a56a:	2201      	movs	r2, #1
 800a56c:	4013      	ands	r3, r2
 800a56e:	607b      	str	r3, [r7, #4]
 800a570:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800a572:	2200      	movs	r2, #0
 800a574:	2100      	movs	r1, #0
 800a576:	200a      	movs	r0, #10
 800a578:	f7f7 f8e4 	bl	8001744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800a57c:	200a      	movs	r0, #10
 800a57e:	f7f7 f901 	bl	8001784 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800a582:	2200      	movs	r2, #0
 800a584:	2100      	movs	r1, #0
 800a586:	200b      	movs	r0, #11
 800a588:	f7f7 f8dc 	bl	8001744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800a58c:	200b      	movs	r0, #11
 800a58e:	f7f7 f8f9 	bl	8001784 <HAL_NVIC_EnableIRQ>

}
 800a592:	46c0      	nop			; (mov r8, r8)
 800a594:	46bd      	mov	sp, r7
 800a596:	b002      	add	sp, #8
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	46c0      	nop			; (mov r8, r8)
 800a59c:	40021000 	.word	0x40021000

0800a5a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b088      	sub	sp, #32
 800a5a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5a6:	4b36      	ldr	r3, [pc, #216]	; (800a680 <MX_GPIO_Init+0xe0>)
 800a5a8:	4a35      	ldr	r2, [pc, #212]	; (800a680 <MX_GPIO_Init+0xe0>)
 800a5aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a5ac:	2101      	movs	r1, #1
 800a5ae:	430a      	orrs	r2, r1
 800a5b0:	62da      	str	r2, [r3, #44]	; 0x2c
 800a5b2:	4b33      	ldr	r3, [pc, #204]	; (800a680 <MX_GPIO_Init+0xe0>)
 800a5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	60bb      	str	r3, [r7, #8]
 800a5bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a5be:	4b30      	ldr	r3, [pc, #192]	; (800a680 <MX_GPIO_Init+0xe0>)
 800a5c0:	4a2f      	ldr	r2, [pc, #188]	; (800a680 <MX_GPIO_Init+0xe0>)
 800a5c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a5c4:	2102      	movs	r1, #2
 800a5c6:	430a      	orrs	r2, r1
 800a5c8:	62da      	str	r2, [r3, #44]	; 0x2c
 800a5ca:	4b2d      	ldr	r3, [pc, #180]	; (800a680 <MX_GPIO_Init+0xe0>)
 800a5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ce:	2202      	movs	r2, #2
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	607b      	str	r3, [r7, #4]
 800a5d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CSn_PIN_GPIO_Port, SD_CSn_PIN_Pin, GPIO_PIN_SET);
 800a5d6:	23a0      	movs	r3, #160	; 0xa0
 800a5d8:	05db      	lsls	r3, r3, #23
 800a5da:	2201      	movs	r2, #1
 800a5dc:	2110      	movs	r1, #16
 800a5de:	0018      	movs	r0, r3
 800a5e0:	f7f8 f80a 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENB_CONV_GPIO_Port, ENB_CONV_Pin, GPIO_PIN_SET);
 800a5e4:	4b27      	ldr	r3, [pc, #156]	; (800a684 <MX_GPIO_Init+0xe4>)
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	2101      	movs	r1, #1
 800a5ea:	0018      	movs	r0, r3
 800a5ec:	f7f8 f804 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CSn_PIN_Pin */
  GPIO_InitStruct.Pin = SD_CSn_PIN_Pin;
 800a5f0:	230c      	movs	r3, #12
 800a5f2:	18fb      	adds	r3, r7, r3
 800a5f4:	2210      	movs	r2, #16
 800a5f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5f8:	230c      	movs	r3, #12
 800a5fa:	18fb      	adds	r3, r7, r3
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a600:	230c      	movs	r3, #12
 800a602:	18fb      	adds	r3, r7, r3
 800a604:	2200      	movs	r2, #0
 800a606:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a608:	230c      	movs	r3, #12
 800a60a:	18fb      	adds	r3, r7, r3
 800a60c:	2200      	movs	r2, #0
 800a60e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SD_CSn_PIN_GPIO_Port, &GPIO_InitStruct);
 800a610:	230c      	movs	r3, #12
 800a612:	18fa      	adds	r2, r7, r3
 800a614:	23a0      	movs	r3, #160	; 0xa0
 800a616:	05db      	lsls	r3, r3, #23
 800a618:	0011      	movs	r1, r2
 800a61a:	0018      	movs	r0, r3
 800a61c:	f7f7 fd46 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ENB_CONV_Pin */
  GPIO_InitStruct.Pin = ENB_CONV_Pin;
 800a620:	230c      	movs	r3, #12
 800a622:	18fb      	adds	r3, r7, r3
 800a624:	2201      	movs	r2, #1
 800a626:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a628:	230c      	movs	r3, #12
 800a62a:	18fb      	adds	r3, r7, r3
 800a62c:	2201      	movs	r2, #1
 800a62e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a630:	230c      	movs	r3, #12
 800a632:	18fb      	adds	r3, r7, r3
 800a634:	2200      	movs	r2, #0
 800a636:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a638:	230c      	movs	r3, #12
 800a63a:	18fb      	adds	r3, r7, r3
 800a63c:	2200      	movs	r2, #0
 800a63e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ENB_CONV_GPIO_Port, &GPIO_InitStruct);
 800a640:	230c      	movs	r3, #12
 800a642:	18fb      	adds	r3, r7, r3
 800a644:	4a0f      	ldr	r2, [pc, #60]	; (800a684 <MX_GPIO_Init+0xe4>)
 800a646:	0019      	movs	r1, r3
 800a648:	0010      	movs	r0, r2
 800a64a:	f7f7 fd2f 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 800a64e:	230c      	movs	r3, #12
 800a650:	18fb      	adds	r3, r7, r3
 800a652:	2280      	movs	r2, #128	; 0x80
 800a654:	0052      	lsls	r2, r2, #1
 800a656:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800a658:	230c      	movs	r3, #12
 800a65a:	18fb      	adds	r3, r7, r3
 800a65c:	4a0a      	ldr	r2, [pc, #40]	; (800a688 <MX_GPIO_Init+0xe8>)
 800a65e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a660:	230c      	movs	r3, #12
 800a662:	18fb      	adds	r3, r7, r3
 800a664:	2201      	movs	r2, #1
 800a666:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 800a668:	230c      	movs	r3, #12
 800a66a:	18fa      	adds	r2, r7, r3
 800a66c:	23a0      	movs	r3, #160	; 0xa0
 800a66e:	05db      	lsls	r3, r3, #23
 800a670:	0011      	movs	r1, r2
 800a672:	0018      	movs	r0, r3
 800a674:	f7f7 fd1a 	bl	80020ac <HAL_GPIO_Init>

}
 800a678:	46c0      	nop			; (mov r8, r8)
 800a67a:	46bd      	mov	sp, r7
 800a67c:	b008      	add	sp, #32
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	40021000 	.word	0x40021000
 800a684:	50000400 	.word	0x50000400
 800a688:	10310000 	.word	0x10310000

0800a68c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800a696:	e7fe      	b.n	800a696 <_Error_Handler+0xa>

0800a698 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	printf ("Wrong parameters value: file %s on line %d\r\n", file, (int) line);
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	6879      	ldr	r1, [r7, #4]
 800a6a6:	4b02      	ldr	r3, [pc, #8]	; (800a6b0 <assert_failed+0x18>)
 800a6a8:	0018      	movs	r0, r3
 800a6aa:	f000 fd57 	bl	800b15c <iprintf>
	while (1)
 800a6ae:	e7fe      	b.n	800a6ae <assert_failed+0x16>
 800a6b0:	0800c33c 	.word	0x0800c33c

0800a6b4 <TM_SPI_Send>:
/////////////EXTERN VARIABLE///////////////////
extern SPI_HandleTypeDef HSPI_SDCARD;

///////////// REMAP FUNC ///////////////////

static uint8_t TM_SPI_Send(uint8_t data) {
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b086      	sub	sp, #24
 800a6b8:	af02      	add	r7, sp, #8
 800a6ba:	0002      	movs	r2, r0
 800a6bc:	1dfb      	adds	r3, r7, #7
 800a6be:	701a      	strb	r2, [r3, #0]
    uint8_t d = 0xff;
 800a6c0:	230f      	movs	r3, #15
 800a6c2:	18fb      	adds	r3, r7, r3
 800a6c4:	22ff      	movs	r2, #255	; 0xff
 800a6c6:	701a      	strb	r2, [r3, #0]

    /* Set down counter */
    HAL_SPI_TransmitReceive(&HSPI_SDCARD, &data, &d, 1, 2);
 800a6c8:	230f      	movs	r3, #15
 800a6ca:	18fa      	adds	r2, r7, r3
 800a6cc:	1df9      	adds	r1, r7, #7
 800a6ce:	4806      	ldr	r0, [pc, #24]	; (800a6e8 <TM_SPI_Send+0x34>)
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	9300      	str	r3, [sp, #0]
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	f7fa f9af 	bl	8004a38 <HAL_SPI_TransmitReceive>
//    HAL_SPI_Transmit(&HSPI_SDCARD, &data, 1, 2);
//    HAL_SPI_StateTypeDef status = HAL_SPI_GetState(&HSPI_SDCARD);
//    HAL_SPI_Receive(&HSPI_SDCARD, &d, 1, 2);
//    status = HAL_SPI_GetState(&HSPI_SDCARD);
    return d;
 800a6da:	230f      	movs	r3, #15
 800a6dc:	18fb      	adds	r3, r7, r3
 800a6de:	781b      	ldrb	r3, [r3, #0]
}
 800a6e0:	0018      	movs	r0, r3
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	b004      	add	sp, #16
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	200011d0 	.word	0x200011d0

0800a6ec <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/
static int wait_ready ( /* 1:Ready, 0:Timeout */
    UINT wt         /* Timeout [ms] */
)
{
 800a6ec:	b590      	push	{r4, r7, lr}
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
    BYTE d;

    /* Set down counter */
    uint32_t startTick;

    startTick = HAL_GetTick();
 800a6f4:	f7f6 ff74 	bl	80015e0 <HAL_GetTick>
 800a6f8:	0003      	movs	r3, r0
 800a6fa:	60fb      	str	r3, [r7, #12]
    do {
        d = TM_SPI_Send(0xFF);
 800a6fc:	230b      	movs	r3, #11
 800a6fe:	18fc      	adds	r4, r7, r3
 800a700:	20ff      	movs	r0, #255	; 0xff
 800a702:	f7ff ffd7 	bl	800a6b4 <TM_SPI_Send>
 800a706:	0003      	movs	r3, r0
 800a708:	7023      	strb	r3, [r4, #0]
    } while (d != 0xFF && (HAL_GetTick() - startTick < wt));    /* Wait for card goes ready or timeout */
 800a70a:	230b      	movs	r3, #11
 800a70c:	18fb      	adds	r3, r7, r3
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	2bff      	cmp	r3, #255	; 0xff
 800a712:	d007      	beq.n	800a724 <wait_ready+0x38>
 800a714:	f7f6 ff64 	bl	80015e0 <HAL_GetTick>
 800a718:	0002      	movs	r2, r0
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	1ad2      	subs	r2, r2, r3
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	429a      	cmp	r2, r3
 800a722:	d3eb      	bcc.n	800a6fc <wait_ready+0x10>

    return ((d == 0xFF) && (HAL_GetTick() - startTick <= wt)) ? 1 : 0;
 800a724:	230b      	movs	r3, #11
 800a726:	18fb      	adds	r3, r7, r3
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	2bff      	cmp	r3, #255	; 0xff
 800a72c:	d109      	bne.n	800a742 <wait_ready+0x56>
 800a72e:	f7f6 ff57 	bl	80015e0 <HAL_GetTick>
 800a732:	0002      	movs	r2, r0
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	1ad2      	subs	r2, r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d801      	bhi.n	800a742 <wait_ready+0x56>
 800a73e:	2301      	movs	r3, #1
 800a740:	e000      	b.n	800a744 <wait_ready+0x58>
 800a742:	2300      	movs	r3, #0
}
 800a744:	0018      	movs	r0, r3
 800a746:	46bd      	mov	sp, r7
 800a748:	b005      	add	sp, #20
 800a74a:	bd90      	pop	{r4, r7, pc}

0800a74c <deselect>:

/*-----------------------------------------------------------------------*/
/* Deselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/
static void deselect (void)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	af00      	add	r7, sp, #0
    FATFS_CS_HIGH;          /* CS = H */
 800a750:	23a0      	movs	r3, #160	; 0xa0
 800a752:	05db      	lsls	r3, r3, #23
 800a754:	2201      	movs	r2, #1
 800a756:	2110      	movs	r1, #16
 800a758:	0018      	movs	r0, r3
 800a75a:	f7f7 ff4d 	bl	80025f8 <HAL_GPIO_WritePin>
    TM_SPI_Send(0xFF);           /* Dummy clock (force DO hi-z for multiple slave SPI) */
 800a75e:	20ff      	movs	r0, #255	; 0xff
 800a760:	f7ff ffa8 	bl	800a6b4 <TM_SPI_Send>
}
 800a764:	46c0      	nop			; (mov r8, r8)
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <sd_select>:

/*-----------------------------------------------------------------------*/
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/
static int sd_select (void)    /* 1:OK, 0:Timeout */
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	af00      	add	r7, sp, #0
    FATFS_CS_LOW;
 800a76e:	23a0      	movs	r3, #160	; 0xa0
 800a770:	05db      	lsls	r3, r3, #23
 800a772:	2200      	movs	r2, #0
 800a774:	2110      	movs	r1, #16
 800a776:	0018      	movs	r0, r3
 800a778:	f7f7 ff3e 	bl	80025f8 <HAL_GPIO_WritePin>
    TM_SPI_Send(0xFF);   /* Dummy clock (force DO enabled) */
 800a77c:	20ff      	movs	r0, #255	; 0xff
 800a77e:	f7ff ff99 	bl	800a6b4 <TM_SPI_Send>

    if (wait_ready(500)) {
 800a782:	23fa      	movs	r3, #250	; 0xfa
 800a784:	005b      	lsls	r3, r3, #1
 800a786:	0018      	movs	r0, r3
 800a788:	f7ff ffb0 	bl	800a6ec <wait_ready>
 800a78c:	1e03      	subs	r3, r0, #0
 800a78e:	d001      	beq.n	800a794 <sd_select+0x2a>
        return 1;   /* OK */
 800a790:	2301      	movs	r3, #1
 800a792:	e002      	b.n	800a79a <sd_select+0x30>
    }
    deselect();
 800a794:	f7ff ffda 	bl	800a74c <deselect>
    return 0;   /* Timeout */
 800a798:	2300      	movs	r3, #0
}
 800a79a:	0018      	movs	r0, r3
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <TM_FATFS_SD_disk_read>:
DRESULT TM_FATFS_SD_disk_read (
    BYTE *buff,     /* Data buffer to store read data */
    DWORD sector,   /* Sector address (LBA) */
    UINT count      /* Number of sectors to read (1..128) */
)
{
 800a7a0:	b590      	push	{r4, r7, lr}
 800a7a2:	b087      	sub	sp, #28
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	607a      	str	r2, [r7, #4]
    uint8_t readStatus;
//    if (!SDCARD_IsDetected() || (TM_FATFS_SD_Stat & STA_NOINIT)) {
//        return RES_NOTRDY;
//    }

    if (count == 1) {   /* Single sector read */
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d10a      	bne.n	800a7c8 <TM_FATFS_SD_disk_read+0x28>
        readStatus = SD_Read_Block(sector, buff);
 800a7b2:	2317      	movs	r3, #23
 800a7b4:	18fc      	adds	r4, r7, r3
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	0011      	movs	r1, r2
 800a7bc:	0018      	movs	r0, r3
 800a7be:	f7f6 fb9d 	bl	8000efc <SD_Read_Block>
 800a7c2:	0003      	movs	r3, r0
 800a7c4:	7023      	strb	r3, [r4, #0]
 800a7c6:	e009      	b.n	800a7dc <TM_FATFS_SD_disk_read+0x3c>
    } else {                /* Multiple sector read */
        readStatus = SD_ReadMultiBlock(sector, buff, count);
 800a7c8:	2317      	movs	r3, #23
 800a7ca:	18fc      	adds	r4, r7, r3
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	68f9      	ldr	r1, [r7, #12]
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	0018      	movs	r0, r3
 800a7d4:	f7f6 fdf8 	bl	80013c8 <SD_ReadMultiBlock>
 800a7d8:	0003      	movs	r3, r0
 800a7da:	7023      	strb	r3, [r4, #0]
    }
    else
    {
        SOS_DEBUG("Read SD card OK\r\n");
    }
    return (readStatus != 0) ? RES_ERROR : RES_OK;  /* Return result */
 800a7dc:	2317      	movs	r3, #23
 800a7de:	18fb      	adds	r3, r7, r3
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	1e5a      	subs	r2, r3, #1
 800a7e4:	4193      	sbcs	r3, r2
 800a7e6:	b2db      	uxtb	r3, r3
}
 800a7e8:	0018      	movs	r0, r3
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	b007      	add	sp, #28
 800a7ee:	bd90      	pop	{r4, r7, pc}

0800a7f0 <TM_FATFS_SD_disk_write>:
#if _USE_WRITE
DRESULT TM_FATFS_SD_disk_write (
    const BYTE *buff,   /* Data to be written */
    DWORD sector,       /* Sector address (LBA) */
    UINT count          /* Number of sectors to write (1..128) */
) {
 800a7f0:	b590      	push	{r4, r7, lr}
 800a7f2:	b087      	sub	sp, #28
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
//    }
//    if (TM_FATFS_SD_Stat & STA_PROTECT) {
//        return RES_WRPRT;   /* Check write protect */
//    }

    if (count == 1) {   /* Single sector write */
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d10a      	bne.n	800a818 <TM_FATFS_SD_disk_write+0x28>
        writeStatus = SD_Write_Block(sector, (uint8_t*) buff);
 800a802:	2317      	movs	r3, #23
 800a804:	18fc      	adds	r4, r7, r3
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	0011      	movs	r1, r2
 800a80c:	0018      	movs	r0, r3
 800a80e:	f7f6 fc2b 	bl	8001068 <SD_Write_Block>
 800a812:	0003      	movs	r3, r0
 800a814:	7023      	strb	r3, [r4, #0]
 800a816:	e009      	b.n	800a82c <TM_FATFS_SD_disk_write+0x3c>
    } else {                /* Multiple sector write */
        writeStatus = SD_WriteMultiBlock(sector, (uint8_t*) buff, count);
 800a818:	2317      	movs	r3, #23
 800a81a:	18fc      	adds	r4, r7, r3
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	68f9      	ldr	r1, [r7, #12]
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	0018      	movs	r0, r3
 800a824:	f7f6 fcec 	bl	8001200 <SD_WriteMultiBlock>
 800a828:	0003      	movs	r3, r0
 800a82a:	7023      	strb	r3, [r4, #0]
    }
    else
    {
        SOS_DEBUG("Write SD card OK\r\n");
    }
    return (writeStatus != 0) ? RES_ERROR : RES_OK;  /* Return result */
 800a82c:	2317      	movs	r3, #23
 800a82e:	18fb      	adds	r3, r7, r3
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	1e5a      	subs	r2, r3, #1
 800a834:	4193      	sbcs	r3, r2
 800a836:	b2db      	uxtb	r3, r3
}
 800a838:	0018      	movs	r0, r3
 800a83a:	46bd      	mov	sp, r7
 800a83c:	b007      	add	sp, #28
 800a83e:	bd90      	pop	{r4, r7, pc}

0800a840 <TM_FATFS_SD_disk_ioctl>:
#if _USE_IOCTL
DRESULT TM_FATFS_SD_disk_ioctl (
    BYTE cmd,       /* Control code */
    void *buff      /* Buffer to send/receive control data */
)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b086      	sub	sp, #24
 800a844:	af00      	add	r7, sp, #0
 800a846:	0002      	movs	r2, r0
 800a848:	6039      	str	r1, [r7, #0]
 800a84a:	1dfb      	adds	r3, r7, #7
 800a84c:	701a      	strb	r2, [r3, #0]
    DRESULT res;
    BYTE n;
    BYTE* csd = SD_CSD;
 800a84e:	4b71      	ldr	r3, [pc, #452]	; (800aa14 <TM_FATFS_SD_disk_ioctl+0x1d4>)
 800a850:	613b      	str	r3, [r7, #16]
//    }
//    if (!SDCARD_IsDetected()) {
//        return RES_NOTRDY;
//    }

    res = RES_ERROR;
 800a852:	2317      	movs	r3, #23
 800a854:	18fb      	adds	r3, r7, r3
 800a856:	2201      	movs	r2, #1
 800a858:	701a      	strb	r2, [r3, #0]

    switch (cmd) {
 800a85a:	1dfb      	adds	r3, r7, #7
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	2b04      	cmp	r3, #4
 800a860:	d900      	bls.n	800a864 <TM_FATFS_SD_disk_ioctl+0x24>
 800a862:	e0c5      	b.n	800a9f0 <TM_FATFS_SD_disk_ioctl+0x1b0>
 800a864:	009a      	lsls	r2, r3, #2
 800a866:	4b6c      	ldr	r3, [pc, #432]	; (800aa18 <TM_FATFS_SD_disk_ioctl+0x1d8>)
 800a868:	18d3      	adds	r3, r2, r3
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	469f      	mov	pc, r3
        case CTRL_SYNC :        /* Wait for end of internal write process of the drive */
            if (sd_select()) res = RES_OK;
 800a86e:	f7ff ff7c 	bl	800a76a <sd_select>
 800a872:	1e03      	subs	r3, r0, #0
 800a874:	d100      	bne.n	800a878 <TM_FATFS_SD_disk_ioctl+0x38>
 800a876:	e0c2      	b.n	800a9fe <TM_FATFS_SD_disk_ioctl+0x1be>
 800a878:	2317      	movs	r3, #23
 800a87a:	18fb      	adds	r3, r7, r3
 800a87c:	2200      	movs	r2, #0
 800a87e:	701a      	strb	r2, [r3, #0]
            break;
 800a880:	e0bd      	b.n	800a9fe <TM_FATFS_SD_disk_ioctl+0x1be>

        /* Size in bytes for single sector */
        case GET_SECTOR_SIZE:
            *(WORD *)buff = SD_BLOCK_SIZE;
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	2280      	movs	r2, #128	; 0x80
 800a886:	0092      	lsls	r2, r2, #2
 800a888:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 800a88a:	2317      	movs	r3, #23
 800a88c:	18fb      	adds	r3, r7, r3
 800a88e:	2200      	movs	r2, #0
 800a890:	701a      	strb	r2, [r3, #0]
            break;
 800a892:	e0b5      	b.n	800aa00 <TM_FATFS_SD_disk_ioctl+0x1c0>

        case GET_SECTOR_COUNT : /* Get drive capacity in unit of sector (DWORD) */
            {
                if ((csd[0] >> 6) == 1) {   /* SDC ver 2.00 */
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	099b      	lsrs	r3, r3, #6
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d118      	bne.n	800a8d2 <TM_FATFS_SD_disk_ioctl+0x92>
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	3309      	adds	r3, #9
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	001a      	movs	r2, r3
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	3308      	adds	r3, #8
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	021b      	lsls	r3, r3, #8
 800a8b0:	18d3      	adds	r3, r2, r3
 800a8b2:	0019      	movs	r1, r3
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	3307      	adds	r3, #7
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	041a      	lsls	r2, r3, #16
 800a8bc:	23fc      	movs	r3, #252	; 0xfc
 800a8be:	039b      	lsls	r3, r3, #14
 800a8c0:	4013      	ands	r3, r2
 800a8c2:	18cb      	adds	r3, r1, r3
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	60fb      	str	r3, [r7, #12]
                    *(DWORD*)buff = csize << 10;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	029a      	lsls	r2, r3, #10
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	601a      	str	r2, [r3, #0]
 800a8d0:	e037      	b.n	800a942 <TM_FATFS_SD_disk_ioctl+0x102>
                } else {                    /* SDC ver 1.XX or MMC ver 3 */
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	3305      	adds	r3, #5
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	220f      	movs	r2, #15
 800a8da:	4013      	ands	r3, r2
 800a8dc:	b2da      	uxtb	r2, r3
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	330a      	adds	r3, #10
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	09db      	lsrs	r3, r3, #7
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	18d3      	adds	r3, r2, r3
 800a8ea:	b2da      	uxtb	r2, r3
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	3309      	adds	r3, #9
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	005b      	lsls	r3, r3, #1
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	2106      	movs	r1, #6
 800a8f8:	400b      	ands	r3, r1
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	18d3      	adds	r3, r2, r3
 800a8fe:	b2da      	uxtb	r2, r3
 800a900:	230b      	movs	r3, #11
 800a902:	18fb      	adds	r3, r7, r3
 800a904:	3202      	adds	r2, #2
 800a906:	701a      	strb	r2, [r3, #0]
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	3308      	adds	r3, #8
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	099b      	lsrs	r3, r3, #6
 800a910:	b2db      	uxtb	r3, r3
 800a912:	001a      	movs	r2, r3
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	3307      	adds	r3, #7
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	18d2      	adds	r2, r2, r3
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	3306      	adds	r3, #6
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	0299      	lsls	r1, r3, #10
 800a926:	23c0      	movs	r3, #192	; 0xc0
 800a928:	011b      	lsls	r3, r3, #4
 800a92a:	400b      	ands	r3, r1
 800a92c:	18d3      	adds	r3, r2, r3
 800a92e:	3301      	adds	r3, #1
 800a930:	60fb      	str	r3, [r7, #12]
                    *(DWORD*)buff = csize << (n - 9);
 800a932:	230b      	movs	r3, #11
 800a934:	18fb      	adds	r3, r7, r3
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	3b09      	subs	r3, #9
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	409a      	lsls	r2, r3
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	601a      	str	r2, [r3, #0]
                }
                res = RES_OK;
 800a942:	2317      	movs	r3, #23
 800a944:	18fb      	adds	r3, r7, r3
 800a946:	2200      	movs	r2, #0
 800a948:	701a      	strb	r2, [r3, #0]
            }
            break;
 800a94a:	e059      	b.n	800aa00 <TM_FATFS_SD_disk_ioctl+0x1c0>

        case GET_BLOCK_SIZE :   /* Get erase block size in unit of sector (DWORD) */
            if (SD_CardType == SD_STD_CAPACITY_SD_CARD_V2_0) {    /* SDC ver 2.00 */
 800a94c:	4b33      	ldr	r3, [pc, #204]	; (800aa1c <TM_FATFS_SD_disk_ioctl+0x1dc>)
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	2b02      	cmp	r3, #2
 800a952:	d10f      	bne.n	800a974 <TM_FATFS_SD_disk_ioctl+0x134>
                *(DWORD*)buff = 16UL << (csd[10] >> 4);
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	330a      	adds	r3, #10
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	091b      	lsrs	r3, r3, #4
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	001a      	movs	r2, r3
 800a960:	2310      	movs	r3, #16
 800a962:	4093      	lsls	r3, r2
 800a964:	001a      	movs	r2, r3
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	601a      	str	r2, [r3, #0]
                res = RES_OK;
 800a96a:	2317      	movs	r3, #23
 800a96c:	18fb      	adds	r3, r7, r3
 800a96e:	2200      	movs	r2, #0
 800a970:	701a      	strb	r2, [r3, #0]
                } else {                    /* MMC */
                    *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
                }
                res = RES_OK;
            }
            break;
 800a972:	e045      	b.n	800aa00 <TM_FATFS_SD_disk_ioctl+0x1c0>
                if (SD_CardType & SD_STD_CAPACITY_SD_CARD_V1_0) {    /* SDC ver 1.XX */
 800a974:	4b29      	ldr	r3, [pc, #164]	; (800aa1c <TM_FATFS_SD_disk_ioctl+0x1dc>)
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	001a      	movs	r2, r3
 800a97a:	2301      	movs	r3, #1
 800a97c:	4013      	ands	r3, r2
 800a97e:	d018      	beq.n	800a9b2 <TM_FATFS_SD_disk_ioctl+0x172>
                    *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	330a      	adds	r3, #10
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	005b      	lsls	r3, r3, #1
 800a988:	227e      	movs	r2, #126	; 0x7e
 800a98a:	4013      	ands	r3, r2
 800a98c:	693a      	ldr	r2, [r7, #16]
 800a98e:	320b      	adds	r2, #11
 800a990:	7812      	ldrb	r2, [r2, #0]
 800a992:	09d2      	lsrs	r2, r2, #7
 800a994:	b2d2      	uxtb	r2, r2
 800a996:	189b      	adds	r3, r3, r2
 800a998:	1c5a      	adds	r2, r3, #1
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	330d      	adds	r3, #13
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	099b      	lsrs	r3, r3, #6
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	3b01      	subs	r3, #1
 800a9a6:	409a      	lsls	r2, r3
 800a9a8:	0013      	movs	r3, r2
 800a9aa:	001a      	movs	r2, r3
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	601a      	str	r2, [r3, #0]
 800a9b0:	e019      	b.n	800a9e6 <TM_FATFS_SD_disk_ioctl+0x1a6>
                    *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	330a      	adds	r3, #10
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	109b      	asrs	r3, r3, #2
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	001a      	movs	r2, r3
 800a9be:	231f      	movs	r3, #31
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	693a      	ldr	r2, [r7, #16]
 800a9c6:	320b      	adds	r2, #11
 800a9c8:	7812      	ldrb	r2, [r2, #0]
 800a9ca:	00d2      	lsls	r2, r2, #3
 800a9cc:	2118      	movs	r1, #24
 800a9ce:	400a      	ands	r2, r1
 800a9d0:	6939      	ldr	r1, [r7, #16]
 800a9d2:	310b      	adds	r1, #11
 800a9d4:	7809      	ldrb	r1, [r1, #0]
 800a9d6:	0949      	lsrs	r1, r1, #5
 800a9d8:	b2c9      	uxtb	r1, r1
 800a9da:	1852      	adds	r2, r2, r1
 800a9dc:	3201      	adds	r2, #1
 800a9de:	4353      	muls	r3, r2
 800a9e0:	001a      	movs	r2, r3
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	601a      	str	r2, [r3, #0]
                res = RES_OK;
 800a9e6:	2317      	movs	r3, #23
 800a9e8:	18fb      	adds	r3, r7, r3
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	701a      	strb	r2, [r3, #0]
            break;
 800a9ee:	e007      	b.n	800aa00 <TM_FATFS_SD_disk_ioctl+0x1c0>
//                res = RES_OK;   /* FatFs does not check result of this command */
            // TODO: write for TRIM command
            break;

        default:
            res = RES_PARERR;
 800a9f0:	2317      	movs	r3, #23
 800a9f2:	18fb      	adds	r3, r7, r3
 800a9f4:	2204      	movs	r2, #4
 800a9f6:	701a      	strb	r2, [r3, #0]
 800a9f8:	e002      	b.n	800aa00 <TM_FATFS_SD_disk_ioctl+0x1c0>
            break;
 800a9fa:	46c0      	nop			; (mov r8, r8)
 800a9fc:	e000      	b.n	800aa00 <TM_FATFS_SD_disk_ioctl+0x1c0>
            break;
 800a9fe:	46c0      	nop			; (mov r8, r8)
    }

    deselect();
 800aa00:	f7ff fea4 	bl	800a74c <deselect>

    return res;
 800aa04:	2317      	movs	r3, #23
 800aa06:	18fb      	adds	r3, r7, r3
 800aa08:	781b      	ldrb	r3, [r3, #0]
}
 800aa0a:	0018      	movs	r0, r3
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	b006      	add	sp, #24
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	46c0      	nop			; (mov r8, r8)
 800aa14:	200000f0 	.word	0x200000f0
 800aa18:	0800c548 	.word	0x0800c548
 800aa1c:	2000009c 	.word	0x2000009c

0800aa20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aa24:	4b12      	ldr	r3, [pc, #72]	; (800aa70 <HAL_MspInit+0x50>)
 800aa26:	4a12      	ldr	r2, [pc, #72]	; (800aa70 <HAL_MspInit+0x50>)
 800aa28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aa2a:	2101      	movs	r1, #1
 800aa2c:	430a      	orrs	r2, r1
 800aa2e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800aa30:	4b0f      	ldr	r3, [pc, #60]	; (800aa70 <HAL_MspInit+0x50>)
 800aa32:	4a0f      	ldr	r2, [pc, #60]	; (800aa70 <HAL_MspInit+0x50>)
 800aa34:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800aa36:	2180      	movs	r1, #128	; 0x80
 800aa38:	0549      	lsls	r1, r1, #21
 800aa3a:	430a      	orrs	r2, r1
 800aa3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800aa3e:	2305      	movs	r3, #5
 800aa40:	425b      	negs	r3, r3
 800aa42:	2200      	movs	r2, #0
 800aa44:	2100      	movs	r1, #0
 800aa46:	0018      	movs	r0, r3
 800aa48:	f7f6 fe7c 	bl	8001744 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	425b      	negs	r3, r3
 800aa50:	2200      	movs	r2, #0
 800aa52:	2100      	movs	r1, #0
 800aa54:	0018      	movs	r0, r3
 800aa56:	f7f6 fe75 	bl	8001744 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	425b      	negs	r3, r3
 800aa5e:	2200      	movs	r2, #0
 800aa60:	2100      	movs	r1, #0
 800aa62:	0018      	movs	r0, r3
 800aa64:	f7f6 fe6e 	bl	8001744 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800aa68:	46c0      	nop			; (mov r8, r8)
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	46c0      	nop			; (mov r8, r8)
 800aa70:	40021000 	.word	0x40021000

0800aa74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b088      	sub	sp, #32
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==LPUART1)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a80      	ldr	r2, [pc, #512]	; (800ac84 <HAL_UART_MspInit+0x210>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d14f      	bne.n	800ab26 <HAL_UART_MspInit+0xb2>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800aa86:	4b80      	ldr	r3, [pc, #512]	; (800ac88 <HAL_UART_MspInit+0x214>)
 800aa88:	4a7f      	ldr	r2, [pc, #508]	; (800ac88 <HAL_UART_MspInit+0x214>)
 800aa8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800aa8c:	2180      	movs	r1, #128	; 0x80
 800aa8e:	02c9      	lsls	r1, r1, #11
 800aa90:	430a      	orrs	r2, r1
 800aa92:	639a      	str	r2, [r3, #56]	; 0x38
  
    /**LPUART1 GPIO Configuration    
    PB10     ------> LPUART1_TX
    PB11     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800aa94:	230c      	movs	r3, #12
 800aa96:	18fb      	adds	r3, r7, r3
 800aa98:	22c0      	movs	r2, #192	; 0xc0
 800aa9a:	0112      	lsls	r2, r2, #4
 800aa9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa9e:	230c      	movs	r3, #12
 800aaa0:	18fb      	adds	r3, r7, r3
 800aaa2:	2202      	movs	r2, #2
 800aaa4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaa6:	230c      	movs	r3, #12
 800aaa8:	18fb      	adds	r3, r7, r3
 800aaaa:	2200      	movs	r2, #0
 800aaac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aaae:	230c      	movs	r3, #12
 800aab0:	18fb      	adds	r3, r7, r3
 800aab2:	2203      	movs	r2, #3
 800aab4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 800aab6:	230c      	movs	r3, #12
 800aab8:	18fb      	adds	r3, r7, r3
 800aaba:	2204      	movs	r2, #4
 800aabc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aabe:	230c      	movs	r3, #12
 800aac0:	18fb      	adds	r3, r7, r3
 800aac2:	4a72      	ldr	r2, [pc, #456]	; (800ac8c <HAL_UART_MspInit+0x218>)
 800aac4:	0019      	movs	r1, r3
 800aac6:	0010      	movs	r0, r2
 800aac8:	f7f7 faf0 	bl	80020ac <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 800aacc:	4b70      	ldr	r3, [pc, #448]	; (800ac90 <HAL_UART_MspInit+0x21c>)
 800aace:	4a71      	ldr	r2, [pc, #452]	; (800ac94 <HAL_UART_MspInit+0x220>)
 800aad0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
 800aad2:	4b6f      	ldr	r3, [pc, #444]	; (800ac90 <HAL_UART_MspInit+0x21c>)
 800aad4:	2205      	movs	r2, #5
 800aad6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800aad8:	4b6d      	ldr	r3, [pc, #436]	; (800ac90 <HAL_UART_MspInit+0x21c>)
 800aada:	2200      	movs	r2, #0
 800aadc:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aade:	4b6c      	ldr	r3, [pc, #432]	; (800ac90 <HAL_UART_MspInit+0x21c>)
 800aae0:	2200      	movs	r2, #0
 800aae2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800aae4:	4b6a      	ldr	r3, [pc, #424]	; (800ac90 <HAL_UART_MspInit+0x21c>)
 800aae6:	2280      	movs	r2, #128	; 0x80
 800aae8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aaea:	4b69      	ldr	r3, [pc, #420]	; (800ac90 <HAL_UART_MspInit+0x21c>)
 800aaec:	2200      	movs	r2, #0
 800aaee:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aaf0:	4b67      	ldr	r3, [pc, #412]	; (800ac90 <HAL_UART_MspInit+0x21c>)
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800aaf6:	4b66      	ldr	r3, [pc, #408]	; (800ac90 <HAL_UART_MspInit+0x21c>)
 800aaf8:	2220      	movs	r2, #32
 800aafa:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800aafc:	4b64      	ldr	r3, [pc, #400]	; (800ac90 <HAL_UART_MspInit+0x21c>)
 800aafe:	2200      	movs	r2, #0
 800ab00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800ab02:	4b63      	ldr	r3, [pc, #396]	; (800ac90 <HAL_UART_MspInit+0x21c>)
 800ab04:	0018      	movs	r0, r3
 800ab06:	f7f6 fe9d 	bl	8001844 <HAL_DMA_Init>
 800ab0a:	1e03      	subs	r3, r0, #0
 800ab0c:	d004      	beq.n	800ab18 <HAL_UART_MspInit+0xa4>
    {
      _Error_Handler(__FILE__, __LINE__);
 800ab0e:	4b62      	ldr	r3, [pc, #392]	; (800ac98 <HAL_UART_MspInit+0x224>)
 800ab10:	217a      	movs	r1, #122	; 0x7a
 800ab12:	0018      	movs	r0, r3
 800ab14:	f7ff fdba 	bl	800a68c <_Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a5d      	ldr	r2, [pc, #372]	; (800ac90 <HAL_UART_MspInit+0x21c>)
 800ab1c:	665a      	str	r2, [r3, #100]	; 0x64
 800ab1e:	4b5c      	ldr	r3, [pc, #368]	; (800ac90 <HAL_UART_MspInit+0x21c>)
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800ab24:	e0a9      	b.n	800ac7a <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART1)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a5c      	ldr	r2, [pc, #368]	; (800ac9c <HAL_UART_MspInit+0x228>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d150      	bne.n	800abd2 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART1_CLK_ENABLE();
 800ab30:	4b55      	ldr	r3, [pc, #340]	; (800ac88 <HAL_UART_MspInit+0x214>)
 800ab32:	4a55      	ldr	r2, [pc, #340]	; (800ac88 <HAL_UART_MspInit+0x214>)
 800ab34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ab36:	2180      	movs	r1, #128	; 0x80
 800ab38:	01c9      	lsls	r1, r1, #7
 800ab3a:	430a      	orrs	r2, r1
 800ab3c:	635a      	str	r2, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800ab3e:	230c      	movs	r3, #12
 800ab40:	18fb      	adds	r3, r7, r3
 800ab42:	22c0      	movs	r2, #192	; 0xc0
 800ab44:	00d2      	lsls	r2, r2, #3
 800ab46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab48:	230c      	movs	r3, #12
 800ab4a:	18fb      	adds	r3, r7, r3
 800ab4c:	2202      	movs	r2, #2
 800ab4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab50:	230c      	movs	r3, #12
 800ab52:	18fb      	adds	r3, r7, r3
 800ab54:	2200      	movs	r2, #0
 800ab56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab58:	230c      	movs	r3, #12
 800ab5a:	18fb      	adds	r3, r7, r3
 800ab5c:	2203      	movs	r2, #3
 800ab5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800ab60:	230c      	movs	r3, #12
 800ab62:	18fb      	adds	r3, r7, r3
 800ab64:	2204      	movs	r2, #4
 800ab66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab68:	230c      	movs	r3, #12
 800ab6a:	18fa      	adds	r2, r7, r3
 800ab6c:	23a0      	movs	r3, #160	; 0xa0
 800ab6e:	05db      	lsls	r3, r3, #23
 800ab70:	0011      	movs	r1, r2
 800ab72:	0018      	movs	r0, r3
 800ab74:	f7f7 fa9a 	bl	80020ac <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800ab78:	4b49      	ldr	r3, [pc, #292]	; (800aca0 <HAL_UART_MspInit+0x22c>)
 800ab7a:	4a4a      	ldr	r2, [pc, #296]	; (800aca4 <HAL_UART_MspInit+0x230>)
 800ab7c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 800ab7e:	4b48      	ldr	r3, [pc, #288]	; (800aca0 <HAL_UART_MspInit+0x22c>)
 800ab80:	2203      	movs	r2, #3
 800ab82:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ab84:	4b46      	ldr	r3, [pc, #280]	; (800aca0 <HAL_UART_MspInit+0x22c>)
 800ab86:	2200      	movs	r2, #0
 800ab88:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ab8a:	4b45      	ldr	r3, [pc, #276]	; (800aca0 <HAL_UART_MspInit+0x22c>)
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ab90:	4b43      	ldr	r3, [pc, #268]	; (800aca0 <HAL_UART_MspInit+0x22c>)
 800ab92:	2280      	movs	r2, #128	; 0x80
 800ab94:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ab96:	4b42      	ldr	r3, [pc, #264]	; (800aca0 <HAL_UART_MspInit+0x22c>)
 800ab98:	2200      	movs	r2, #0
 800ab9a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ab9c:	4b40      	ldr	r3, [pc, #256]	; (800aca0 <HAL_UART_MspInit+0x22c>)
 800ab9e:	2200      	movs	r2, #0
 800aba0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800aba2:	4b3f      	ldr	r3, [pc, #252]	; (800aca0 <HAL_UART_MspInit+0x22c>)
 800aba4:	2220      	movs	r2, #32
 800aba6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800aba8:	4b3d      	ldr	r3, [pc, #244]	; (800aca0 <HAL_UART_MspInit+0x22c>)
 800abaa:	2200      	movs	r2, #0
 800abac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800abae:	4b3c      	ldr	r3, [pc, #240]	; (800aca0 <HAL_UART_MspInit+0x22c>)
 800abb0:	0018      	movs	r0, r3
 800abb2:	f7f6 fe47 	bl	8001844 <HAL_DMA_Init>
 800abb6:	1e03      	subs	r3, r0, #0
 800abb8:	d004      	beq.n	800abc4 <HAL_UART_MspInit+0x150>
      _Error_Handler(__FILE__, __LINE__);
 800abba:	4b37      	ldr	r3, [pc, #220]	; (800ac98 <HAL_UART_MspInit+0x224>)
 800abbc:	21a3      	movs	r1, #163	; 0xa3
 800abbe:	0018      	movs	r0, r3
 800abc0:	f7ff fd64 	bl	800a68c <_Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4a36      	ldr	r2, [pc, #216]	; (800aca0 <HAL_UART_MspInit+0x22c>)
 800abc8:	665a      	str	r2, [r3, #100]	; 0x64
 800abca:	4b35      	ldr	r3, [pc, #212]	; (800aca0 <HAL_UART_MspInit+0x22c>)
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	629a      	str	r2, [r3, #40]	; 0x28
}
 800abd0:	e053      	b.n	800ac7a <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART2)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a34      	ldr	r2, [pc, #208]	; (800aca8 <HAL_UART_MspInit+0x234>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d14e      	bne.n	800ac7a <HAL_UART_MspInit+0x206>
    __HAL_RCC_USART2_CLK_ENABLE();
 800abdc:	4b2a      	ldr	r3, [pc, #168]	; (800ac88 <HAL_UART_MspInit+0x214>)
 800abde:	4a2a      	ldr	r2, [pc, #168]	; (800ac88 <HAL_UART_MspInit+0x214>)
 800abe0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800abe2:	2180      	movs	r1, #128	; 0x80
 800abe4:	0289      	lsls	r1, r1, #10
 800abe6:	430a      	orrs	r2, r1
 800abe8:	639a      	str	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800abea:	230c      	movs	r3, #12
 800abec:	18fb      	adds	r3, r7, r3
 800abee:	220c      	movs	r2, #12
 800abf0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abf2:	230c      	movs	r3, #12
 800abf4:	18fb      	adds	r3, r7, r3
 800abf6:	2202      	movs	r2, #2
 800abf8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abfa:	230c      	movs	r3, #12
 800abfc:	18fb      	adds	r3, r7, r3
 800abfe:	2200      	movs	r2, #0
 800ac00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac02:	230c      	movs	r3, #12
 800ac04:	18fb      	adds	r3, r7, r3
 800ac06:	2203      	movs	r2, #3
 800ac08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800ac0a:	230c      	movs	r3, #12
 800ac0c:	18fb      	adds	r3, r7, r3
 800ac0e:	2204      	movs	r2, #4
 800ac10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac12:	230c      	movs	r3, #12
 800ac14:	18fa      	adds	r2, r7, r3
 800ac16:	23a0      	movs	r3, #160	; 0xa0
 800ac18:	05db      	lsls	r3, r3, #23
 800ac1a:	0011      	movs	r1, r2
 800ac1c:	0018      	movs	r0, r3
 800ac1e:	f7f7 fa45 	bl	80020ac <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800ac22:	4b22      	ldr	r3, [pc, #136]	; (800acac <HAL_UART_MspInit+0x238>)
 800ac24:	4a22      	ldr	r2, [pc, #136]	; (800acb0 <HAL_UART_MspInit+0x23c>)
 800ac26:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 800ac28:	4b20      	ldr	r3, [pc, #128]	; (800acac <HAL_UART_MspInit+0x238>)
 800ac2a:	2204      	movs	r2, #4
 800ac2c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ac2e:	4b1f      	ldr	r3, [pc, #124]	; (800acac <HAL_UART_MspInit+0x238>)
 800ac30:	2200      	movs	r2, #0
 800ac32:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac34:	4b1d      	ldr	r3, [pc, #116]	; (800acac <HAL_UART_MspInit+0x238>)
 800ac36:	2200      	movs	r2, #0
 800ac38:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ac3a:	4b1c      	ldr	r3, [pc, #112]	; (800acac <HAL_UART_MspInit+0x238>)
 800ac3c:	2280      	movs	r2, #128	; 0x80
 800ac3e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ac40:	4b1a      	ldr	r3, [pc, #104]	; (800acac <HAL_UART_MspInit+0x238>)
 800ac42:	2200      	movs	r2, #0
 800ac44:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ac46:	4b19      	ldr	r3, [pc, #100]	; (800acac <HAL_UART_MspInit+0x238>)
 800ac48:	2200      	movs	r2, #0
 800ac4a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800ac4c:	4b17      	ldr	r3, [pc, #92]	; (800acac <HAL_UART_MspInit+0x238>)
 800ac4e:	2220      	movs	r2, #32
 800ac50:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ac52:	4b16      	ldr	r3, [pc, #88]	; (800acac <HAL_UART_MspInit+0x238>)
 800ac54:	2200      	movs	r2, #0
 800ac56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800ac58:	4b14      	ldr	r3, [pc, #80]	; (800acac <HAL_UART_MspInit+0x238>)
 800ac5a:	0018      	movs	r0, r3
 800ac5c:	f7f6 fdf2 	bl	8001844 <HAL_DMA_Init>
 800ac60:	1e03      	subs	r3, r0, #0
 800ac62:	d004      	beq.n	800ac6e <HAL_UART_MspInit+0x1fa>
      _Error_Handler(__FILE__, __LINE__);
 800ac64:	4b0c      	ldr	r3, [pc, #48]	; (800ac98 <HAL_UART_MspInit+0x224>)
 800ac66:	21cc      	movs	r1, #204	; 0xcc
 800ac68:	0018      	movs	r0, r3
 800ac6a:	f7ff fd0f 	bl	800a68c <_Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	4a0e      	ldr	r2, [pc, #56]	; (800acac <HAL_UART_MspInit+0x238>)
 800ac72:	665a      	str	r2, [r3, #100]	; 0x64
 800ac74:	4b0d      	ldr	r3, [pc, #52]	; (800acac <HAL_UART_MspInit+0x238>)
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ac7a:	46c0      	nop			; (mov r8, r8)
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	b008      	add	sp, #32
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	46c0      	nop			; (mov r8, r8)
 800ac84:	40004800 	.word	0x40004800
 800ac88:	40021000 	.word	0x40021000
 800ac8c:	50000400 	.word	0x50000400
 800ac90:	20001174 	.word	0x20001174
 800ac94:	4002006c 	.word	0x4002006c
 800ac98:	0800c36c 	.word	0x0800c36c
 800ac9c:	40013800 	.word	0x40013800
 800aca0:	2000109c 	.word	0x2000109c
 800aca4:	40020030 	.word	0x40020030
 800aca8:	40004400 	.word	0x40004400
 800acac:	200007b8 	.word	0x200007b8
 800acb0:	40020058 	.word	0x40020058

0800acb4 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]

  if(hrtc->Instance==RTC)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a06      	ldr	r2, [pc, #24]	; (800acdc <HAL_RTC_MspInit+0x28>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d106      	bne.n	800acd4 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800acc6:	4b06      	ldr	r3, [pc, #24]	; (800ace0 <HAL_RTC_MspInit+0x2c>)
 800acc8:	4a05      	ldr	r2, [pc, #20]	; (800ace0 <HAL_RTC_MspInit+0x2c>)
 800acca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800accc:	2180      	movs	r1, #128	; 0x80
 800acce:	02c9      	lsls	r1, r1, #11
 800acd0:	430a      	orrs	r2, r1
 800acd2:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800acd4:	46c0      	nop			; (mov r8, r8)
 800acd6:	46bd      	mov	sp, r7
 800acd8:	b002      	add	sp, #8
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	40002800 	.word	0x40002800
 800ace0:	40021000 	.word	0x40021000

0800ace4 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b088      	sub	sp, #32
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a18      	ldr	r2, [pc, #96]	; (800ad54 <HAL_SPI_MspInit+0x70>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d12a      	bne.n	800ad4c <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800acf6:	4b18      	ldr	r3, [pc, #96]	; (800ad58 <HAL_SPI_MspInit+0x74>)
 800acf8:	4a17      	ldr	r2, [pc, #92]	; (800ad58 <HAL_SPI_MspInit+0x74>)
 800acfa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800acfc:	2180      	movs	r1, #128	; 0x80
 800acfe:	0149      	lsls	r1, r1, #5
 800ad00:	430a      	orrs	r2, r1
 800ad02:	635a      	str	r2, [r3, #52]	; 0x34
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800ad04:	230c      	movs	r3, #12
 800ad06:	18fb      	adds	r3, r7, r3
 800ad08:	22e0      	movs	r2, #224	; 0xe0
 800ad0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad0c:	230c      	movs	r3, #12
 800ad0e:	18fb      	adds	r3, r7, r3
 800ad10:	2202      	movs	r2, #2
 800ad12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad14:	230c      	movs	r3, #12
 800ad16:	18fb      	adds	r3, r7, r3
 800ad18:	2200      	movs	r2, #0
 800ad1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad1c:	230c      	movs	r3, #12
 800ad1e:	18fb      	adds	r3, r7, r3
 800ad20:	2203      	movs	r2, #3
 800ad22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800ad24:	230c      	movs	r3, #12
 800ad26:	18fb      	adds	r3, r7, r3
 800ad28:	2200      	movs	r2, #0
 800ad2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad2c:	230c      	movs	r3, #12
 800ad2e:	18fa      	adds	r2, r7, r3
 800ad30:	23a0      	movs	r3, #160	; 0xa0
 800ad32:	05db      	lsls	r3, r3, #23
 800ad34:	0011      	movs	r1, r2
 800ad36:	0018      	movs	r0, r3
 800ad38:	f7f7 f9b8 	bl	80020ac <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	2100      	movs	r1, #0
 800ad40:	2019      	movs	r0, #25
 800ad42:	f7f6 fcff 	bl	8001744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800ad46:	2019      	movs	r0, #25
 800ad48:	f7f6 fd1c 	bl	8001784 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800ad4c:	46c0      	nop			; (mov r8, r8)
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	b008      	add	sp, #32
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	40013000 	.word	0x40013000
 800ad58:	40021000 	.word	0x40021000

0800ad5c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ad60:	46c0      	nop			; (mov r8, r8)
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ad6a:	e7fe      	b.n	800ad6a <HardFault_Handler+0x4>

0800ad6c <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800ad70:	46c0      	nop			; (mov r8, r8)
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}

0800ad76 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800ad76:	b580      	push	{r7, lr}
 800ad78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ad7a:	46c0      	nop			; (mov r8, r8)
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ad84:	f7f6 fc20 	bl	80015c8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800ad88:	f7f6 fd50 	bl	800182c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ad8c:	46c0      	nop			; (mov r8, r8)
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
	...

0800ad94 <DMA1_Channel2_3_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 and channel 3 interrupts.
*/
void DMA1_Channel2_3_IRQHandler(void)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800ad98:	4b03      	ldr	r3, [pc, #12]	; (800ada8 <DMA1_Channel2_3_IRQHandler+0x14>)
 800ad9a:	0018      	movs	r0, r3
 800ad9c:	f7f6 ff78 	bl	8001c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800ada0:	46c0      	nop			; (mov r8, r8)
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	46c0      	nop			; (mov r8, r8)
 800ada8:	2000109c 	.word	0x2000109c

0800adac <DMA1_Channel4_5_6_7_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
*/
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800adb0:	4b05      	ldr	r3, [pc, #20]	; (800adc8 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 800adb2:	0018      	movs	r0, r3
 800adb4:	f7f6 ff6c 	bl	8001c90 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800adb8:	4b04      	ldr	r3, [pc, #16]	; (800adcc <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 800adba:	0018      	movs	r0, r3
 800adbc:	f7f6 ff68 	bl	8001c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800adc0:	46c0      	nop			; (mov r8, r8)
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	46c0      	nop			; (mov r8, r8)
 800adc8:	200007b8 	.word	0x200007b8
 800adcc:	20001174 	.word	0x20001174

0800add0 <SPI1_IRQHandler>:

/**
* @brief This function handles SPI1 global interrupt.
*/
void SPI1_IRQHandler(void)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800add4:	4b03      	ldr	r3, [pc, #12]	; (800ade4 <SPI1_IRQHandler+0x14>)
 800add6:	0018      	movs	r0, r3
 800add8:	f7fa f8b4 	bl	8004f44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800addc:	46c0      	nop			; (mov r8, r8)
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	46c0      	nop			; (mov r8, r8)
 800ade4:	200011d0 	.word	0x200011d0

0800ade8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 800ade8:	b580      	push	{r7, lr}
 800adea:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800adec:	4b17      	ldr	r3, [pc, #92]	; (800ae4c <SystemInit+0x64>)
 800adee:	4a17      	ldr	r2, [pc, #92]	; (800ae4c <SystemInit+0x64>)
 800adf0:	6812      	ldr	r2, [r2, #0]
 800adf2:	2180      	movs	r1, #128	; 0x80
 800adf4:	0049      	lsls	r1, r1, #1
 800adf6:	430a      	orrs	r2, r1
 800adf8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800adfa:	4b14      	ldr	r3, [pc, #80]	; (800ae4c <SystemInit+0x64>)
 800adfc:	4a13      	ldr	r2, [pc, #76]	; (800ae4c <SystemInit+0x64>)
 800adfe:	68d2      	ldr	r2, [r2, #12]
 800ae00:	4913      	ldr	r1, [pc, #76]	; (800ae50 <SystemInit+0x68>)
 800ae02:	400a      	ands	r2, r1
 800ae04:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800ae06:	4b11      	ldr	r3, [pc, #68]	; (800ae4c <SystemInit+0x64>)
 800ae08:	4a10      	ldr	r2, [pc, #64]	; (800ae4c <SystemInit+0x64>)
 800ae0a:	6812      	ldr	r2, [r2, #0]
 800ae0c:	4911      	ldr	r1, [pc, #68]	; (800ae54 <SystemInit+0x6c>)
 800ae0e:	400a      	ands	r2, r1
 800ae10:	601a      	str	r2, [r3, #0]
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800ae12:	4b0e      	ldr	r3, [pc, #56]	; (800ae4c <SystemInit+0x64>)
 800ae14:	4a0d      	ldr	r2, [pc, #52]	; (800ae4c <SystemInit+0x64>)
 800ae16:	6892      	ldr	r2, [r2, #8]
 800ae18:	2101      	movs	r1, #1
 800ae1a:	438a      	bics	r2, r1
 800ae1c:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800ae1e:	4b0b      	ldr	r3, [pc, #44]	; (800ae4c <SystemInit+0x64>)
 800ae20:	4a0a      	ldr	r2, [pc, #40]	; (800ae4c <SystemInit+0x64>)
 800ae22:	6812      	ldr	r2, [r2, #0]
 800ae24:	490c      	ldr	r1, [pc, #48]	; (800ae58 <SystemInit+0x70>)
 800ae26:	400a      	ands	r2, r1
 800ae28:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800ae2a:	4b08      	ldr	r3, [pc, #32]	; (800ae4c <SystemInit+0x64>)
 800ae2c:	4a07      	ldr	r2, [pc, #28]	; (800ae4c <SystemInit+0x64>)
 800ae2e:	68d2      	ldr	r2, [r2, #12]
 800ae30:	490a      	ldr	r1, [pc, #40]	; (800ae5c <SystemInit+0x74>)
 800ae32:	400a      	ands	r2, r1
 800ae34:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800ae36:	4b05      	ldr	r3, [pc, #20]	; (800ae4c <SystemInit+0x64>)
 800ae38:	2200      	movs	r2, #0
 800ae3a:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ae3c:	4b08      	ldr	r3, [pc, #32]	; (800ae60 <SystemInit+0x78>)
 800ae3e:	2280      	movs	r2, #128	; 0x80
 800ae40:	0512      	lsls	r2, r2, #20
 800ae42:	609a      	str	r2, [r3, #8]
#endif
}
 800ae44:	46c0      	nop			; (mov r8, r8)
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	46c0      	nop			; (mov r8, r8)
 800ae4c:	40021000 	.word	0x40021000
 800ae50:	88ff400c 	.word	0x88ff400c
 800ae54:	fef6fff6 	.word	0xfef6fff6
 800ae58:	fffbffff 	.word	0xfffbffff
 800ae5c:	ff02ffff 	.word	0xff02ffff
 800ae60:	e000ed00 	.word	0xe000ed00

0800ae64 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	0002      	movs	r2, r0
 800ae6c:	1dfb      	adds	r3, r7, #7
 800ae6e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
    // TODO: init spi (DMA)
//    Stat = TM_FATFS_SD_disk_initialize();
    Stat = 0;
 800ae70:	4b07      	ldr	r3, [pc, #28]	; (800ae90 <USER_initialize+0x2c>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	701a      	strb	r2, [r3, #0]
    SD_CardInit();
 800ae76:	f7f5 fd53 	bl	8000920 <SD_CardInit>
    SD_Read_CSD();
 800ae7a:	f7f5 feb5 	bl	8000be8 <SD_Read_CSD>
    SD_Read_CID();
 800ae7e:	f7f5 ffad 	bl	8000ddc <SD_Read_CID>
    return Stat;
 800ae82:	4b03      	ldr	r3, [pc, #12]	; (800ae90 <USER_initialize+0x2c>)
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800ae88:	0018      	movs	r0, r3
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	b002      	add	sp, #8
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	20000004 	.word	0x20000004

0800ae94 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	0002      	movs	r2, r0
 800ae9c:	1dfb      	adds	r3, r7, #7
 800ae9e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
//    Stat = TM_FATFS_SD_disk_status();
    // TODO: check status
    Stat = 0;
 800aea0:	4b04      	ldr	r3, [pc, #16]	; (800aeb4 <USER_status+0x20>)
 800aea2:	2200      	movs	r2, #0
 800aea4:	701a      	strb	r2, [r3, #0]
    return Stat;
 800aea6:	4b03      	ldr	r3, [pc, #12]	; (800aeb4 <USER_status+0x20>)
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800aeac:	0018      	movs	r0, r3
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	b002      	add	sp, #8
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	20000004 	.word	0x20000004

0800aeb8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60b9      	str	r1, [r7, #8]
 800aec0:	607a      	str	r2, [r7, #4]
 800aec2:	603b      	str	r3, [r7, #0]
 800aec4:	230f      	movs	r3, #15
 800aec6:	18fb      	adds	r3, r7, r3
 800aec8:	1c02      	adds	r2, r0, #0
 800aeca:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
    Stat = TM_FATFS_SD_disk_read(buff, sector, count);
 800aecc:	683a      	ldr	r2, [r7, #0]
 800aece:	6879      	ldr	r1, [r7, #4]
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	0018      	movs	r0, r3
 800aed4:	f7ff fc64 	bl	800a7a0 <TM_FATFS_SD_disk_read>
 800aed8:	0003      	movs	r3, r0
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	4b09      	ldr	r3, [pc, #36]	; (800af04 <USER_read+0x4c>)
 800aede:	701a      	strb	r2, [r3, #0]
	assert_param(Stat == RES_OK);
 800aee0:	4b08      	ldr	r3, [pc, #32]	; (800af04 <USER_read+0x4c>)
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d004      	beq.n	800aef4 <USER_read+0x3c>
 800aeea:	4b07      	ldr	r3, [pc, #28]	; (800af08 <USER_read+0x50>)
 800aeec:	219d      	movs	r1, #157	; 0x9d
 800aeee:	0018      	movs	r0, r3
 800aef0:	f7ff fbd2 	bl	800a698 <assert_failed>
    return Stat;
 800aef4:	4b03      	ldr	r3, [pc, #12]	; (800af04 <USER_read+0x4c>)
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800aefa:	0018      	movs	r0, r3
 800aefc:	46bd      	mov	sp, r7
 800aefe:	b004      	add	sp, #16
 800af00:	bd80      	pop	{r7, pc}
 800af02:	46c0      	nop			; (mov r8, r8)
 800af04:	20000004 	.word	0x20000004
 800af08:	0800c388 	.word	0x0800c388

0800af0c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	60b9      	str	r1, [r7, #8]
 800af14:	607a      	str	r2, [r7, #4]
 800af16:	603b      	str	r3, [r7, #0]
 800af18:	230f      	movs	r3, #15
 800af1a:	18fb      	adds	r3, r7, r3
 800af1c:	1c02      	adds	r2, r0, #0
 800af1e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    Stat = TM_FATFS_SD_disk_write(buff, sector, count);
 800af20:	683a      	ldr	r2, [r7, #0]
 800af22:	6879      	ldr	r1, [r7, #4]
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	0018      	movs	r0, r3
 800af28:	f7ff fc62 	bl	800a7f0 <TM_FATFS_SD_disk_write>
 800af2c:	0003      	movs	r3, r0
 800af2e:	b2da      	uxtb	r2, r3
 800af30:	4b09      	ldr	r3, [pc, #36]	; (800af58 <USER_write+0x4c>)
 800af32:	701a      	strb	r2, [r3, #0]
	assert_param(Stat == RES_OK);
 800af34:	4b08      	ldr	r3, [pc, #32]	; (800af58 <USER_write+0x4c>)
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d004      	beq.n	800af48 <USER_write+0x3c>
 800af3e:	4b07      	ldr	r3, [pc, #28]	; (800af5c <USER_write+0x50>)
 800af40:	21b5      	movs	r1, #181	; 0xb5
 800af42:	0018      	movs	r0, r3
 800af44:	f7ff fba8 	bl	800a698 <assert_failed>
    return Stat;
 800af48:	4b03      	ldr	r3, [pc, #12]	; (800af58 <USER_write+0x4c>)
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800af4e:	0018      	movs	r0, r3
 800af50:	46bd      	mov	sp, r7
 800af52:	b004      	add	sp, #16
 800af54:	bd80      	pop	{r7, pc}
 800af56:	46c0      	nop			; (mov r8, r8)
 800af58:	20000004 	.word	0x20000004
 800af5c:	0800c388 	.word	0x0800c388

0800af60 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	603a      	str	r2, [r7, #0]
 800af68:	1dfb      	adds	r3, r7, #7
 800af6a:	1c02      	adds	r2, r0, #0
 800af6c:	701a      	strb	r2, [r3, #0]
 800af6e:	1dbb      	adds	r3, r7, #6
 800af70:	1c0a      	adds	r2, r1, #0
 800af72:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
    Stat = TM_FATFS_SD_disk_ioctl(cmd, buff);
 800af74:	1dbb      	adds	r3, r7, #6
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	683a      	ldr	r2, [r7, #0]
 800af7a:	0011      	movs	r1, r2
 800af7c:	0018      	movs	r0, r3
 800af7e:	f7ff fc5f 	bl	800a840 <TM_FATFS_SD_disk_ioctl>
 800af82:	0003      	movs	r3, r0
 800af84:	b2da      	uxtb	r2, r3
 800af86:	4b09      	ldr	r3, [pc, #36]	; (800afac <USER_ioctl+0x4c>)
 800af88:	701a      	strb	r2, [r3, #0]
	assert_param(Stat == RES_OK);
 800af8a:	4b08      	ldr	r3, [pc, #32]	; (800afac <USER_ioctl+0x4c>)
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	2b00      	cmp	r3, #0
 800af92:	d004      	beq.n	800af9e <USER_ioctl+0x3e>
 800af94:	4b06      	ldr	r3, [pc, #24]	; (800afb0 <USER_ioctl+0x50>)
 800af96:	21cb      	movs	r1, #203	; 0xcb
 800af98:	0018      	movs	r0, r3
 800af9a:	f7ff fb7d 	bl	800a698 <assert_failed>
    return Stat;
 800af9e:	4b03      	ldr	r3, [pc, #12]	; (800afac <USER_ioctl+0x4c>)
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800afa4:	0018      	movs	r0, r3
 800afa6:	46bd      	mov	sp, r7
 800afa8:	b002      	add	sp, #8
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	20000004 	.word	0x20000004
 800afb0:	0800c388 	.word	0x0800c388

0800afb4 <FF8_Reset>:
#include "fifo8.h"
//--------------------------------------
// Function		: FF8_Reset()
// Description	: Reset the FF8 to the original state.
// Note: None.
inline void FF8_Reset(FF8 *pFF, FF_TYPE *pBuff, int nSize) {
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
	ASSERT_VOID ((pFF != NULL) && (pBuff != NULL));
 800afc0:	68fb      	ldr	r3, [r7, #12]
    pFF->pArrBuff = pBuff;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	68ba      	ldr	r2, [r7, #8]
 800afc6:	601a      	str	r2, [r3, #0]
	pFF->nMaxSize = nSize;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	605a      	str	r2, [r3, #4]
	pFF->nSize = 0;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2200      	movs	r2, #0
 800afd2:	609a      	str	r2, [r3, #8]
	pFF->nHead = 0;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2200      	movs	r2, #0
 800afd8:	60da      	str	r2, [r3, #12]
	pFF->nTail = 0;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2200      	movs	r2, #0
 800afde:	611a      	str	r2, [r3, #16]
	
	pFF->bEnProtect  = FALSE;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2200      	movs	r2, #0
 800afe4:	751a      	strb	r2, [r3, #20]
	pFF->nProtectPtr = 0;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2200      	movs	r2, #0
 800afea:	619a      	str	r2, [r3, #24]
}
 800afec:	46c0      	nop			; (mov r8, r8)
 800afee:	46bd      	mov	sp, r7
 800aff0:	b004      	add	sp, #16
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <FF8_Push>:

//--------------------------------------
// Function		: FF8_Push()
// Description	: Push an element to the FF8.
// Note: This function does not perform thread safe. User must take care of it.
inline BOOL FF8_Push(FF8 *pFF, FF_TYPE b) {
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	000a      	movs	r2, r1
 800affe:	1cfb      	adds	r3, r7, #3
 800b000:	701a      	strb	r2, [r3, #0]
	ASSERT_NONVOID(pFF != NULL, FALSE);

	if(pFF->nSize < pFF->nMaxSize) {
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	689a      	ldr	r2, [r3, #8]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	429a      	cmp	r2, r3
 800b00c:	da1c      	bge.n	800b048 <FF8_Push+0x54>
		pFF->pArrBuff[pFF->nTail] = b;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	691b      	ldr	r3, [r3, #16]
 800b016:	18d3      	adds	r3, r2, r3
 800b018:	1cfa      	adds	r2, r7, #3
 800b01a:	7812      	ldrb	r2, [r2, #0]
 800b01c:	701a      	strb	r2, [r3, #0]
		pFF->nTail++;				
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	1c5a      	adds	r2, r3, #1
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	611a      	str	r2, [r3, #16]
		if(pFF->nTail >= pFF->nMaxSize) {
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	691a      	ldr	r2, [r3, #16]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	429a      	cmp	r2, r3
 800b032:	db02      	blt.n	800b03a <FF8_Push+0x46>
			pFF->nTail = 0;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	611a      	str	r2, [r3, #16]
		}
		pFF->nSize++;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	1c5a      	adds	r2, r3, #1
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	609a      	str	r2, [r3, #8]
		return TRUE;
 800b044:	2301      	movs	r3, #1
 800b046:	e000      	b.n	800b04a <FF8_Push+0x56>
	}	

	return FALSE;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	0018      	movs	r0, r3
 800b04c:	46bd      	mov	sp, r7
 800b04e:	b002      	add	sp, #8
 800b050:	bd80      	pop	{r7, pc}

0800b052 <FF8_Pop>:

//--------------------------------------
// Function		: FF8_Pop()
// Description	: Pop a element from the FF8
// Note: This function does not perform thread safe. User must take care of it.
inline BOOL FF8_Pop(FF8 *pFF, FF_TYPE *b) {
 800b052:	b580      	push	{r7, lr}
 800b054:	b082      	sub	sp, #8
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
 800b05a:	6039      	str	r1, [r7, #0]
	ASSERT_NONVOID(((pFF != NULL) && (b != NULL)), FALSE);

	if(pFF->nSize != 0) {
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d01c      	beq.n	800b09e <FF8_Pop+0x4c>
		*b = pFF->pArrBuff[pFF->nHead];
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	18d3      	adds	r3, r2, r3
 800b06e:	781a      	ldrb	r2, [r3, #0]
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	701a      	strb	r2, [r3, #0]
		pFF->nHead++;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	1c5a      	adds	r2, r3, #1
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	60da      	str	r2, [r3, #12]
		if(pFF->nHead >= pFF->nMaxSize) {
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	68da      	ldr	r2, [r3, #12]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	429a      	cmp	r2, r3
 800b088:	db02      	blt.n	800b090 <FF8_Pop+0x3e>
			pFF->nHead = 0;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2200      	movs	r2, #0
 800b08e:	60da      	str	r2, [r3, #12]
		}
		pFF->nSize--;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	1e5a      	subs	r2, r3, #1
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	609a      	str	r2, [r3, #8]
		return TRUE;
 800b09a:	2301      	movs	r3, #1
 800b09c:	e003      	b.n	800b0a6 <FF8_Pop+0x54>
	}		

	*b = 0xFF;
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	22ff      	movs	r2, #255	; 0xff
 800b0a2:	701a      	strb	r2, [r3, #0]
	return FALSE;
 800b0a4:	2300      	movs	r3, #0
}
 800b0a6:	0018      	movs	r0, r3
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	b002      	add	sp, #8
 800b0ac:	bd80      	pop	{r7, pc}
	...

0800b0b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800b0b0:	480d      	ldr	r0, [pc, #52]	; (800b0e8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800b0b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800b0b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b0b6:	e003      	b.n	800b0c0 <LoopCopyDataInit>

0800b0b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b0b8:	4b0c      	ldr	r3, [pc, #48]	; (800b0ec <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800b0ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b0bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b0be:	3104      	adds	r1, #4

0800b0c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800b0c0:	480b      	ldr	r0, [pc, #44]	; (800b0f0 <LoopForever+0xa>)
  ldr  r3, =_edata
 800b0c2:	4b0c      	ldr	r3, [pc, #48]	; (800b0f4 <LoopForever+0xe>)
  adds  r2, r0, r1
 800b0c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b0c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b0c8:	d3f6      	bcc.n	800b0b8 <CopyDataInit>
  ldr  r2, =_sbss
 800b0ca:	4a0b      	ldr	r2, [pc, #44]	; (800b0f8 <LoopForever+0x12>)
  b  LoopFillZerobss
 800b0cc:	e002      	b.n	800b0d4 <LoopFillZerobss>

0800b0ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800b0ce:	2300      	movs	r3, #0
  str  r3, [r2]
 800b0d0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b0d2:	3204      	adds	r2, #4

0800b0d4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800b0d4:	4b09      	ldr	r3, [pc, #36]	; (800b0fc <LoopForever+0x16>)
  cmp  r2, r3
 800b0d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b0d8:	d3f9      	bcc.n	800b0ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800b0da:	f7ff fe85 	bl	800ade8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b0de:	f000 f811 	bl	800b104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b0e2:	f7fe fff9 	bl	800a0d8 <main>

0800b0e6 <LoopForever>:

LoopForever:
    b LoopForever
 800b0e6:	e7fe      	b.n	800b0e6 <LoopForever>
   ldr   r0, =_estack
 800b0e8:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 800b0ec:	0800c628 	.word	0x0800c628
  ldr  r0, =_sdata
 800b0f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b0f4:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 800b0f8:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 800b0fc:	200016a0 	.word	0x200016a0

0800b100 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b100:	e7fe      	b.n	800b100 <ADC1_COMP_IRQHandler>
	...

0800b104 <__libc_init_array>:
 800b104:	b570      	push	{r4, r5, r6, lr}
 800b106:	2600      	movs	r6, #0
 800b108:	4d0c      	ldr	r5, [pc, #48]	; (800b13c <__libc_init_array+0x38>)
 800b10a:	4c0d      	ldr	r4, [pc, #52]	; (800b140 <__libc_init_array+0x3c>)
 800b10c:	1b64      	subs	r4, r4, r5
 800b10e:	10a4      	asrs	r4, r4, #2
 800b110:	42a6      	cmp	r6, r4
 800b112:	d109      	bne.n	800b128 <__libc_init_array+0x24>
 800b114:	2600      	movs	r6, #0
 800b116:	f000 ff93 	bl	800c040 <_init>
 800b11a:	4d0a      	ldr	r5, [pc, #40]	; (800b144 <__libc_init_array+0x40>)
 800b11c:	4c0a      	ldr	r4, [pc, #40]	; (800b148 <__libc_init_array+0x44>)
 800b11e:	1b64      	subs	r4, r4, r5
 800b120:	10a4      	asrs	r4, r4, #2
 800b122:	42a6      	cmp	r6, r4
 800b124:	d105      	bne.n	800b132 <__libc_init_array+0x2e>
 800b126:	bd70      	pop	{r4, r5, r6, pc}
 800b128:	00b3      	lsls	r3, r6, #2
 800b12a:	58eb      	ldr	r3, [r5, r3]
 800b12c:	4798      	blx	r3
 800b12e:	3601      	adds	r6, #1
 800b130:	e7ee      	b.n	800b110 <__libc_init_array+0xc>
 800b132:	00b3      	lsls	r3, r6, #2
 800b134:	58eb      	ldr	r3, [r5, r3]
 800b136:	4798      	blx	r3
 800b138:	3601      	adds	r6, #1
 800b13a:	e7f2      	b.n	800b122 <__libc_init_array+0x1e>
 800b13c:	0800c620 	.word	0x0800c620
 800b140:	0800c620 	.word	0x0800c620
 800b144:	0800c620 	.word	0x0800c620
 800b148:	0800c624 	.word	0x0800c624

0800b14c <memset>:
 800b14c:	0003      	movs	r3, r0
 800b14e:	1882      	adds	r2, r0, r2
 800b150:	4293      	cmp	r3, r2
 800b152:	d100      	bne.n	800b156 <memset+0xa>
 800b154:	4770      	bx	lr
 800b156:	7019      	strb	r1, [r3, #0]
 800b158:	3301      	adds	r3, #1
 800b15a:	e7f9      	b.n	800b150 <memset+0x4>

0800b15c <iprintf>:
 800b15c:	b40f      	push	{r0, r1, r2, r3}
 800b15e:	4b0b      	ldr	r3, [pc, #44]	; (800b18c <iprintf+0x30>)
 800b160:	b513      	push	{r0, r1, r4, lr}
 800b162:	681c      	ldr	r4, [r3, #0]
 800b164:	2c00      	cmp	r4, #0
 800b166:	d005      	beq.n	800b174 <iprintf+0x18>
 800b168:	69a3      	ldr	r3, [r4, #24]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d102      	bne.n	800b174 <iprintf+0x18>
 800b16e:	0020      	movs	r0, r4
 800b170:	f000 f850 	bl	800b214 <__sinit>
 800b174:	ab05      	add	r3, sp, #20
 800b176:	9a04      	ldr	r2, [sp, #16]
 800b178:	68a1      	ldr	r1, [r4, #8]
 800b17a:	0020      	movs	r0, r4
 800b17c:	9301      	str	r3, [sp, #4]
 800b17e:	f000 f965 	bl	800b44c <_vfiprintf_r>
 800b182:	bc16      	pop	{r1, r2, r4}
 800b184:	bc08      	pop	{r3}
 800b186:	b004      	add	sp, #16
 800b188:	4718      	bx	r3
 800b18a:	46c0      	nop			; (mov r8, r8)
 800b18c:	2000001c 	.word	0x2000001c

0800b190 <_cleanup_r>:
 800b190:	b510      	push	{r4, lr}
 800b192:	4902      	ldr	r1, [pc, #8]	; (800b19c <_cleanup_r+0xc>)
 800b194:	f000 f8b2 	bl	800b2fc <_fwalk_reent>
 800b198:	bd10      	pop	{r4, pc}
 800b19a:	46c0      	nop			; (mov r8, r8)
 800b19c:	0800bd49 	.word	0x0800bd49

0800b1a0 <std.isra.0>:
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	b510      	push	{r4, lr}
 800b1a4:	0004      	movs	r4, r0
 800b1a6:	6003      	str	r3, [r0, #0]
 800b1a8:	6043      	str	r3, [r0, #4]
 800b1aa:	6083      	str	r3, [r0, #8]
 800b1ac:	8181      	strh	r1, [r0, #12]
 800b1ae:	6643      	str	r3, [r0, #100]	; 0x64
 800b1b0:	81c2      	strh	r2, [r0, #14]
 800b1b2:	6103      	str	r3, [r0, #16]
 800b1b4:	6143      	str	r3, [r0, #20]
 800b1b6:	6183      	str	r3, [r0, #24]
 800b1b8:	0019      	movs	r1, r3
 800b1ba:	2208      	movs	r2, #8
 800b1bc:	305c      	adds	r0, #92	; 0x5c
 800b1be:	f7ff ffc5 	bl	800b14c <memset>
 800b1c2:	4b05      	ldr	r3, [pc, #20]	; (800b1d8 <std.isra.0+0x38>)
 800b1c4:	6224      	str	r4, [r4, #32]
 800b1c6:	6263      	str	r3, [r4, #36]	; 0x24
 800b1c8:	4b04      	ldr	r3, [pc, #16]	; (800b1dc <std.isra.0+0x3c>)
 800b1ca:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1cc:	4b04      	ldr	r3, [pc, #16]	; (800b1e0 <std.isra.0+0x40>)
 800b1ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1d0:	4b04      	ldr	r3, [pc, #16]	; (800b1e4 <std.isra.0+0x44>)
 800b1d2:	6323      	str	r3, [r4, #48]	; 0x30
 800b1d4:	bd10      	pop	{r4, pc}
 800b1d6:	46c0      	nop			; (mov r8, r8)
 800b1d8:	0800b9b9 	.word	0x0800b9b9
 800b1dc:	0800b9e1 	.word	0x0800b9e1
 800b1e0:	0800ba19 	.word	0x0800ba19
 800b1e4:	0800ba45 	.word	0x0800ba45

0800b1e8 <__sfmoreglue>:
 800b1e8:	b570      	push	{r4, r5, r6, lr}
 800b1ea:	2568      	movs	r5, #104	; 0x68
 800b1ec:	1e4a      	subs	r2, r1, #1
 800b1ee:	4355      	muls	r5, r2
 800b1f0:	000e      	movs	r6, r1
 800b1f2:	0029      	movs	r1, r5
 800b1f4:	3174      	adds	r1, #116	; 0x74
 800b1f6:	f000 f8a3 	bl	800b340 <_malloc_r>
 800b1fa:	1e04      	subs	r4, r0, #0
 800b1fc:	d008      	beq.n	800b210 <__sfmoreglue+0x28>
 800b1fe:	2100      	movs	r1, #0
 800b200:	002a      	movs	r2, r5
 800b202:	6001      	str	r1, [r0, #0]
 800b204:	6046      	str	r6, [r0, #4]
 800b206:	300c      	adds	r0, #12
 800b208:	60a0      	str	r0, [r4, #8]
 800b20a:	3268      	adds	r2, #104	; 0x68
 800b20c:	f7ff ff9e 	bl	800b14c <memset>
 800b210:	0020      	movs	r0, r4
 800b212:	bd70      	pop	{r4, r5, r6, pc}

0800b214 <__sinit>:
 800b214:	6983      	ldr	r3, [r0, #24]
 800b216:	b513      	push	{r0, r1, r4, lr}
 800b218:	0004      	movs	r4, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d128      	bne.n	800b270 <__sinit+0x5c>
 800b21e:	6483      	str	r3, [r0, #72]	; 0x48
 800b220:	64c3      	str	r3, [r0, #76]	; 0x4c
 800b222:	6503      	str	r3, [r0, #80]	; 0x50
 800b224:	4b13      	ldr	r3, [pc, #76]	; (800b274 <__sinit+0x60>)
 800b226:	4a14      	ldr	r2, [pc, #80]	; (800b278 <__sinit+0x64>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	6282      	str	r2, [r0, #40]	; 0x28
 800b22c:	9301      	str	r3, [sp, #4]
 800b22e:	4298      	cmp	r0, r3
 800b230:	d101      	bne.n	800b236 <__sinit+0x22>
 800b232:	2301      	movs	r3, #1
 800b234:	6183      	str	r3, [r0, #24]
 800b236:	0020      	movs	r0, r4
 800b238:	f000 f820 	bl	800b27c <__sfp>
 800b23c:	6060      	str	r0, [r4, #4]
 800b23e:	0020      	movs	r0, r4
 800b240:	f000 f81c 	bl	800b27c <__sfp>
 800b244:	60a0      	str	r0, [r4, #8]
 800b246:	0020      	movs	r0, r4
 800b248:	f000 f818 	bl	800b27c <__sfp>
 800b24c:	2200      	movs	r2, #0
 800b24e:	60e0      	str	r0, [r4, #12]
 800b250:	2104      	movs	r1, #4
 800b252:	6860      	ldr	r0, [r4, #4]
 800b254:	f7ff ffa4 	bl	800b1a0 <std.isra.0>
 800b258:	2201      	movs	r2, #1
 800b25a:	2109      	movs	r1, #9
 800b25c:	68a0      	ldr	r0, [r4, #8]
 800b25e:	f7ff ff9f 	bl	800b1a0 <std.isra.0>
 800b262:	2202      	movs	r2, #2
 800b264:	2112      	movs	r1, #18
 800b266:	68e0      	ldr	r0, [r4, #12]
 800b268:	f7ff ff9a 	bl	800b1a0 <std.isra.0>
 800b26c:	2301      	movs	r3, #1
 800b26e:	61a3      	str	r3, [r4, #24]
 800b270:	bd13      	pop	{r0, r1, r4, pc}
 800b272:	46c0      	nop			; (mov r8, r8)
 800b274:	0800c5e0 	.word	0x0800c5e0
 800b278:	0800b191 	.word	0x0800b191

0800b27c <__sfp>:
 800b27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27e:	4b1e      	ldr	r3, [pc, #120]	; (800b2f8 <__sfp+0x7c>)
 800b280:	0007      	movs	r7, r0
 800b282:	681e      	ldr	r6, [r3, #0]
 800b284:	69b3      	ldr	r3, [r6, #24]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d102      	bne.n	800b290 <__sfp+0x14>
 800b28a:	0030      	movs	r0, r6
 800b28c:	f7ff ffc2 	bl	800b214 <__sinit>
 800b290:	3648      	adds	r6, #72	; 0x48
 800b292:	68b4      	ldr	r4, [r6, #8]
 800b294:	6873      	ldr	r3, [r6, #4]
 800b296:	3b01      	subs	r3, #1
 800b298:	d504      	bpl.n	800b2a4 <__sfp+0x28>
 800b29a:	6833      	ldr	r3, [r6, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d007      	beq.n	800b2b0 <__sfp+0x34>
 800b2a0:	6836      	ldr	r6, [r6, #0]
 800b2a2:	e7f6      	b.n	800b292 <__sfp+0x16>
 800b2a4:	220c      	movs	r2, #12
 800b2a6:	5ea5      	ldrsh	r5, [r4, r2]
 800b2a8:	2d00      	cmp	r5, #0
 800b2aa:	d00d      	beq.n	800b2c8 <__sfp+0x4c>
 800b2ac:	3468      	adds	r4, #104	; 0x68
 800b2ae:	e7f2      	b.n	800b296 <__sfp+0x1a>
 800b2b0:	2104      	movs	r1, #4
 800b2b2:	0038      	movs	r0, r7
 800b2b4:	f7ff ff98 	bl	800b1e8 <__sfmoreglue>
 800b2b8:	6030      	str	r0, [r6, #0]
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	d1f0      	bne.n	800b2a0 <__sfp+0x24>
 800b2be:	230c      	movs	r3, #12
 800b2c0:	0004      	movs	r4, r0
 800b2c2:	603b      	str	r3, [r7, #0]
 800b2c4:	0020      	movs	r0, r4
 800b2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	0020      	movs	r0, r4
 800b2cc:	425b      	negs	r3, r3
 800b2ce:	81e3      	strh	r3, [r4, #14]
 800b2d0:	3302      	adds	r3, #2
 800b2d2:	81a3      	strh	r3, [r4, #12]
 800b2d4:	6665      	str	r5, [r4, #100]	; 0x64
 800b2d6:	6025      	str	r5, [r4, #0]
 800b2d8:	60a5      	str	r5, [r4, #8]
 800b2da:	6065      	str	r5, [r4, #4]
 800b2dc:	6125      	str	r5, [r4, #16]
 800b2de:	6165      	str	r5, [r4, #20]
 800b2e0:	61a5      	str	r5, [r4, #24]
 800b2e2:	2208      	movs	r2, #8
 800b2e4:	0029      	movs	r1, r5
 800b2e6:	305c      	adds	r0, #92	; 0x5c
 800b2e8:	f7ff ff30 	bl	800b14c <memset>
 800b2ec:	6365      	str	r5, [r4, #52]	; 0x34
 800b2ee:	63a5      	str	r5, [r4, #56]	; 0x38
 800b2f0:	64a5      	str	r5, [r4, #72]	; 0x48
 800b2f2:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b2f4:	e7e6      	b.n	800b2c4 <__sfp+0x48>
 800b2f6:	46c0      	nop			; (mov r8, r8)
 800b2f8:	0800c5e0 	.word	0x0800c5e0

0800b2fc <_fwalk_reent>:
 800b2fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2fe:	0004      	movs	r4, r0
 800b300:	0007      	movs	r7, r0
 800b302:	2600      	movs	r6, #0
 800b304:	9101      	str	r1, [sp, #4]
 800b306:	3448      	adds	r4, #72	; 0x48
 800b308:	2c00      	cmp	r4, #0
 800b30a:	d101      	bne.n	800b310 <_fwalk_reent+0x14>
 800b30c:	0030      	movs	r0, r6
 800b30e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b310:	6863      	ldr	r3, [r4, #4]
 800b312:	68a5      	ldr	r5, [r4, #8]
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	9b00      	ldr	r3, [sp, #0]
 800b318:	3b01      	subs	r3, #1
 800b31a:	9300      	str	r3, [sp, #0]
 800b31c:	d501      	bpl.n	800b322 <_fwalk_reent+0x26>
 800b31e:	6824      	ldr	r4, [r4, #0]
 800b320:	e7f2      	b.n	800b308 <_fwalk_reent+0xc>
 800b322:	89ab      	ldrh	r3, [r5, #12]
 800b324:	2b01      	cmp	r3, #1
 800b326:	d908      	bls.n	800b33a <_fwalk_reent+0x3e>
 800b328:	220e      	movs	r2, #14
 800b32a:	5eab      	ldrsh	r3, [r5, r2]
 800b32c:	3301      	adds	r3, #1
 800b32e:	d004      	beq.n	800b33a <_fwalk_reent+0x3e>
 800b330:	0029      	movs	r1, r5
 800b332:	0038      	movs	r0, r7
 800b334:	9b01      	ldr	r3, [sp, #4]
 800b336:	4798      	blx	r3
 800b338:	4306      	orrs	r6, r0
 800b33a:	3568      	adds	r5, #104	; 0x68
 800b33c:	e7eb      	b.n	800b316 <_fwalk_reent+0x1a>
	...

0800b340 <_malloc_r>:
 800b340:	2303      	movs	r3, #3
 800b342:	b570      	push	{r4, r5, r6, lr}
 800b344:	1ccd      	adds	r5, r1, #3
 800b346:	439d      	bics	r5, r3
 800b348:	3508      	adds	r5, #8
 800b34a:	0006      	movs	r6, r0
 800b34c:	2d0c      	cmp	r5, #12
 800b34e:	d21e      	bcs.n	800b38e <_malloc_r+0x4e>
 800b350:	250c      	movs	r5, #12
 800b352:	42a9      	cmp	r1, r5
 800b354:	d81d      	bhi.n	800b392 <_malloc_r+0x52>
 800b356:	0030      	movs	r0, r6
 800b358:	f000 fdad 	bl	800beb6 <__malloc_lock>
 800b35c:	4a25      	ldr	r2, [pc, #148]	; (800b3f4 <_malloc_r+0xb4>)
 800b35e:	6814      	ldr	r4, [r2, #0]
 800b360:	0021      	movs	r1, r4
 800b362:	2900      	cmp	r1, #0
 800b364:	d119      	bne.n	800b39a <_malloc_r+0x5a>
 800b366:	4c24      	ldr	r4, [pc, #144]	; (800b3f8 <_malloc_r+0xb8>)
 800b368:	6823      	ldr	r3, [r4, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d103      	bne.n	800b376 <_malloc_r+0x36>
 800b36e:	0030      	movs	r0, r6
 800b370:	f000 fb10 	bl	800b994 <_sbrk_r>
 800b374:	6020      	str	r0, [r4, #0]
 800b376:	0029      	movs	r1, r5
 800b378:	0030      	movs	r0, r6
 800b37a:	f000 fb0b 	bl	800b994 <_sbrk_r>
 800b37e:	1c43      	adds	r3, r0, #1
 800b380:	d12c      	bne.n	800b3dc <_malloc_r+0x9c>
 800b382:	230c      	movs	r3, #12
 800b384:	0030      	movs	r0, r6
 800b386:	6033      	str	r3, [r6, #0]
 800b388:	f000 fd96 	bl	800beb8 <__malloc_unlock>
 800b38c:	e003      	b.n	800b396 <_malloc_r+0x56>
 800b38e:	2d00      	cmp	r5, #0
 800b390:	dadf      	bge.n	800b352 <_malloc_r+0x12>
 800b392:	230c      	movs	r3, #12
 800b394:	6033      	str	r3, [r6, #0]
 800b396:	2000      	movs	r0, #0
 800b398:	bd70      	pop	{r4, r5, r6, pc}
 800b39a:	680b      	ldr	r3, [r1, #0]
 800b39c:	1b5b      	subs	r3, r3, r5
 800b39e:	d41a      	bmi.n	800b3d6 <_malloc_r+0x96>
 800b3a0:	2b0b      	cmp	r3, #11
 800b3a2:	d903      	bls.n	800b3ac <_malloc_r+0x6c>
 800b3a4:	600b      	str	r3, [r1, #0]
 800b3a6:	18cc      	adds	r4, r1, r3
 800b3a8:	6025      	str	r5, [r4, #0]
 800b3aa:	e003      	b.n	800b3b4 <_malloc_r+0x74>
 800b3ac:	428c      	cmp	r4, r1
 800b3ae:	d10e      	bne.n	800b3ce <_malloc_r+0x8e>
 800b3b0:	6863      	ldr	r3, [r4, #4]
 800b3b2:	6013      	str	r3, [r2, #0]
 800b3b4:	0030      	movs	r0, r6
 800b3b6:	f000 fd7f 	bl	800beb8 <__malloc_unlock>
 800b3ba:	0020      	movs	r0, r4
 800b3bc:	2207      	movs	r2, #7
 800b3be:	300b      	adds	r0, #11
 800b3c0:	1d23      	adds	r3, r4, #4
 800b3c2:	4390      	bics	r0, r2
 800b3c4:	1ac3      	subs	r3, r0, r3
 800b3c6:	d0e7      	beq.n	800b398 <_malloc_r+0x58>
 800b3c8:	425a      	negs	r2, r3
 800b3ca:	50e2      	str	r2, [r4, r3]
 800b3cc:	e7e4      	b.n	800b398 <_malloc_r+0x58>
 800b3ce:	684b      	ldr	r3, [r1, #4]
 800b3d0:	6063      	str	r3, [r4, #4]
 800b3d2:	000c      	movs	r4, r1
 800b3d4:	e7ee      	b.n	800b3b4 <_malloc_r+0x74>
 800b3d6:	000c      	movs	r4, r1
 800b3d8:	6849      	ldr	r1, [r1, #4]
 800b3da:	e7c2      	b.n	800b362 <_malloc_r+0x22>
 800b3dc:	2303      	movs	r3, #3
 800b3de:	1cc4      	adds	r4, r0, #3
 800b3e0:	439c      	bics	r4, r3
 800b3e2:	42a0      	cmp	r0, r4
 800b3e4:	d0e0      	beq.n	800b3a8 <_malloc_r+0x68>
 800b3e6:	1a21      	subs	r1, r4, r0
 800b3e8:	0030      	movs	r0, r6
 800b3ea:	f000 fad3 	bl	800b994 <_sbrk_r>
 800b3ee:	1c43      	adds	r3, r0, #1
 800b3f0:	d1da      	bne.n	800b3a8 <_malloc_r+0x68>
 800b3f2:	e7c6      	b.n	800b382 <_malloc_r+0x42>
 800b3f4:	200000e0 	.word	0x200000e0
 800b3f8:	200000e4 	.word	0x200000e4

0800b3fc <__sfputc_r>:
 800b3fc:	6893      	ldr	r3, [r2, #8]
 800b3fe:	b510      	push	{r4, lr}
 800b400:	3b01      	subs	r3, #1
 800b402:	6093      	str	r3, [r2, #8]
 800b404:	2b00      	cmp	r3, #0
 800b406:	da05      	bge.n	800b414 <__sfputc_r+0x18>
 800b408:	6994      	ldr	r4, [r2, #24]
 800b40a:	42a3      	cmp	r3, r4
 800b40c:	db08      	blt.n	800b420 <__sfputc_r+0x24>
 800b40e:	b2cb      	uxtb	r3, r1
 800b410:	2b0a      	cmp	r3, #10
 800b412:	d005      	beq.n	800b420 <__sfputc_r+0x24>
 800b414:	6813      	ldr	r3, [r2, #0]
 800b416:	1c58      	adds	r0, r3, #1
 800b418:	6010      	str	r0, [r2, #0]
 800b41a:	7019      	strb	r1, [r3, #0]
 800b41c:	b2c8      	uxtb	r0, r1
 800b41e:	bd10      	pop	{r4, pc}
 800b420:	f000 fb16 	bl	800ba50 <__swbuf_r>
 800b424:	e7fb      	b.n	800b41e <__sfputc_r+0x22>

0800b426 <__sfputs_r>:
 800b426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b428:	0006      	movs	r6, r0
 800b42a:	000f      	movs	r7, r1
 800b42c:	0014      	movs	r4, r2
 800b42e:	18d5      	adds	r5, r2, r3
 800b430:	42ac      	cmp	r4, r5
 800b432:	d101      	bne.n	800b438 <__sfputs_r+0x12>
 800b434:	2000      	movs	r0, #0
 800b436:	e007      	b.n	800b448 <__sfputs_r+0x22>
 800b438:	7821      	ldrb	r1, [r4, #0]
 800b43a:	003a      	movs	r2, r7
 800b43c:	0030      	movs	r0, r6
 800b43e:	f7ff ffdd 	bl	800b3fc <__sfputc_r>
 800b442:	3401      	adds	r4, #1
 800b444:	1c43      	adds	r3, r0, #1
 800b446:	d1f3      	bne.n	800b430 <__sfputs_r+0xa>
 800b448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b44c <_vfiprintf_r>:
 800b44c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b44e:	b09f      	sub	sp, #124	; 0x7c
 800b450:	0006      	movs	r6, r0
 800b452:	000f      	movs	r7, r1
 800b454:	0014      	movs	r4, r2
 800b456:	9305      	str	r3, [sp, #20]
 800b458:	2800      	cmp	r0, #0
 800b45a:	d004      	beq.n	800b466 <_vfiprintf_r+0x1a>
 800b45c:	6983      	ldr	r3, [r0, #24]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d101      	bne.n	800b466 <_vfiprintf_r+0x1a>
 800b462:	f7ff fed7 	bl	800b214 <__sinit>
 800b466:	4b7f      	ldr	r3, [pc, #508]	; (800b664 <_vfiprintf_r+0x218>)
 800b468:	429f      	cmp	r7, r3
 800b46a:	d15c      	bne.n	800b526 <_vfiprintf_r+0xda>
 800b46c:	6877      	ldr	r7, [r6, #4]
 800b46e:	89bb      	ldrh	r3, [r7, #12]
 800b470:	071b      	lsls	r3, r3, #28
 800b472:	d562      	bpl.n	800b53a <_vfiprintf_r+0xee>
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d05f      	beq.n	800b53a <_vfiprintf_r+0xee>
 800b47a:	2300      	movs	r3, #0
 800b47c:	ad06      	add	r5, sp, #24
 800b47e:	616b      	str	r3, [r5, #20]
 800b480:	3320      	adds	r3, #32
 800b482:	766b      	strb	r3, [r5, #25]
 800b484:	3310      	adds	r3, #16
 800b486:	76ab      	strb	r3, [r5, #26]
 800b488:	9402      	str	r4, [sp, #8]
 800b48a:	9c02      	ldr	r4, [sp, #8]
 800b48c:	7823      	ldrb	r3, [r4, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d15d      	bne.n	800b54e <_vfiprintf_r+0x102>
 800b492:	9b02      	ldr	r3, [sp, #8]
 800b494:	1ae3      	subs	r3, r4, r3
 800b496:	9304      	str	r3, [sp, #16]
 800b498:	d00d      	beq.n	800b4b6 <_vfiprintf_r+0x6a>
 800b49a:	9b04      	ldr	r3, [sp, #16]
 800b49c:	9a02      	ldr	r2, [sp, #8]
 800b49e:	0039      	movs	r1, r7
 800b4a0:	0030      	movs	r0, r6
 800b4a2:	f7ff ffc0 	bl	800b426 <__sfputs_r>
 800b4a6:	1c43      	adds	r3, r0, #1
 800b4a8:	d100      	bne.n	800b4ac <_vfiprintf_r+0x60>
 800b4aa:	e0cc      	b.n	800b646 <_vfiprintf_r+0x1fa>
 800b4ac:	696a      	ldr	r2, [r5, #20]
 800b4ae:	9b04      	ldr	r3, [sp, #16]
 800b4b0:	4694      	mov	ip, r2
 800b4b2:	4463      	add	r3, ip
 800b4b4:	616b      	str	r3, [r5, #20]
 800b4b6:	7823      	ldrb	r3, [r4, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d100      	bne.n	800b4be <_vfiprintf_r+0x72>
 800b4bc:	e0c3      	b.n	800b646 <_vfiprintf_r+0x1fa>
 800b4be:	2201      	movs	r2, #1
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	4252      	negs	r2, r2
 800b4c4:	606a      	str	r2, [r5, #4]
 800b4c6:	a902      	add	r1, sp, #8
 800b4c8:	3254      	adds	r2, #84	; 0x54
 800b4ca:	1852      	adds	r2, r2, r1
 800b4cc:	3401      	adds	r4, #1
 800b4ce:	602b      	str	r3, [r5, #0]
 800b4d0:	60eb      	str	r3, [r5, #12]
 800b4d2:	60ab      	str	r3, [r5, #8]
 800b4d4:	7013      	strb	r3, [r2, #0]
 800b4d6:	65ab      	str	r3, [r5, #88]	; 0x58
 800b4d8:	7821      	ldrb	r1, [r4, #0]
 800b4da:	2205      	movs	r2, #5
 800b4dc:	4862      	ldr	r0, [pc, #392]	; (800b668 <_vfiprintf_r+0x21c>)
 800b4de:	f000 fcdf 	bl	800bea0 <memchr>
 800b4e2:	1c63      	adds	r3, r4, #1
 800b4e4:	469c      	mov	ip, r3
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	d135      	bne.n	800b556 <_vfiprintf_r+0x10a>
 800b4ea:	6829      	ldr	r1, [r5, #0]
 800b4ec:	06cb      	lsls	r3, r1, #27
 800b4ee:	d504      	bpl.n	800b4fa <_vfiprintf_r+0xae>
 800b4f0:	2353      	movs	r3, #83	; 0x53
 800b4f2:	aa02      	add	r2, sp, #8
 800b4f4:	3020      	adds	r0, #32
 800b4f6:	189b      	adds	r3, r3, r2
 800b4f8:	7018      	strb	r0, [r3, #0]
 800b4fa:	070b      	lsls	r3, r1, #28
 800b4fc:	d504      	bpl.n	800b508 <_vfiprintf_r+0xbc>
 800b4fe:	2353      	movs	r3, #83	; 0x53
 800b500:	202b      	movs	r0, #43	; 0x2b
 800b502:	aa02      	add	r2, sp, #8
 800b504:	189b      	adds	r3, r3, r2
 800b506:	7018      	strb	r0, [r3, #0]
 800b508:	7823      	ldrb	r3, [r4, #0]
 800b50a:	2b2a      	cmp	r3, #42	; 0x2a
 800b50c:	d02c      	beq.n	800b568 <_vfiprintf_r+0x11c>
 800b50e:	2000      	movs	r0, #0
 800b510:	210a      	movs	r1, #10
 800b512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b514:	7822      	ldrb	r2, [r4, #0]
 800b516:	3a30      	subs	r2, #48	; 0x30
 800b518:	2a09      	cmp	r2, #9
 800b51a:	d800      	bhi.n	800b51e <_vfiprintf_r+0xd2>
 800b51c:	e06b      	b.n	800b5f6 <_vfiprintf_r+0x1aa>
 800b51e:	2800      	cmp	r0, #0
 800b520:	d02a      	beq.n	800b578 <_vfiprintf_r+0x12c>
 800b522:	9309      	str	r3, [sp, #36]	; 0x24
 800b524:	e028      	b.n	800b578 <_vfiprintf_r+0x12c>
 800b526:	4b51      	ldr	r3, [pc, #324]	; (800b66c <_vfiprintf_r+0x220>)
 800b528:	429f      	cmp	r7, r3
 800b52a:	d101      	bne.n	800b530 <_vfiprintf_r+0xe4>
 800b52c:	68b7      	ldr	r7, [r6, #8]
 800b52e:	e79e      	b.n	800b46e <_vfiprintf_r+0x22>
 800b530:	4b4f      	ldr	r3, [pc, #316]	; (800b670 <_vfiprintf_r+0x224>)
 800b532:	429f      	cmp	r7, r3
 800b534:	d19b      	bne.n	800b46e <_vfiprintf_r+0x22>
 800b536:	68f7      	ldr	r7, [r6, #12]
 800b538:	e799      	b.n	800b46e <_vfiprintf_r+0x22>
 800b53a:	0039      	movs	r1, r7
 800b53c:	0030      	movs	r0, r6
 800b53e:	f000 faf1 	bl	800bb24 <__swsetup_r>
 800b542:	2800      	cmp	r0, #0
 800b544:	d099      	beq.n	800b47a <_vfiprintf_r+0x2e>
 800b546:	2001      	movs	r0, #1
 800b548:	4240      	negs	r0, r0
 800b54a:	b01f      	add	sp, #124	; 0x7c
 800b54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b54e:	2b25      	cmp	r3, #37	; 0x25
 800b550:	d09f      	beq.n	800b492 <_vfiprintf_r+0x46>
 800b552:	3401      	adds	r4, #1
 800b554:	e79a      	b.n	800b48c <_vfiprintf_r+0x40>
 800b556:	4b44      	ldr	r3, [pc, #272]	; (800b668 <_vfiprintf_r+0x21c>)
 800b558:	6829      	ldr	r1, [r5, #0]
 800b55a:	1ac0      	subs	r0, r0, r3
 800b55c:	2301      	movs	r3, #1
 800b55e:	4083      	lsls	r3, r0
 800b560:	430b      	orrs	r3, r1
 800b562:	602b      	str	r3, [r5, #0]
 800b564:	4664      	mov	r4, ip
 800b566:	e7b7      	b.n	800b4d8 <_vfiprintf_r+0x8c>
 800b568:	9b05      	ldr	r3, [sp, #20]
 800b56a:	1d18      	adds	r0, r3, #4
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	9005      	str	r0, [sp, #20]
 800b570:	2b00      	cmp	r3, #0
 800b572:	db3a      	blt.n	800b5ea <_vfiprintf_r+0x19e>
 800b574:	9309      	str	r3, [sp, #36]	; 0x24
 800b576:	4664      	mov	r4, ip
 800b578:	7823      	ldrb	r3, [r4, #0]
 800b57a:	2b2e      	cmp	r3, #46	; 0x2e
 800b57c:	d10b      	bne.n	800b596 <_vfiprintf_r+0x14a>
 800b57e:	7863      	ldrb	r3, [r4, #1]
 800b580:	1c62      	adds	r2, r4, #1
 800b582:	2b2a      	cmp	r3, #42	; 0x2a
 800b584:	d13f      	bne.n	800b606 <_vfiprintf_r+0x1ba>
 800b586:	9b05      	ldr	r3, [sp, #20]
 800b588:	3402      	adds	r4, #2
 800b58a:	1d1a      	adds	r2, r3, #4
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	9205      	str	r2, [sp, #20]
 800b590:	2b00      	cmp	r3, #0
 800b592:	db35      	blt.n	800b600 <_vfiprintf_r+0x1b4>
 800b594:	9307      	str	r3, [sp, #28]
 800b596:	7821      	ldrb	r1, [r4, #0]
 800b598:	2203      	movs	r2, #3
 800b59a:	4836      	ldr	r0, [pc, #216]	; (800b674 <_vfiprintf_r+0x228>)
 800b59c:	f000 fc80 	bl	800bea0 <memchr>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d007      	beq.n	800b5b4 <_vfiprintf_r+0x168>
 800b5a4:	4b33      	ldr	r3, [pc, #204]	; (800b674 <_vfiprintf_r+0x228>)
 800b5a6:	682a      	ldr	r2, [r5, #0]
 800b5a8:	1ac0      	subs	r0, r0, r3
 800b5aa:	2340      	movs	r3, #64	; 0x40
 800b5ac:	4083      	lsls	r3, r0
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	602b      	str	r3, [r5, #0]
 800b5b2:	3401      	adds	r4, #1
 800b5b4:	7821      	ldrb	r1, [r4, #0]
 800b5b6:	1c63      	adds	r3, r4, #1
 800b5b8:	2206      	movs	r2, #6
 800b5ba:	482f      	ldr	r0, [pc, #188]	; (800b678 <_vfiprintf_r+0x22c>)
 800b5bc:	9302      	str	r3, [sp, #8]
 800b5be:	7629      	strb	r1, [r5, #24]
 800b5c0:	f000 fc6e 	bl	800bea0 <memchr>
 800b5c4:	2800      	cmp	r0, #0
 800b5c6:	d044      	beq.n	800b652 <_vfiprintf_r+0x206>
 800b5c8:	4b2c      	ldr	r3, [pc, #176]	; (800b67c <_vfiprintf_r+0x230>)
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d12f      	bne.n	800b62e <_vfiprintf_r+0x1e2>
 800b5ce:	6829      	ldr	r1, [r5, #0]
 800b5d0:	9b05      	ldr	r3, [sp, #20]
 800b5d2:	2207      	movs	r2, #7
 800b5d4:	05c9      	lsls	r1, r1, #23
 800b5d6:	d528      	bpl.n	800b62a <_vfiprintf_r+0x1de>
 800b5d8:	189b      	adds	r3, r3, r2
 800b5da:	4393      	bics	r3, r2
 800b5dc:	3308      	adds	r3, #8
 800b5de:	9305      	str	r3, [sp, #20]
 800b5e0:	696b      	ldr	r3, [r5, #20]
 800b5e2:	9a03      	ldr	r2, [sp, #12]
 800b5e4:	189b      	adds	r3, r3, r2
 800b5e6:	616b      	str	r3, [r5, #20]
 800b5e8:	e74f      	b.n	800b48a <_vfiprintf_r+0x3e>
 800b5ea:	425b      	negs	r3, r3
 800b5ec:	60eb      	str	r3, [r5, #12]
 800b5ee:	2302      	movs	r3, #2
 800b5f0:	430b      	orrs	r3, r1
 800b5f2:	602b      	str	r3, [r5, #0]
 800b5f4:	e7bf      	b.n	800b576 <_vfiprintf_r+0x12a>
 800b5f6:	434b      	muls	r3, r1
 800b5f8:	3401      	adds	r4, #1
 800b5fa:	189b      	adds	r3, r3, r2
 800b5fc:	2001      	movs	r0, #1
 800b5fe:	e789      	b.n	800b514 <_vfiprintf_r+0xc8>
 800b600:	2301      	movs	r3, #1
 800b602:	425b      	negs	r3, r3
 800b604:	e7c6      	b.n	800b594 <_vfiprintf_r+0x148>
 800b606:	2300      	movs	r3, #0
 800b608:	0014      	movs	r4, r2
 800b60a:	200a      	movs	r0, #10
 800b60c:	001a      	movs	r2, r3
 800b60e:	606b      	str	r3, [r5, #4]
 800b610:	7821      	ldrb	r1, [r4, #0]
 800b612:	3930      	subs	r1, #48	; 0x30
 800b614:	2909      	cmp	r1, #9
 800b616:	d903      	bls.n	800b620 <_vfiprintf_r+0x1d4>
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d0bc      	beq.n	800b596 <_vfiprintf_r+0x14a>
 800b61c:	9207      	str	r2, [sp, #28]
 800b61e:	e7ba      	b.n	800b596 <_vfiprintf_r+0x14a>
 800b620:	4342      	muls	r2, r0
 800b622:	3401      	adds	r4, #1
 800b624:	1852      	adds	r2, r2, r1
 800b626:	2301      	movs	r3, #1
 800b628:	e7f2      	b.n	800b610 <_vfiprintf_r+0x1c4>
 800b62a:	3307      	adds	r3, #7
 800b62c:	e7d5      	b.n	800b5da <_vfiprintf_r+0x18e>
 800b62e:	ab05      	add	r3, sp, #20
 800b630:	9300      	str	r3, [sp, #0]
 800b632:	003a      	movs	r2, r7
 800b634:	4b12      	ldr	r3, [pc, #72]	; (800b680 <_vfiprintf_r+0x234>)
 800b636:	0029      	movs	r1, r5
 800b638:	0030      	movs	r0, r6
 800b63a:	e000      	b.n	800b63e <_vfiprintf_r+0x1f2>
 800b63c:	bf00      	nop
 800b63e:	9003      	str	r0, [sp, #12]
 800b640:	9b03      	ldr	r3, [sp, #12]
 800b642:	3301      	adds	r3, #1
 800b644:	d1cc      	bne.n	800b5e0 <_vfiprintf_r+0x194>
 800b646:	89bb      	ldrh	r3, [r7, #12]
 800b648:	065b      	lsls	r3, r3, #25
 800b64a:	d500      	bpl.n	800b64e <_vfiprintf_r+0x202>
 800b64c:	e77b      	b.n	800b546 <_vfiprintf_r+0xfa>
 800b64e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b650:	e77b      	b.n	800b54a <_vfiprintf_r+0xfe>
 800b652:	ab05      	add	r3, sp, #20
 800b654:	9300      	str	r3, [sp, #0]
 800b656:	003a      	movs	r2, r7
 800b658:	4b09      	ldr	r3, [pc, #36]	; (800b680 <_vfiprintf_r+0x234>)
 800b65a:	0029      	movs	r1, r5
 800b65c:	0030      	movs	r0, r6
 800b65e:	f000 f87f 	bl	800b760 <_printf_i>
 800b662:	e7ec      	b.n	800b63e <_vfiprintf_r+0x1f2>
 800b664:	0800c5a0 	.word	0x0800c5a0
 800b668:	0800c5e4 	.word	0x0800c5e4
 800b66c:	0800c5c0 	.word	0x0800c5c0
 800b670:	0800c580 	.word	0x0800c580
 800b674:	0800c5ea 	.word	0x0800c5ea
 800b678:	0800c5ee 	.word	0x0800c5ee
 800b67c:	00000000 	.word	0x00000000
 800b680:	0800b427 	.word	0x0800b427

0800b684 <_printf_common>:
 800b684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b686:	0015      	movs	r5, r2
 800b688:	9301      	str	r3, [sp, #4]
 800b68a:	688a      	ldr	r2, [r1, #8]
 800b68c:	690b      	ldr	r3, [r1, #16]
 800b68e:	9000      	str	r0, [sp, #0]
 800b690:	000c      	movs	r4, r1
 800b692:	4293      	cmp	r3, r2
 800b694:	da00      	bge.n	800b698 <_printf_common+0x14>
 800b696:	0013      	movs	r3, r2
 800b698:	0022      	movs	r2, r4
 800b69a:	602b      	str	r3, [r5, #0]
 800b69c:	3243      	adds	r2, #67	; 0x43
 800b69e:	7812      	ldrb	r2, [r2, #0]
 800b6a0:	2a00      	cmp	r2, #0
 800b6a2:	d001      	beq.n	800b6a8 <_printf_common+0x24>
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	602b      	str	r3, [r5, #0]
 800b6a8:	6823      	ldr	r3, [r4, #0]
 800b6aa:	069b      	lsls	r3, r3, #26
 800b6ac:	d502      	bpl.n	800b6b4 <_printf_common+0x30>
 800b6ae:	682b      	ldr	r3, [r5, #0]
 800b6b0:	3302      	adds	r3, #2
 800b6b2:	602b      	str	r3, [r5, #0]
 800b6b4:	2706      	movs	r7, #6
 800b6b6:	6823      	ldr	r3, [r4, #0]
 800b6b8:	401f      	ands	r7, r3
 800b6ba:	d027      	beq.n	800b70c <_printf_common+0x88>
 800b6bc:	0023      	movs	r3, r4
 800b6be:	3343      	adds	r3, #67	; 0x43
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	1e5a      	subs	r2, r3, #1
 800b6c4:	4193      	sbcs	r3, r2
 800b6c6:	6822      	ldr	r2, [r4, #0]
 800b6c8:	0692      	lsls	r2, r2, #26
 800b6ca:	d430      	bmi.n	800b72e <_printf_common+0xaa>
 800b6cc:	0022      	movs	r2, r4
 800b6ce:	9901      	ldr	r1, [sp, #4]
 800b6d0:	3243      	adds	r2, #67	; 0x43
 800b6d2:	9800      	ldr	r0, [sp, #0]
 800b6d4:	9e08      	ldr	r6, [sp, #32]
 800b6d6:	47b0      	blx	r6
 800b6d8:	1c43      	adds	r3, r0, #1
 800b6da:	d025      	beq.n	800b728 <_printf_common+0xa4>
 800b6dc:	2306      	movs	r3, #6
 800b6de:	6820      	ldr	r0, [r4, #0]
 800b6e0:	682a      	ldr	r2, [r5, #0]
 800b6e2:	68e1      	ldr	r1, [r4, #12]
 800b6e4:	4003      	ands	r3, r0
 800b6e6:	2500      	movs	r5, #0
 800b6e8:	2b04      	cmp	r3, #4
 800b6ea:	d103      	bne.n	800b6f4 <_printf_common+0x70>
 800b6ec:	1a8d      	subs	r5, r1, r2
 800b6ee:	43eb      	mvns	r3, r5
 800b6f0:	17db      	asrs	r3, r3, #31
 800b6f2:	401d      	ands	r5, r3
 800b6f4:	68a3      	ldr	r3, [r4, #8]
 800b6f6:	6922      	ldr	r2, [r4, #16]
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	dd01      	ble.n	800b700 <_printf_common+0x7c>
 800b6fc:	1a9b      	subs	r3, r3, r2
 800b6fe:	18ed      	adds	r5, r5, r3
 800b700:	2700      	movs	r7, #0
 800b702:	42bd      	cmp	r5, r7
 800b704:	d120      	bne.n	800b748 <_printf_common+0xc4>
 800b706:	2000      	movs	r0, #0
 800b708:	e010      	b.n	800b72c <_printf_common+0xa8>
 800b70a:	3701      	adds	r7, #1
 800b70c:	68e3      	ldr	r3, [r4, #12]
 800b70e:	682a      	ldr	r2, [r5, #0]
 800b710:	1a9b      	subs	r3, r3, r2
 800b712:	429f      	cmp	r7, r3
 800b714:	dad2      	bge.n	800b6bc <_printf_common+0x38>
 800b716:	0022      	movs	r2, r4
 800b718:	2301      	movs	r3, #1
 800b71a:	3219      	adds	r2, #25
 800b71c:	9901      	ldr	r1, [sp, #4]
 800b71e:	9800      	ldr	r0, [sp, #0]
 800b720:	9e08      	ldr	r6, [sp, #32]
 800b722:	47b0      	blx	r6
 800b724:	1c43      	adds	r3, r0, #1
 800b726:	d1f0      	bne.n	800b70a <_printf_common+0x86>
 800b728:	2001      	movs	r0, #1
 800b72a:	4240      	negs	r0, r0
 800b72c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b72e:	2030      	movs	r0, #48	; 0x30
 800b730:	18e1      	adds	r1, r4, r3
 800b732:	3143      	adds	r1, #67	; 0x43
 800b734:	7008      	strb	r0, [r1, #0]
 800b736:	0021      	movs	r1, r4
 800b738:	1c5a      	adds	r2, r3, #1
 800b73a:	3145      	adds	r1, #69	; 0x45
 800b73c:	7809      	ldrb	r1, [r1, #0]
 800b73e:	18a2      	adds	r2, r4, r2
 800b740:	3243      	adds	r2, #67	; 0x43
 800b742:	3302      	adds	r3, #2
 800b744:	7011      	strb	r1, [r2, #0]
 800b746:	e7c1      	b.n	800b6cc <_printf_common+0x48>
 800b748:	0022      	movs	r2, r4
 800b74a:	2301      	movs	r3, #1
 800b74c:	321a      	adds	r2, #26
 800b74e:	9901      	ldr	r1, [sp, #4]
 800b750:	9800      	ldr	r0, [sp, #0]
 800b752:	9e08      	ldr	r6, [sp, #32]
 800b754:	47b0      	blx	r6
 800b756:	1c43      	adds	r3, r0, #1
 800b758:	d0e6      	beq.n	800b728 <_printf_common+0xa4>
 800b75a:	3701      	adds	r7, #1
 800b75c:	e7d1      	b.n	800b702 <_printf_common+0x7e>
	...

0800b760 <_printf_i>:
 800b760:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b762:	b08b      	sub	sp, #44	; 0x2c
 800b764:	9206      	str	r2, [sp, #24]
 800b766:	000a      	movs	r2, r1
 800b768:	3243      	adds	r2, #67	; 0x43
 800b76a:	9307      	str	r3, [sp, #28]
 800b76c:	9005      	str	r0, [sp, #20]
 800b76e:	9204      	str	r2, [sp, #16]
 800b770:	7e0a      	ldrb	r2, [r1, #24]
 800b772:	000c      	movs	r4, r1
 800b774:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b776:	2a6e      	cmp	r2, #110	; 0x6e
 800b778:	d100      	bne.n	800b77c <_printf_i+0x1c>
 800b77a:	e08f      	b.n	800b89c <_printf_i+0x13c>
 800b77c:	d817      	bhi.n	800b7ae <_printf_i+0x4e>
 800b77e:	2a63      	cmp	r2, #99	; 0x63
 800b780:	d02c      	beq.n	800b7dc <_printf_i+0x7c>
 800b782:	d808      	bhi.n	800b796 <_printf_i+0x36>
 800b784:	2a00      	cmp	r2, #0
 800b786:	d100      	bne.n	800b78a <_printf_i+0x2a>
 800b788:	e099      	b.n	800b8be <_printf_i+0x15e>
 800b78a:	2a58      	cmp	r2, #88	; 0x58
 800b78c:	d054      	beq.n	800b838 <_printf_i+0xd8>
 800b78e:	0026      	movs	r6, r4
 800b790:	3642      	adds	r6, #66	; 0x42
 800b792:	7032      	strb	r2, [r6, #0]
 800b794:	e029      	b.n	800b7ea <_printf_i+0x8a>
 800b796:	2a64      	cmp	r2, #100	; 0x64
 800b798:	d001      	beq.n	800b79e <_printf_i+0x3e>
 800b79a:	2a69      	cmp	r2, #105	; 0x69
 800b79c:	d1f7      	bne.n	800b78e <_printf_i+0x2e>
 800b79e:	6821      	ldr	r1, [r4, #0]
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	0608      	lsls	r0, r1, #24
 800b7a4:	d523      	bpl.n	800b7ee <_printf_i+0x8e>
 800b7a6:	1d11      	adds	r1, r2, #4
 800b7a8:	6019      	str	r1, [r3, #0]
 800b7aa:	6815      	ldr	r5, [r2, #0]
 800b7ac:	e025      	b.n	800b7fa <_printf_i+0x9a>
 800b7ae:	2a73      	cmp	r2, #115	; 0x73
 800b7b0:	d100      	bne.n	800b7b4 <_printf_i+0x54>
 800b7b2:	e088      	b.n	800b8c6 <_printf_i+0x166>
 800b7b4:	d808      	bhi.n	800b7c8 <_printf_i+0x68>
 800b7b6:	2a6f      	cmp	r2, #111	; 0x6f
 800b7b8:	d029      	beq.n	800b80e <_printf_i+0xae>
 800b7ba:	2a70      	cmp	r2, #112	; 0x70
 800b7bc:	d1e7      	bne.n	800b78e <_printf_i+0x2e>
 800b7be:	2220      	movs	r2, #32
 800b7c0:	6809      	ldr	r1, [r1, #0]
 800b7c2:	430a      	orrs	r2, r1
 800b7c4:	6022      	str	r2, [r4, #0]
 800b7c6:	e003      	b.n	800b7d0 <_printf_i+0x70>
 800b7c8:	2a75      	cmp	r2, #117	; 0x75
 800b7ca:	d020      	beq.n	800b80e <_printf_i+0xae>
 800b7cc:	2a78      	cmp	r2, #120	; 0x78
 800b7ce:	d1de      	bne.n	800b78e <_printf_i+0x2e>
 800b7d0:	0022      	movs	r2, r4
 800b7d2:	2178      	movs	r1, #120	; 0x78
 800b7d4:	3245      	adds	r2, #69	; 0x45
 800b7d6:	7011      	strb	r1, [r2, #0]
 800b7d8:	4a6c      	ldr	r2, [pc, #432]	; (800b98c <_printf_i+0x22c>)
 800b7da:	e030      	b.n	800b83e <_printf_i+0xde>
 800b7dc:	000e      	movs	r6, r1
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	3642      	adds	r6, #66	; 0x42
 800b7e2:	1d11      	adds	r1, r2, #4
 800b7e4:	6019      	str	r1, [r3, #0]
 800b7e6:	6813      	ldr	r3, [r2, #0]
 800b7e8:	7033      	strb	r3, [r6, #0]
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e079      	b.n	800b8e2 <_printf_i+0x182>
 800b7ee:	0649      	lsls	r1, r1, #25
 800b7f0:	d5d9      	bpl.n	800b7a6 <_printf_i+0x46>
 800b7f2:	1d11      	adds	r1, r2, #4
 800b7f4:	6019      	str	r1, [r3, #0]
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	5ed5      	ldrsh	r5, [r2, r3]
 800b7fa:	2d00      	cmp	r5, #0
 800b7fc:	da03      	bge.n	800b806 <_printf_i+0xa6>
 800b7fe:	232d      	movs	r3, #45	; 0x2d
 800b800:	9a04      	ldr	r2, [sp, #16]
 800b802:	426d      	negs	r5, r5
 800b804:	7013      	strb	r3, [r2, #0]
 800b806:	4b62      	ldr	r3, [pc, #392]	; (800b990 <_printf_i+0x230>)
 800b808:	270a      	movs	r7, #10
 800b80a:	9303      	str	r3, [sp, #12]
 800b80c:	e02f      	b.n	800b86e <_printf_i+0x10e>
 800b80e:	6820      	ldr	r0, [r4, #0]
 800b810:	6819      	ldr	r1, [r3, #0]
 800b812:	0605      	lsls	r5, r0, #24
 800b814:	d503      	bpl.n	800b81e <_printf_i+0xbe>
 800b816:	1d08      	adds	r0, r1, #4
 800b818:	6018      	str	r0, [r3, #0]
 800b81a:	680d      	ldr	r5, [r1, #0]
 800b81c:	e005      	b.n	800b82a <_printf_i+0xca>
 800b81e:	0640      	lsls	r0, r0, #25
 800b820:	d5f9      	bpl.n	800b816 <_printf_i+0xb6>
 800b822:	680d      	ldr	r5, [r1, #0]
 800b824:	1d08      	adds	r0, r1, #4
 800b826:	6018      	str	r0, [r3, #0]
 800b828:	b2ad      	uxth	r5, r5
 800b82a:	4b59      	ldr	r3, [pc, #356]	; (800b990 <_printf_i+0x230>)
 800b82c:	2708      	movs	r7, #8
 800b82e:	9303      	str	r3, [sp, #12]
 800b830:	2a6f      	cmp	r2, #111	; 0x6f
 800b832:	d018      	beq.n	800b866 <_printf_i+0x106>
 800b834:	270a      	movs	r7, #10
 800b836:	e016      	b.n	800b866 <_printf_i+0x106>
 800b838:	3145      	adds	r1, #69	; 0x45
 800b83a:	700a      	strb	r2, [r1, #0]
 800b83c:	4a54      	ldr	r2, [pc, #336]	; (800b990 <_printf_i+0x230>)
 800b83e:	9203      	str	r2, [sp, #12]
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	6821      	ldr	r1, [r4, #0]
 800b844:	1d10      	adds	r0, r2, #4
 800b846:	6018      	str	r0, [r3, #0]
 800b848:	6815      	ldr	r5, [r2, #0]
 800b84a:	0608      	lsls	r0, r1, #24
 800b84c:	d522      	bpl.n	800b894 <_printf_i+0x134>
 800b84e:	07cb      	lsls	r3, r1, #31
 800b850:	d502      	bpl.n	800b858 <_printf_i+0xf8>
 800b852:	2320      	movs	r3, #32
 800b854:	4319      	orrs	r1, r3
 800b856:	6021      	str	r1, [r4, #0]
 800b858:	2710      	movs	r7, #16
 800b85a:	2d00      	cmp	r5, #0
 800b85c:	d103      	bne.n	800b866 <_printf_i+0x106>
 800b85e:	2320      	movs	r3, #32
 800b860:	6822      	ldr	r2, [r4, #0]
 800b862:	439a      	bics	r2, r3
 800b864:	6022      	str	r2, [r4, #0]
 800b866:	0023      	movs	r3, r4
 800b868:	2200      	movs	r2, #0
 800b86a:	3343      	adds	r3, #67	; 0x43
 800b86c:	701a      	strb	r2, [r3, #0]
 800b86e:	6863      	ldr	r3, [r4, #4]
 800b870:	60a3      	str	r3, [r4, #8]
 800b872:	2b00      	cmp	r3, #0
 800b874:	db5c      	blt.n	800b930 <_printf_i+0x1d0>
 800b876:	2204      	movs	r2, #4
 800b878:	6821      	ldr	r1, [r4, #0]
 800b87a:	4391      	bics	r1, r2
 800b87c:	6021      	str	r1, [r4, #0]
 800b87e:	2d00      	cmp	r5, #0
 800b880:	d158      	bne.n	800b934 <_printf_i+0x1d4>
 800b882:	9e04      	ldr	r6, [sp, #16]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d064      	beq.n	800b952 <_printf_i+0x1f2>
 800b888:	0026      	movs	r6, r4
 800b88a:	9b03      	ldr	r3, [sp, #12]
 800b88c:	3642      	adds	r6, #66	; 0x42
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	7033      	strb	r3, [r6, #0]
 800b892:	e05e      	b.n	800b952 <_printf_i+0x1f2>
 800b894:	0648      	lsls	r0, r1, #25
 800b896:	d5da      	bpl.n	800b84e <_printf_i+0xee>
 800b898:	b2ad      	uxth	r5, r5
 800b89a:	e7d8      	b.n	800b84e <_printf_i+0xee>
 800b89c:	6809      	ldr	r1, [r1, #0]
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	0608      	lsls	r0, r1, #24
 800b8a2:	d505      	bpl.n	800b8b0 <_printf_i+0x150>
 800b8a4:	1d11      	adds	r1, r2, #4
 800b8a6:	6019      	str	r1, [r3, #0]
 800b8a8:	6813      	ldr	r3, [r2, #0]
 800b8aa:	6962      	ldr	r2, [r4, #20]
 800b8ac:	601a      	str	r2, [r3, #0]
 800b8ae:	e006      	b.n	800b8be <_printf_i+0x15e>
 800b8b0:	0649      	lsls	r1, r1, #25
 800b8b2:	d5f7      	bpl.n	800b8a4 <_printf_i+0x144>
 800b8b4:	1d11      	adds	r1, r2, #4
 800b8b6:	6019      	str	r1, [r3, #0]
 800b8b8:	6813      	ldr	r3, [r2, #0]
 800b8ba:	8aa2      	ldrh	r2, [r4, #20]
 800b8bc:	801a      	strh	r2, [r3, #0]
 800b8be:	2300      	movs	r3, #0
 800b8c0:	9e04      	ldr	r6, [sp, #16]
 800b8c2:	6123      	str	r3, [r4, #16]
 800b8c4:	e054      	b.n	800b970 <_printf_i+0x210>
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	1d11      	adds	r1, r2, #4
 800b8ca:	6019      	str	r1, [r3, #0]
 800b8cc:	6816      	ldr	r6, [r2, #0]
 800b8ce:	2100      	movs	r1, #0
 800b8d0:	6862      	ldr	r2, [r4, #4]
 800b8d2:	0030      	movs	r0, r6
 800b8d4:	f000 fae4 	bl	800bea0 <memchr>
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	d001      	beq.n	800b8e0 <_printf_i+0x180>
 800b8dc:	1b80      	subs	r0, r0, r6
 800b8de:	6060      	str	r0, [r4, #4]
 800b8e0:	6863      	ldr	r3, [r4, #4]
 800b8e2:	6123      	str	r3, [r4, #16]
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	9a04      	ldr	r2, [sp, #16]
 800b8e8:	7013      	strb	r3, [r2, #0]
 800b8ea:	e041      	b.n	800b970 <_printf_i+0x210>
 800b8ec:	6923      	ldr	r3, [r4, #16]
 800b8ee:	0032      	movs	r2, r6
 800b8f0:	9906      	ldr	r1, [sp, #24]
 800b8f2:	9805      	ldr	r0, [sp, #20]
 800b8f4:	9d07      	ldr	r5, [sp, #28]
 800b8f6:	47a8      	blx	r5
 800b8f8:	1c43      	adds	r3, r0, #1
 800b8fa:	d043      	beq.n	800b984 <_printf_i+0x224>
 800b8fc:	6823      	ldr	r3, [r4, #0]
 800b8fe:	2500      	movs	r5, #0
 800b900:	079b      	lsls	r3, r3, #30
 800b902:	d40f      	bmi.n	800b924 <_printf_i+0x1c4>
 800b904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b906:	68e0      	ldr	r0, [r4, #12]
 800b908:	4298      	cmp	r0, r3
 800b90a:	da3d      	bge.n	800b988 <_printf_i+0x228>
 800b90c:	0018      	movs	r0, r3
 800b90e:	e03b      	b.n	800b988 <_printf_i+0x228>
 800b910:	0022      	movs	r2, r4
 800b912:	2301      	movs	r3, #1
 800b914:	3219      	adds	r2, #25
 800b916:	9906      	ldr	r1, [sp, #24]
 800b918:	9805      	ldr	r0, [sp, #20]
 800b91a:	9e07      	ldr	r6, [sp, #28]
 800b91c:	47b0      	blx	r6
 800b91e:	1c43      	adds	r3, r0, #1
 800b920:	d030      	beq.n	800b984 <_printf_i+0x224>
 800b922:	3501      	adds	r5, #1
 800b924:	68e3      	ldr	r3, [r4, #12]
 800b926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b928:	1a9b      	subs	r3, r3, r2
 800b92a:	429d      	cmp	r5, r3
 800b92c:	dbf0      	blt.n	800b910 <_printf_i+0x1b0>
 800b92e:	e7e9      	b.n	800b904 <_printf_i+0x1a4>
 800b930:	2d00      	cmp	r5, #0
 800b932:	d0a9      	beq.n	800b888 <_printf_i+0x128>
 800b934:	9e04      	ldr	r6, [sp, #16]
 800b936:	0028      	movs	r0, r5
 800b938:	0039      	movs	r1, r7
 800b93a:	f7f4 fc6b 	bl	8000214 <__aeabi_uidivmod>
 800b93e:	9b03      	ldr	r3, [sp, #12]
 800b940:	3e01      	subs	r6, #1
 800b942:	5c5b      	ldrb	r3, [r3, r1]
 800b944:	0028      	movs	r0, r5
 800b946:	7033      	strb	r3, [r6, #0]
 800b948:	0039      	movs	r1, r7
 800b94a:	f7f4 fbdd 	bl	8000108 <__udivsi3>
 800b94e:	1e05      	subs	r5, r0, #0
 800b950:	d1f1      	bne.n	800b936 <_printf_i+0x1d6>
 800b952:	2f08      	cmp	r7, #8
 800b954:	d109      	bne.n	800b96a <_printf_i+0x20a>
 800b956:	6823      	ldr	r3, [r4, #0]
 800b958:	07db      	lsls	r3, r3, #31
 800b95a:	d506      	bpl.n	800b96a <_printf_i+0x20a>
 800b95c:	6863      	ldr	r3, [r4, #4]
 800b95e:	6922      	ldr	r2, [r4, #16]
 800b960:	4293      	cmp	r3, r2
 800b962:	dc02      	bgt.n	800b96a <_printf_i+0x20a>
 800b964:	2330      	movs	r3, #48	; 0x30
 800b966:	3e01      	subs	r6, #1
 800b968:	7033      	strb	r3, [r6, #0]
 800b96a:	9b04      	ldr	r3, [sp, #16]
 800b96c:	1b9b      	subs	r3, r3, r6
 800b96e:	6123      	str	r3, [r4, #16]
 800b970:	9b07      	ldr	r3, [sp, #28]
 800b972:	aa09      	add	r2, sp, #36	; 0x24
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	0021      	movs	r1, r4
 800b978:	9b06      	ldr	r3, [sp, #24]
 800b97a:	9805      	ldr	r0, [sp, #20]
 800b97c:	f7ff fe82 	bl	800b684 <_printf_common>
 800b980:	1c43      	adds	r3, r0, #1
 800b982:	d1b3      	bne.n	800b8ec <_printf_i+0x18c>
 800b984:	2001      	movs	r0, #1
 800b986:	4240      	negs	r0, r0
 800b988:	b00b      	add	sp, #44	; 0x2c
 800b98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b98c:	0800c606 	.word	0x0800c606
 800b990:	0800c5f5 	.word	0x0800c5f5

0800b994 <_sbrk_r>:
 800b994:	2300      	movs	r3, #0
 800b996:	b570      	push	{r4, r5, r6, lr}
 800b998:	4c06      	ldr	r4, [pc, #24]	; (800b9b4 <_sbrk_r+0x20>)
 800b99a:	0005      	movs	r5, r0
 800b99c:	0008      	movs	r0, r1
 800b99e:	6023      	str	r3, [r4, #0]
 800b9a0:	f000 fb36 	bl	800c010 <_sbrk>
 800b9a4:	1c43      	adds	r3, r0, #1
 800b9a6:	d103      	bne.n	800b9b0 <_sbrk_r+0x1c>
 800b9a8:	6823      	ldr	r3, [r4, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d000      	beq.n	800b9b0 <_sbrk_r+0x1c>
 800b9ae:	602b      	str	r3, [r5, #0]
 800b9b0:	bd70      	pop	{r4, r5, r6, pc}
 800b9b2:	46c0      	nop			; (mov r8, r8)
 800b9b4:	2000169c 	.word	0x2000169c

0800b9b8 <__sread>:
 800b9b8:	b570      	push	{r4, r5, r6, lr}
 800b9ba:	000c      	movs	r4, r1
 800b9bc:	250e      	movs	r5, #14
 800b9be:	5f49      	ldrsh	r1, [r1, r5]
 800b9c0:	f000 fac6 	bl	800bf50 <_read_r>
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	db03      	blt.n	800b9d0 <__sread+0x18>
 800b9c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b9ca:	181b      	adds	r3, r3, r0
 800b9cc:	6563      	str	r3, [r4, #84]	; 0x54
 800b9ce:	bd70      	pop	{r4, r5, r6, pc}
 800b9d0:	89a3      	ldrh	r3, [r4, #12]
 800b9d2:	4a02      	ldr	r2, [pc, #8]	; (800b9dc <__sread+0x24>)
 800b9d4:	4013      	ands	r3, r2
 800b9d6:	81a3      	strh	r3, [r4, #12]
 800b9d8:	e7f9      	b.n	800b9ce <__sread+0x16>
 800b9da:	46c0      	nop			; (mov r8, r8)
 800b9dc:	ffffefff 	.word	0xffffefff

0800b9e0 <__swrite>:
 800b9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9e2:	001f      	movs	r7, r3
 800b9e4:	898b      	ldrh	r3, [r1, #12]
 800b9e6:	0005      	movs	r5, r0
 800b9e8:	000c      	movs	r4, r1
 800b9ea:	0016      	movs	r6, r2
 800b9ec:	05db      	lsls	r3, r3, #23
 800b9ee:	d505      	bpl.n	800b9fc <__swrite+0x1c>
 800b9f0:	230e      	movs	r3, #14
 800b9f2:	5ec9      	ldrsh	r1, [r1, r3]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	2302      	movs	r3, #2
 800b9f8:	f000 f9d2 	bl	800bda0 <_lseek_r>
 800b9fc:	89a3      	ldrh	r3, [r4, #12]
 800b9fe:	4a05      	ldr	r2, [pc, #20]	; (800ba14 <__swrite+0x34>)
 800ba00:	0028      	movs	r0, r5
 800ba02:	4013      	ands	r3, r2
 800ba04:	81a3      	strh	r3, [r4, #12]
 800ba06:	0032      	movs	r2, r6
 800ba08:	230e      	movs	r3, #14
 800ba0a:	5ee1      	ldrsh	r1, [r4, r3]
 800ba0c:	003b      	movs	r3, r7
 800ba0e:	f000 f875 	bl	800bafc <_write_r>
 800ba12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba14:	ffffefff 	.word	0xffffefff

0800ba18 <__sseek>:
 800ba18:	b570      	push	{r4, r5, r6, lr}
 800ba1a:	000c      	movs	r4, r1
 800ba1c:	250e      	movs	r5, #14
 800ba1e:	5f49      	ldrsh	r1, [r1, r5]
 800ba20:	f000 f9be 	bl	800bda0 <_lseek_r>
 800ba24:	89a3      	ldrh	r3, [r4, #12]
 800ba26:	1c42      	adds	r2, r0, #1
 800ba28:	d103      	bne.n	800ba32 <__sseek+0x1a>
 800ba2a:	4a05      	ldr	r2, [pc, #20]	; (800ba40 <__sseek+0x28>)
 800ba2c:	4013      	ands	r3, r2
 800ba2e:	81a3      	strh	r3, [r4, #12]
 800ba30:	bd70      	pop	{r4, r5, r6, pc}
 800ba32:	2280      	movs	r2, #128	; 0x80
 800ba34:	0152      	lsls	r2, r2, #5
 800ba36:	4313      	orrs	r3, r2
 800ba38:	81a3      	strh	r3, [r4, #12]
 800ba3a:	6560      	str	r0, [r4, #84]	; 0x54
 800ba3c:	e7f8      	b.n	800ba30 <__sseek+0x18>
 800ba3e:	46c0      	nop			; (mov r8, r8)
 800ba40:	ffffefff 	.word	0xffffefff

0800ba44 <__sclose>:
 800ba44:	b510      	push	{r4, lr}
 800ba46:	230e      	movs	r3, #14
 800ba48:	5ec9      	ldrsh	r1, [r1, r3]
 800ba4a:	f000 f8e1 	bl	800bc10 <_close_r>
 800ba4e:	bd10      	pop	{r4, pc}

0800ba50 <__swbuf_r>:
 800ba50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba52:	0005      	movs	r5, r0
 800ba54:	000e      	movs	r6, r1
 800ba56:	0014      	movs	r4, r2
 800ba58:	2800      	cmp	r0, #0
 800ba5a:	d004      	beq.n	800ba66 <__swbuf_r+0x16>
 800ba5c:	6983      	ldr	r3, [r0, #24]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d101      	bne.n	800ba66 <__swbuf_r+0x16>
 800ba62:	f7ff fbd7 	bl	800b214 <__sinit>
 800ba66:	4b22      	ldr	r3, [pc, #136]	; (800baf0 <__swbuf_r+0xa0>)
 800ba68:	429c      	cmp	r4, r3
 800ba6a:	d12d      	bne.n	800bac8 <__swbuf_r+0x78>
 800ba6c:	686c      	ldr	r4, [r5, #4]
 800ba6e:	69a3      	ldr	r3, [r4, #24]
 800ba70:	60a3      	str	r3, [r4, #8]
 800ba72:	89a3      	ldrh	r3, [r4, #12]
 800ba74:	071b      	lsls	r3, r3, #28
 800ba76:	d531      	bpl.n	800badc <__swbuf_r+0x8c>
 800ba78:	6923      	ldr	r3, [r4, #16]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d02e      	beq.n	800badc <__swbuf_r+0x8c>
 800ba7e:	6823      	ldr	r3, [r4, #0]
 800ba80:	6922      	ldr	r2, [r4, #16]
 800ba82:	b2f7      	uxtb	r7, r6
 800ba84:	1a98      	subs	r0, r3, r2
 800ba86:	6963      	ldr	r3, [r4, #20]
 800ba88:	b2f6      	uxtb	r6, r6
 800ba8a:	4298      	cmp	r0, r3
 800ba8c:	db05      	blt.n	800ba9a <__swbuf_r+0x4a>
 800ba8e:	0021      	movs	r1, r4
 800ba90:	0028      	movs	r0, r5
 800ba92:	f000 f959 	bl	800bd48 <_fflush_r>
 800ba96:	2800      	cmp	r0, #0
 800ba98:	d126      	bne.n	800bae8 <__swbuf_r+0x98>
 800ba9a:	68a3      	ldr	r3, [r4, #8]
 800ba9c:	3001      	adds	r0, #1
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	60a3      	str	r3, [r4, #8]
 800baa2:	6823      	ldr	r3, [r4, #0]
 800baa4:	1c5a      	adds	r2, r3, #1
 800baa6:	6022      	str	r2, [r4, #0]
 800baa8:	701f      	strb	r7, [r3, #0]
 800baaa:	6963      	ldr	r3, [r4, #20]
 800baac:	4298      	cmp	r0, r3
 800baae:	d004      	beq.n	800baba <__swbuf_r+0x6a>
 800bab0:	89a3      	ldrh	r3, [r4, #12]
 800bab2:	07db      	lsls	r3, r3, #31
 800bab4:	d51a      	bpl.n	800baec <__swbuf_r+0x9c>
 800bab6:	2e0a      	cmp	r6, #10
 800bab8:	d118      	bne.n	800baec <__swbuf_r+0x9c>
 800baba:	0021      	movs	r1, r4
 800babc:	0028      	movs	r0, r5
 800babe:	f000 f943 	bl	800bd48 <_fflush_r>
 800bac2:	2800      	cmp	r0, #0
 800bac4:	d012      	beq.n	800baec <__swbuf_r+0x9c>
 800bac6:	e00f      	b.n	800bae8 <__swbuf_r+0x98>
 800bac8:	4b0a      	ldr	r3, [pc, #40]	; (800baf4 <__swbuf_r+0xa4>)
 800baca:	429c      	cmp	r4, r3
 800bacc:	d101      	bne.n	800bad2 <__swbuf_r+0x82>
 800bace:	68ac      	ldr	r4, [r5, #8]
 800bad0:	e7cd      	b.n	800ba6e <__swbuf_r+0x1e>
 800bad2:	4b09      	ldr	r3, [pc, #36]	; (800baf8 <__swbuf_r+0xa8>)
 800bad4:	429c      	cmp	r4, r3
 800bad6:	d1ca      	bne.n	800ba6e <__swbuf_r+0x1e>
 800bad8:	68ec      	ldr	r4, [r5, #12]
 800bada:	e7c8      	b.n	800ba6e <__swbuf_r+0x1e>
 800badc:	0021      	movs	r1, r4
 800bade:	0028      	movs	r0, r5
 800bae0:	f000 f820 	bl	800bb24 <__swsetup_r>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d0ca      	beq.n	800ba7e <__swbuf_r+0x2e>
 800bae8:	2601      	movs	r6, #1
 800baea:	4276      	negs	r6, r6
 800baec:	0030      	movs	r0, r6
 800baee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800baf0:	0800c5a0 	.word	0x0800c5a0
 800baf4:	0800c5c0 	.word	0x0800c5c0
 800baf8:	0800c580 	.word	0x0800c580

0800bafc <_write_r>:
 800bafc:	b570      	push	{r4, r5, r6, lr}
 800bafe:	0005      	movs	r5, r0
 800bb00:	0008      	movs	r0, r1
 800bb02:	0011      	movs	r1, r2
 800bb04:	2200      	movs	r2, #0
 800bb06:	4c06      	ldr	r4, [pc, #24]	; (800bb20 <_write_r+0x24>)
 800bb08:	6022      	str	r2, [r4, #0]
 800bb0a:	001a      	movs	r2, r3
 800bb0c:	f000 fa90 	bl	800c030 <_write>
 800bb10:	1c43      	adds	r3, r0, #1
 800bb12:	d103      	bne.n	800bb1c <_write_r+0x20>
 800bb14:	6823      	ldr	r3, [r4, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d000      	beq.n	800bb1c <_write_r+0x20>
 800bb1a:	602b      	str	r3, [r5, #0]
 800bb1c:	bd70      	pop	{r4, r5, r6, pc}
 800bb1e:	46c0      	nop			; (mov r8, r8)
 800bb20:	2000169c 	.word	0x2000169c

0800bb24 <__swsetup_r>:
 800bb24:	4b36      	ldr	r3, [pc, #216]	; (800bc00 <__swsetup_r+0xdc>)
 800bb26:	b570      	push	{r4, r5, r6, lr}
 800bb28:	681d      	ldr	r5, [r3, #0]
 800bb2a:	0006      	movs	r6, r0
 800bb2c:	000c      	movs	r4, r1
 800bb2e:	2d00      	cmp	r5, #0
 800bb30:	d005      	beq.n	800bb3e <__swsetup_r+0x1a>
 800bb32:	69ab      	ldr	r3, [r5, #24]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d102      	bne.n	800bb3e <__swsetup_r+0x1a>
 800bb38:	0028      	movs	r0, r5
 800bb3a:	f7ff fb6b 	bl	800b214 <__sinit>
 800bb3e:	4b31      	ldr	r3, [pc, #196]	; (800bc04 <__swsetup_r+0xe0>)
 800bb40:	429c      	cmp	r4, r3
 800bb42:	d10f      	bne.n	800bb64 <__swsetup_r+0x40>
 800bb44:	686c      	ldr	r4, [r5, #4]
 800bb46:	230c      	movs	r3, #12
 800bb48:	5ee2      	ldrsh	r2, [r4, r3]
 800bb4a:	b293      	uxth	r3, r2
 800bb4c:	0719      	lsls	r1, r3, #28
 800bb4e:	d42d      	bmi.n	800bbac <__swsetup_r+0x88>
 800bb50:	06d9      	lsls	r1, r3, #27
 800bb52:	d411      	bmi.n	800bb78 <__swsetup_r+0x54>
 800bb54:	2309      	movs	r3, #9
 800bb56:	2001      	movs	r0, #1
 800bb58:	6033      	str	r3, [r6, #0]
 800bb5a:	3337      	adds	r3, #55	; 0x37
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	81a3      	strh	r3, [r4, #12]
 800bb60:	4240      	negs	r0, r0
 800bb62:	bd70      	pop	{r4, r5, r6, pc}
 800bb64:	4b28      	ldr	r3, [pc, #160]	; (800bc08 <__swsetup_r+0xe4>)
 800bb66:	429c      	cmp	r4, r3
 800bb68:	d101      	bne.n	800bb6e <__swsetup_r+0x4a>
 800bb6a:	68ac      	ldr	r4, [r5, #8]
 800bb6c:	e7eb      	b.n	800bb46 <__swsetup_r+0x22>
 800bb6e:	4b27      	ldr	r3, [pc, #156]	; (800bc0c <__swsetup_r+0xe8>)
 800bb70:	429c      	cmp	r4, r3
 800bb72:	d1e8      	bne.n	800bb46 <__swsetup_r+0x22>
 800bb74:	68ec      	ldr	r4, [r5, #12]
 800bb76:	e7e6      	b.n	800bb46 <__swsetup_r+0x22>
 800bb78:	075b      	lsls	r3, r3, #29
 800bb7a:	d513      	bpl.n	800bba4 <__swsetup_r+0x80>
 800bb7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb7e:	2900      	cmp	r1, #0
 800bb80:	d008      	beq.n	800bb94 <__swsetup_r+0x70>
 800bb82:	0023      	movs	r3, r4
 800bb84:	3344      	adds	r3, #68	; 0x44
 800bb86:	4299      	cmp	r1, r3
 800bb88:	d002      	beq.n	800bb90 <__swsetup_r+0x6c>
 800bb8a:	0030      	movs	r0, r6
 800bb8c:	f000 f996 	bl	800bebc <_free_r>
 800bb90:	2300      	movs	r3, #0
 800bb92:	6363      	str	r3, [r4, #52]	; 0x34
 800bb94:	2224      	movs	r2, #36	; 0x24
 800bb96:	89a3      	ldrh	r3, [r4, #12]
 800bb98:	4393      	bics	r3, r2
 800bb9a:	81a3      	strh	r3, [r4, #12]
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	6063      	str	r3, [r4, #4]
 800bba0:	6923      	ldr	r3, [r4, #16]
 800bba2:	6023      	str	r3, [r4, #0]
 800bba4:	2308      	movs	r3, #8
 800bba6:	89a2      	ldrh	r2, [r4, #12]
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	81a3      	strh	r3, [r4, #12]
 800bbac:	6923      	ldr	r3, [r4, #16]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d10b      	bne.n	800bbca <__swsetup_r+0xa6>
 800bbb2:	21a0      	movs	r1, #160	; 0xa0
 800bbb4:	2280      	movs	r2, #128	; 0x80
 800bbb6:	89a3      	ldrh	r3, [r4, #12]
 800bbb8:	0089      	lsls	r1, r1, #2
 800bbba:	0092      	lsls	r2, r2, #2
 800bbbc:	400b      	ands	r3, r1
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d003      	beq.n	800bbca <__swsetup_r+0xa6>
 800bbc2:	0021      	movs	r1, r4
 800bbc4:	0030      	movs	r0, r6
 800bbc6:	f000 f927 	bl	800be18 <__smakebuf_r>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	89a2      	ldrh	r2, [r4, #12]
 800bbce:	4013      	ands	r3, r2
 800bbd0:	d011      	beq.n	800bbf6 <__swsetup_r+0xd2>
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	60a3      	str	r3, [r4, #8]
 800bbd6:	6963      	ldr	r3, [r4, #20]
 800bbd8:	425b      	negs	r3, r3
 800bbda:	61a3      	str	r3, [r4, #24]
 800bbdc:	2000      	movs	r0, #0
 800bbde:	6923      	ldr	r3, [r4, #16]
 800bbe0:	4283      	cmp	r3, r0
 800bbe2:	d1be      	bne.n	800bb62 <__swsetup_r+0x3e>
 800bbe4:	230c      	movs	r3, #12
 800bbe6:	5ee2      	ldrsh	r2, [r4, r3]
 800bbe8:	0613      	lsls	r3, r2, #24
 800bbea:	d5ba      	bpl.n	800bb62 <__swsetup_r+0x3e>
 800bbec:	2340      	movs	r3, #64	; 0x40
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	81a3      	strh	r3, [r4, #12]
 800bbf2:	3801      	subs	r0, #1
 800bbf4:	e7b5      	b.n	800bb62 <__swsetup_r+0x3e>
 800bbf6:	0792      	lsls	r2, r2, #30
 800bbf8:	d400      	bmi.n	800bbfc <__swsetup_r+0xd8>
 800bbfa:	6963      	ldr	r3, [r4, #20]
 800bbfc:	60a3      	str	r3, [r4, #8]
 800bbfe:	e7ed      	b.n	800bbdc <__swsetup_r+0xb8>
 800bc00:	2000001c 	.word	0x2000001c
 800bc04:	0800c5a0 	.word	0x0800c5a0
 800bc08:	0800c5c0 	.word	0x0800c5c0
 800bc0c:	0800c580 	.word	0x0800c580

0800bc10 <_close_r>:
 800bc10:	2300      	movs	r3, #0
 800bc12:	b570      	push	{r4, r5, r6, lr}
 800bc14:	4c06      	ldr	r4, [pc, #24]	; (800bc30 <_close_r+0x20>)
 800bc16:	0005      	movs	r5, r0
 800bc18:	0008      	movs	r0, r1
 800bc1a:	6023      	str	r3, [r4, #0]
 800bc1c:	f000 f9d0 	bl	800bfc0 <_close>
 800bc20:	1c43      	adds	r3, r0, #1
 800bc22:	d103      	bne.n	800bc2c <_close_r+0x1c>
 800bc24:	6823      	ldr	r3, [r4, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d000      	beq.n	800bc2c <_close_r+0x1c>
 800bc2a:	602b      	str	r3, [r5, #0]
 800bc2c:	bd70      	pop	{r4, r5, r6, pc}
 800bc2e:	46c0      	nop			; (mov r8, r8)
 800bc30:	2000169c 	.word	0x2000169c

0800bc34 <__sflush_r>:
 800bc34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc36:	898a      	ldrh	r2, [r1, #12]
 800bc38:	0005      	movs	r5, r0
 800bc3a:	000c      	movs	r4, r1
 800bc3c:	0713      	lsls	r3, r2, #28
 800bc3e:	d460      	bmi.n	800bd02 <__sflush_r+0xce>
 800bc40:	684b      	ldr	r3, [r1, #4]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	dc04      	bgt.n	800bc50 <__sflush_r+0x1c>
 800bc46:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	dc01      	bgt.n	800bc50 <__sflush_r+0x1c>
 800bc4c:	2000      	movs	r0, #0
 800bc4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc50:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800bc52:	2f00      	cmp	r7, #0
 800bc54:	d0fa      	beq.n	800bc4c <__sflush_r+0x18>
 800bc56:	2300      	movs	r3, #0
 800bc58:	682e      	ldr	r6, [r5, #0]
 800bc5a:	602b      	str	r3, [r5, #0]
 800bc5c:	2380      	movs	r3, #128	; 0x80
 800bc5e:	015b      	lsls	r3, r3, #5
 800bc60:	401a      	ands	r2, r3
 800bc62:	d034      	beq.n	800bcce <__sflush_r+0x9a>
 800bc64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc66:	89a3      	ldrh	r3, [r4, #12]
 800bc68:	075b      	lsls	r3, r3, #29
 800bc6a:	d506      	bpl.n	800bc7a <__sflush_r+0x46>
 800bc6c:	6863      	ldr	r3, [r4, #4]
 800bc6e:	1ac0      	subs	r0, r0, r3
 800bc70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d001      	beq.n	800bc7a <__sflush_r+0x46>
 800bc76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc78:	1ac0      	subs	r0, r0, r3
 800bc7a:	0002      	movs	r2, r0
 800bc7c:	6a21      	ldr	r1, [r4, #32]
 800bc7e:	2300      	movs	r3, #0
 800bc80:	0028      	movs	r0, r5
 800bc82:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800bc84:	47b8      	blx	r7
 800bc86:	89a1      	ldrh	r1, [r4, #12]
 800bc88:	1c43      	adds	r3, r0, #1
 800bc8a:	d106      	bne.n	800bc9a <__sflush_r+0x66>
 800bc8c:	682b      	ldr	r3, [r5, #0]
 800bc8e:	2b1d      	cmp	r3, #29
 800bc90:	d831      	bhi.n	800bcf6 <__sflush_r+0xc2>
 800bc92:	4a2c      	ldr	r2, [pc, #176]	; (800bd44 <__sflush_r+0x110>)
 800bc94:	40da      	lsrs	r2, r3
 800bc96:	07d3      	lsls	r3, r2, #31
 800bc98:	d52d      	bpl.n	800bcf6 <__sflush_r+0xc2>
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	6063      	str	r3, [r4, #4]
 800bc9e:	6923      	ldr	r3, [r4, #16]
 800bca0:	6023      	str	r3, [r4, #0]
 800bca2:	04cb      	lsls	r3, r1, #19
 800bca4:	d505      	bpl.n	800bcb2 <__sflush_r+0x7e>
 800bca6:	1c43      	adds	r3, r0, #1
 800bca8:	d102      	bne.n	800bcb0 <__sflush_r+0x7c>
 800bcaa:	682b      	ldr	r3, [r5, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d100      	bne.n	800bcb2 <__sflush_r+0x7e>
 800bcb0:	6560      	str	r0, [r4, #84]	; 0x54
 800bcb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcb4:	602e      	str	r6, [r5, #0]
 800bcb6:	2900      	cmp	r1, #0
 800bcb8:	d0c8      	beq.n	800bc4c <__sflush_r+0x18>
 800bcba:	0023      	movs	r3, r4
 800bcbc:	3344      	adds	r3, #68	; 0x44
 800bcbe:	4299      	cmp	r1, r3
 800bcc0:	d002      	beq.n	800bcc8 <__sflush_r+0x94>
 800bcc2:	0028      	movs	r0, r5
 800bcc4:	f000 f8fa 	bl	800bebc <_free_r>
 800bcc8:	2000      	movs	r0, #0
 800bcca:	6360      	str	r0, [r4, #52]	; 0x34
 800bccc:	e7bf      	b.n	800bc4e <__sflush_r+0x1a>
 800bcce:	2301      	movs	r3, #1
 800bcd0:	6a21      	ldr	r1, [r4, #32]
 800bcd2:	0028      	movs	r0, r5
 800bcd4:	47b8      	blx	r7
 800bcd6:	1c43      	adds	r3, r0, #1
 800bcd8:	d1c5      	bne.n	800bc66 <__sflush_r+0x32>
 800bcda:	682b      	ldr	r3, [r5, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d0c2      	beq.n	800bc66 <__sflush_r+0x32>
 800bce0:	2b1d      	cmp	r3, #29
 800bce2:	d001      	beq.n	800bce8 <__sflush_r+0xb4>
 800bce4:	2b16      	cmp	r3, #22
 800bce6:	d101      	bne.n	800bcec <__sflush_r+0xb8>
 800bce8:	602e      	str	r6, [r5, #0]
 800bcea:	e7af      	b.n	800bc4c <__sflush_r+0x18>
 800bcec:	2340      	movs	r3, #64	; 0x40
 800bcee:	89a2      	ldrh	r2, [r4, #12]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	81a3      	strh	r3, [r4, #12]
 800bcf4:	e7ab      	b.n	800bc4e <__sflush_r+0x1a>
 800bcf6:	2340      	movs	r3, #64	; 0x40
 800bcf8:	430b      	orrs	r3, r1
 800bcfa:	2001      	movs	r0, #1
 800bcfc:	81a3      	strh	r3, [r4, #12]
 800bcfe:	4240      	negs	r0, r0
 800bd00:	e7a5      	b.n	800bc4e <__sflush_r+0x1a>
 800bd02:	690f      	ldr	r7, [r1, #16]
 800bd04:	2f00      	cmp	r7, #0
 800bd06:	d0a1      	beq.n	800bc4c <__sflush_r+0x18>
 800bd08:	680b      	ldr	r3, [r1, #0]
 800bd0a:	600f      	str	r7, [r1, #0]
 800bd0c:	1bdb      	subs	r3, r3, r7
 800bd0e:	9301      	str	r3, [sp, #4]
 800bd10:	2300      	movs	r3, #0
 800bd12:	0792      	lsls	r2, r2, #30
 800bd14:	d100      	bne.n	800bd18 <__sflush_r+0xe4>
 800bd16:	694b      	ldr	r3, [r1, #20]
 800bd18:	60a3      	str	r3, [r4, #8]
 800bd1a:	9b01      	ldr	r3, [sp, #4]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	dc00      	bgt.n	800bd22 <__sflush_r+0xee>
 800bd20:	e794      	b.n	800bc4c <__sflush_r+0x18>
 800bd22:	9b01      	ldr	r3, [sp, #4]
 800bd24:	003a      	movs	r2, r7
 800bd26:	6a21      	ldr	r1, [r4, #32]
 800bd28:	0028      	movs	r0, r5
 800bd2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd2c:	47b0      	blx	r6
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	dc03      	bgt.n	800bd3a <__sflush_r+0x106>
 800bd32:	2340      	movs	r3, #64	; 0x40
 800bd34:	89a2      	ldrh	r2, [r4, #12]
 800bd36:	4313      	orrs	r3, r2
 800bd38:	e7df      	b.n	800bcfa <__sflush_r+0xc6>
 800bd3a:	9b01      	ldr	r3, [sp, #4]
 800bd3c:	183f      	adds	r7, r7, r0
 800bd3e:	1a1b      	subs	r3, r3, r0
 800bd40:	9301      	str	r3, [sp, #4]
 800bd42:	e7ea      	b.n	800bd1a <__sflush_r+0xe6>
 800bd44:	20400001 	.word	0x20400001

0800bd48 <_fflush_r>:
 800bd48:	690b      	ldr	r3, [r1, #16]
 800bd4a:	b570      	push	{r4, r5, r6, lr}
 800bd4c:	0005      	movs	r5, r0
 800bd4e:	000c      	movs	r4, r1
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d101      	bne.n	800bd58 <_fflush_r+0x10>
 800bd54:	2000      	movs	r0, #0
 800bd56:	bd70      	pop	{r4, r5, r6, pc}
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	d004      	beq.n	800bd66 <_fflush_r+0x1e>
 800bd5c:	6983      	ldr	r3, [r0, #24]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d101      	bne.n	800bd66 <_fflush_r+0x1e>
 800bd62:	f7ff fa57 	bl	800b214 <__sinit>
 800bd66:	4b0b      	ldr	r3, [pc, #44]	; (800bd94 <_fflush_r+0x4c>)
 800bd68:	429c      	cmp	r4, r3
 800bd6a:	d109      	bne.n	800bd80 <_fflush_r+0x38>
 800bd6c:	686c      	ldr	r4, [r5, #4]
 800bd6e:	220c      	movs	r2, #12
 800bd70:	5ea3      	ldrsh	r3, [r4, r2]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d0ee      	beq.n	800bd54 <_fflush_r+0xc>
 800bd76:	0021      	movs	r1, r4
 800bd78:	0028      	movs	r0, r5
 800bd7a:	f7ff ff5b 	bl	800bc34 <__sflush_r>
 800bd7e:	e7ea      	b.n	800bd56 <_fflush_r+0xe>
 800bd80:	4b05      	ldr	r3, [pc, #20]	; (800bd98 <_fflush_r+0x50>)
 800bd82:	429c      	cmp	r4, r3
 800bd84:	d101      	bne.n	800bd8a <_fflush_r+0x42>
 800bd86:	68ac      	ldr	r4, [r5, #8]
 800bd88:	e7f1      	b.n	800bd6e <_fflush_r+0x26>
 800bd8a:	4b04      	ldr	r3, [pc, #16]	; (800bd9c <_fflush_r+0x54>)
 800bd8c:	429c      	cmp	r4, r3
 800bd8e:	d1ee      	bne.n	800bd6e <_fflush_r+0x26>
 800bd90:	68ec      	ldr	r4, [r5, #12]
 800bd92:	e7ec      	b.n	800bd6e <_fflush_r+0x26>
 800bd94:	0800c5a0 	.word	0x0800c5a0
 800bd98:	0800c5c0 	.word	0x0800c5c0
 800bd9c:	0800c580 	.word	0x0800c580

0800bda0 <_lseek_r>:
 800bda0:	b570      	push	{r4, r5, r6, lr}
 800bda2:	0005      	movs	r5, r0
 800bda4:	0008      	movs	r0, r1
 800bda6:	0011      	movs	r1, r2
 800bda8:	2200      	movs	r2, #0
 800bdaa:	4c06      	ldr	r4, [pc, #24]	; (800bdc4 <_lseek_r+0x24>)
 800bdac:	6022      	str	r2, [r4, #0]
 800bdae:	001a      	movs	r2, r3
 800bdb0:	f000 f91e 	bl	800bff0 <_lseek>
 800bdb4:	1c43      	adds	r3, r0, #1
 800bdb6:	d103      	bne.n	800bdc0 <_lseek_r+0x20>
 800bdb8:	6823      	ldr	r3, [r4, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d000      	beq.n	800bdc0 <_lseek_r+0x20>
 800bdbe:	602b      	str	r3, [r5, #0]
 800bdc0:	bd70      	pop	{r4, r5, r6, pc}
 800bdc2:	46c0      	nop			; (mov r8, r8)
 800bdc4:	2000169c 	.word	0x2000169c

0800bdc8 <__swhatbuf_r>:
 800bdc8:	b570      	push	{r4, r5, r6, lr}
 800bdca:	000e      	movs	r6, r1
 800bdcc:	001d      	movs	r5, r3
 800bdce:	230e      	movs	r3, #14
 800bdd0:	5ec9      	ldrsh	r1, [r1, r3]
 800bdd2:	b090      	sub	sp, #64	; 0x40
 800bdd4:	0014      	movs	r4, r2
 800bdd6:	2900      	cmp	r1, #0
 800bdd8:	da07      	bge.n	800bdea <__swhatbuf_r+0x22>
 800bdda:	2300      	movs	r3, #0
 800bddc:	602b      	str	r3, [r5, #0]
 800bdde:	89b3      	ldrh	r3, [r6, #12]
 800bde0:	061b      	lsls	r3, r3, #24
 800bde2:	d411      	bmi.n	800be08 <__swhatbuf_r+0x40>
 800bde4:	2380      	movs	r3, #128	; 0x80
 800bde6:	00db      	lsls	r3, r3, #3
 800bde8:	e00f      	b.n	800be0a <__swhatbuf_r+0x42>
 800bdea:	aa01      	add	r2, sp, #4
 800bdec:	f000 f8c4 	bl	800bf78 <_fstat_r>
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	dbf2      	blt.n	800bdda <__swhatbuf_r+0x12>
 800bdf4:	22f0      	movs	r2, #240	; 0xf0
 800bdf6:	9b02      	ldr	r3, [sp, #8]
 800bdf8:	0212      	lsls	r2, r2, #8
 800bdfa:	4013      	ands	r3, r2
 800bdfc:	4a05      	ldr	r2, [pc, #20]	; (800be14 <__swhatbuf_r+0x4c>)
 800bdfe:	189b      	adds	r3, r3, r2
 800be00:	425a      	negs	r2, r3
 800be02:	4153      	adcs	r3, r2
 800be04:	602b      	str	r3, [r5, #0]
 800be06:	e7ed      	b.n	800bde4 <__swhatbuf_r+0x1c>
 800be08:	2340      	movs	r3, #64	; 0x40
 800be0a:	2000      	movs	r0, #0
 800be0c:	6023      	str	r3, [r4, #0]
 800be0e:	b010      	add	sp, #64	; 0x40
 800be10:	bd70      	pop	{r4, r5, r6, pc}
 800be12:	46c0      	nop			; (mov r8, r8)
 800be14:	ffffe000 	.word	0xffffe000

0800be18 <__smakebuf_r>:
 800be18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be1a:	2602      	movs	r6, #2
 800be1c:	898b      	ldrh	r3, [r1, #12]
 800be1e:	0005      	movs	r5, r0
 800be20:	000c      	movs	r4, r1
 800be22:	4233      	tst	r3, r6
 800be24:	d006      	beq.n	800be34 <__smakebuf_r+0x1c>
 800be26:	0023      	movs	r3, r4
 800be28:	3347      	adds	r3, #71	; 0x47
 800be2a:	6023      	str	r3, [r4, #0]
 800be2c:	6123      	str	r3, [r4, #16]
 800be2e:	2301      	movs	r3, #1
 800be30:	6163      	str	r3, [r4, #20]
 800be32:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800be34:	ab01      	add	r3, sp, #4
 800be36:	466a      	mov	r2, sp
 800be38:	f7ff ffc6 	bl	800bdc8 <__swhatbuf_r>
 800be3c:	9900      	ldr	r1, [sp, #0]
 800be3e:	0007      	movs	r7, r0
 800be40:	0028      	movs	r0, r5
 800be42:	f7ff fa7d 	bl	800b340 <_malloc_r>
 800be46:	2800      	cmp	r0, #0
 800be48:	d108      	bne.n	800be5c <__smakebuf_r+0x44>
 800be4a:	220c      	movs	r2, #12
 800be4c:	5ea3      	ldrsh	r3, [r4, r2]
 800be4e:	059a      	lsls	r2, r3, #22
 800be50:	d4ef      	bmi.n	800be32 <__smakebuf_r+0x1a>
 800be52:	2203      	movs	r2, #3
 800be54:	4393      	bics	r3, r2
 800be56:	431e      	orrs	r6, r3
 800be58:	81a6      	strh	r6, [r4, #12]
 800be5a:	e7e4      	b.n	800be26 <__smakebuf_r+0xe>
 800be5c:	4b0f      	ldr	r3, [pc, #60]	; (800be9c <__smakebuf_r+0x84>)
 800be5e:	62ab      	str	r3, [r5, #40]	; 0x28
 800be60:	2380      	movs	r3, #128	; 0x80
 800be62:	89a2      	ldrh	r2, [r4, #12]
 800be64:	6020      	str	r0, [r4, #0]
 800be66:	4313      	orrs	r3, r2
 800be68:	81a3      	strh	r3, [r4, #12]
 800be6a:	9b00      	ldr	r3, [sp, #0]
 800be6c:	6120      	str	r0, [r4, #16]
 800be6e:	6163      	str	r3, [r4, #20]
 800be70:	9b01      	ldr	r3, [sp, #4]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d00d      	beq.n	800be92 <__smakebuf_r+0x7a>
 800be76:	230e      	movs	r3, #14
 800be78:	5ee1      	ldrsh	r1, [r4, r3]
 800be7a:	0028      	movs	r0, r5
 800be7c:	f000 f88e 	bl	800bf9c <_isatty_r>
 800be80:	2800      	cmp	r0, #0
 800be82:	d006      	beq.n	800be92 <__smakebuf_r+0x7a>
 800be84:	2203      	movs	r2, #3
 800be86:	89a3      	ldrh	r3, [r4, #12]
 800be88:	4393      	bics	r3, r2
 800be8a:	001a      	movs	r2, r3
 800be8c:	2301      	movs	r3, #1
 800be8e:	4313      	orrs	r3, r2
 800be90:	81a3      	strh	r3, [r4, #12]
 800be92:	89a0      	ldrh	r0, [r4, #12]
 800be94:	4338      	orrs	r0, r7
 800be96:	81a0      	strh	r0, [r4, #12]
 800be98:	e7cb      	b.n	800be32 <__smakebuf_r+0x1a>
 800be9a:	46c0      	nop			; (mov r8, r8)
 800be9c:	0800b191 	.word	0x0800b191

0800bea0 <memchr>:
 800bea0:	b2c9      	uxtb	r1, r1
 800bea2:	1882      	adds	r2, r0, r2
 800bea4:	4290      	cmp	r0, r2
 800bea6:	d101      	bne.n	800beac <memchr+0xc>
 800bea8:	2000      	movs	r0, #0
 800beaa:	4770      	bx	lr
 800beac:	7803      	ldrb	r3, [r0, #0]
 800beae:	428b      	cmp	r3, r1
 800beb0:	d0fb      	beq.n	800beaa <memchr+0xa>
 800beb2:	3001      	adds	r0, #1
 800beb4:	e7f6      	b.n	800bea4 <memchr+0x4>

0800beb6 <__malloc_lock>:
 800beb6:	4770      	bx	lr

0800beb8 <__malloc_unlock>:
 800beb8:	4770      	bx	lr
	...

0800bebc <_free_r>:
 800bebc:	b570      	push	{r4, r5, r6, lr}
 800bebe:	0005      	movs	r5, r0
 800bec0:	2900      	cmp	r1, #0
 800bec2:	d010      	beq.n	800bee6 <_free_r+0x2a>
 800bec4:	1f0c      	subs	r4, r1, #4
 800bec6:	6823      	ldr	r3, [r4, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	da00      	bge.n	800bece <_free_r+0x12>
 800becc:	18e4      	adds	r4, r4, r3
 800bece:	0028      	movs	r0, r5
 800bed0:	f7ff fff1 	bl	800beb6 <__malloc_lock>
 800bed4:	4a1d      	ldr	r2, [pc, #116]	; (800bf4c <_free_r+0x90>)
 800bed6:	6813      	ldr	r3, [r2, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d105      	bne.n	800bee8 <_free_r+0x2c>
 800bedc:	6063      	str	r3, [r4, #4]
 800bede:	6014      	str	r4, [r2, #0]
 800bee0:	0028      	movs	r0, r5
 800bee2:	f7ff ffe9 	bl	800beb8 <__malloc_unlock>
 800bee6:	bd70      	pop	{r4, r5, r6, pc}
 800bee8:	42a3      	cmp	r3, r4
 800beea:	d909      	bls.n	800bf00 <_free_r+0x44>
 800beec:	6821      	ldr	r1, [r4, #0]
 800beee:	1860      	adds	r0, r4, r1
 800bef0:	4283      	cmp	r3, r0
 800bef2:	d1f3      	bne.n	800bedc <_free_r+0x20>
 800bef4:	6818      	ldr	r0, [r3, #0]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	1841      	adds	r1, r0, r1
 800befa:	6021      	str	r1, [r4, #0]
 800befc:	e7ee      	b.n	800bedc <_free_r+0x20>
 800befe:	0013      	movs	r3, r2
 800bf00:	685a      	ldr	r2, [r3, #4]
 800bf02:	2a00      	cmp	r2, #0
 800bf04:	d001      	beq.n	800bf0a <_free_r+0x4e>
 800bf06:	42a2      	cmp	r2, r4
 800bf08:	d9f9      	bls.n	800befe <_free_r+0x42>
 800bf0a:	6819      	ldr	r1, [r3, #0]
 800bf0c:	1858      	adds	r0, r3, r1
 800bf0e:	42a0      	cmp	r0, r4
 800bf10:	d10b      	bne.n	800bf2a <_free_r+0x6e>
 800bf12:	6820      	ldr	r0, [r4, #0]
 800bf14:	1809      	adds	r1, r1, r0
 800bf16:	1858      	adds	r0, r3, r1
 800bf18:	6019      	str	r1, [r3, #0]
 800bf1a:	4282      	cmp	r2, r0
 800bf1c:	d1e0      	bne.n	800bee0 <_free_r+0x24>
 800bf1e:	6810      	ldr	r0, [r2, #0]
 800bf20:	6852      	ldr	r2, [r2, #4]
 800bf22:	1841      	adds	r1, r0, r1
 800bf24:	6019      	str	r1, [r3, #0]
 800bf26:	605a      	str	r2, [r3, #4]
 800bf28:	e7da      	b.n	800bee0 <_free_r+0x24>
 800bf2a:	42a0      	cmp	r0, r4
 800bf2c:	d902      	bls.n	800bf34 <_free_r+0x78>
 800bf2e:	230c      	movs	r3, #12
 800bf30:	602b      	str	r3, [r5, #0]
 800bf32:	e7d5      	b.n	800bee0 <_free_r+0x24>
 800bf34:	6821      	ldr	r1, [r4, #0]
 800bf36:	1860      	adds	r0, r4, r1
 800bf38:	4282      	cmp	r2, r0
 800bf3a:	d103      	bne.n	800bf44 <_free_r+0x88>
 800bf3c:	6810      	ldr	r0, [r2, #0]
 800bf3e:	6852      	ldr	r2, [r2, #4]
 800bf40:	1841      	adds	r1, r0, r1
 800bf42:	6021      	str	r1, [r4, #0]
 800bf44:	6062      	str	r2, [r4, #4]
 800bf46:	605c      	str	r4, [r3, #4]
 800bf48:	e7ca      	b.n	800bee0 <_free_r+0x24>
 800bf4a:	46c0      	nop			; (mov r8, r8)
 800bf4c:	200000e0 	.word	0x200000e0

0800bf50 <_read_r>:
 800bf50:	b570      	push	{r4, r5, r6, lr}
 800bf52:	0005      	movs	r5, r0
 800bf54:	0008      	movs	r0, r1
 800bf56:	0011      	movs	r1, r2
 800bf58:	2200      	movs	r2, #0
 800bf5a:	4c06      	ldr	r4, [pc, #24]	; (800bf74 <_read_r+0x24>)
 800bf5c:	6022      	str	r2, [r4, #0]
 800bf5e:	001a      	movs	r2, r3
 800bf60:	f000 f84e 	bl	800c000 <_read>
 800bf64:	1c43      	adds	r3, r0, #1
 800bf66:	d103      	bne.n	800bf70 <_read_r+0x20>
 800bf68:	6823      	ldr	r3, [r4, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d000      	beq.n	800bf70 <_read_r+0x20>
 800bf6e:	602b      	str	r3, [r5, #0]
 800bf70:	bd70      	pop	{r4, r5, r6, pc}
 800bf72:	46c0      	nop			; (mov r8, r8)
 800bf74:	2000169c 	.word	0x2000169c

0800bf78 <_fstat_r>:
 800bf78:	2300      	movs	r3, #0
 800bf7a:	b570      	push	{r4, r5, r6, lr}
 800bf7c:	4c06      	ldr	r4, [pc, #24]	; (800bf98 <_fstat_r+0x20>)
 800bf7e:	0005      	movs	r5, r0
 800bf80:	0008      	movs	r0, r1
 800bf82:	0011      	movs	r1, r2
 800bf84:	6023      	str	r3, [r4, #0]
 800bf86:	f000 f823 	bl	800bfd0 <_fstat>
 800bf8a:	1c43      	adds	r3, r0, #1
 800bf8c:	d103      	bne.n	800bf96 <_fstat_r+0x1e>
 800bf8e:	6823      	ldr	r3, [r4, #0]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d000      	beq.n	800bf96 <_fstat_r+0x1e>
 800bf94:	602b      	str	r3, [r5, #0]
 800bf96:	bd70      	pop	{r4, r5, r6, pc}
 800bf98:	2000169c 	.word	0x2000169c

0800bf9c <_isatty_r>:
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	b570      	push	{r4, r5, r6, lr}
 800bfa0:	4c06      	ldr	r4, [pc, #24]	; (800bfbc <_isatty_r+0x20>)
 800bfa2:	0005      	movs	r5, r0
 800bfa4:	0008      	movs	r0, r1
 800bfa6:	6023      	str	r3, [r4, #0]
 800bfa8:	f000 f81a 	bl	800bfe0 <_isatty>
 800bfac:	1c43      	adds	r3, r0, #1
 800bfae:	d103      	bne.n	800bfb8 <_isatty_r+0x1c>
 800bfb0:	6823      	ldr	r3, [r4, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d000      	beq.n	800bfb8 <_isatty_r+0x1c>
 800bfb6:	602b      	str	r3, [r5, #0]
 800bfb8:	bd70      	pop	{r4, r5, r6, pc}
 800bfba:	46c0      	nop			; (mov r8, r8)
 800bfbc:	2000169c 	.word	0x2000169c

0800bfc0 <_close>:
 800bfc0:	2258      	movs	r2, #88	; 0x58
 800bfc2:	2001      	movs	r0, #1
 800bfc4:	4b01      	ldr	r3, [pc, #4]	; (800bfcc <_close+0xc>)
 800bfc6:	4240      	negs	r0, r0
 800bfc8:	601a      	str	r2, [r3, #0]
 800bfca:	4770      	bx	lr
 800bfcc:	2000169c 	.word	0x2000169c

0800bfd0 <_fstat>:
 800bfd0:	2258      	movs	r2, #88	; 0x58
 800bfd2:	2001      	movs	r0, #1
 800bfd4:	4b01      	ldr	r3, [pc, #4]	; (800bfdc <_fstat+0xc>)
 800bfd6:	4240      	negs	r0, r0
 800bfd8:	601a      	str	r2, [r3, #0]
 800bfda:	4770      	bx	lr
 800bfdc:	2000169c 	.word	0x2000169c

0800bfe0 <_isatty>:
 800bfe0:	2258      	movs	r2, #88	; 0x58
 800bfe2:	4b02      	ldr	r3, [pc, #8]	; (800bfec <_isatty+0xc>)
 800bfe4:	2000      	movs	r0, #0
 800bfe6:	601a      	str	r2, [r3, #0]
 800bfe8:	4770      	bx	lr
 800bfea:	46c0      	nop			; (mov r8, r8)
 800bfec:	2000169c 	.word	0x2000169c

0800bff0 <_lseek>:
 800bff0:	2258      	movs	r2, #88	; 0x58
 800bff2:	2001      	movs	r0, #1
 800bff4:	4b01      	ldr	r3, [pc, #4]	; (800bffc <_lseek+0xc>)
 800bff6:	4240      	negs	r0, r0
 800bff8:	601a      	str	r2, [r3, #0]
 800bffa:	4770      	bx	lr
 800bffc:	2000169c 	.word	0x2000169c

0800c000 <_read>:
 800c000:	2258      	movs	r2, #88	; 0x58
 800c002:	2001      	movs	r0, #1
 800c004:	4b01      	ldr	r3, [pc, #4]	; (800c00c <_read+0xc>)
 800c006:	4240      	negs	r0, r0
 800c008:	601a      	str	r2, [r3, #0]
 800c00a:	4770      	bx	lr
 800c00c:	2000169c 	.word	0x2000169c

0800c010 <_sbrk>:
 800c010:	4b05      	ldr	r3, [pc, #20]	; (800c028 <_sbrk+0x18>)
 800c012:	0002      	movs	r2, r0
 800c014:	6819      	ldr	r1, [r3, #0]
 800c016:	2900      	cmp	r1, #0
 800c018:	d101      	bne.n	800c01e <_sbrk+0xe>
 800c01a:	4904      	ldr	r1, [pc, #16]	; (800c02c <_sbrk+0x1c>)
 800c01c:	6019      	str	r1, [r3, #0]
 800c01e:	6818      	ldr	r0, [r3, #0]
 800c020:	1882      	adds	r2, r0, r2
 800c022:	601a      	str	r2, [r3, #0]
 800c024:	4770      	bx	lr
 800c026:	46c0      	nop			; (mov r8, r8)
 800c028:	200000e8 	.word	0x200000e8
 800c02c:	200016a0 	.word	0x200016a0

0800c030 <_write>:
 800c030:	2258      	movs	r2, #88	; 0x58
 800c032:	2001      	movs	r0, #1
 800c034:	4b01      	ldr	r3, [pc, #4]	; (800c03c <_write+0xc>)
 800c036:	4240      	negs	r0, r0
 800c038:	601a      	str	r2, [r3, #0]
 800c03a:	4770      	bx	lr
 800c03c:	2000169c 	.word	0x2000169c

0800c040 <_init>:
 800c040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c042:	46c0      	nop			; (mov r8, r8)
 800c044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c046:	bc08      	pop	{r3}
 800c048:	469e      	mov	lr, r3
 800c04a:	4770      	bx	lr

0800c04c <_fini>:
 800c04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c04e:	46c0      	nop			; (mov r8, r8)
 800c050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c052:	bc08      	pop	{r3}
 800c054:	469e      	mov	lr, r3
 800c056:	4770      	bx	lr
